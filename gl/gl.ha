export def GL_CURRENT_BIT = 0x00000001;
export def GL_POINT_BIT = 0x00000002;
export def GL_LINE_BIT = 0x00000004;
export def GL_POLYGON_BIT = 0x00000008;
export def GL_POLYGON_STIPPLE_BIT = 0x00000010;
export def GL_PIXEL_MODE_BIT = 0x00000020;
export def GL_LIGHTING_BIT = 0x00000040;
export def GL_FOG_BIT = 0x00000080;
export def GL_DEPTH_BUFFER_BIT = 0x00000100;
export def GL_ACCUM_BUFFER_BIT = 0x00000200;
export def GL_STENCIL_BUFFER_BIT = 0x00000400;
export def GL_VIEWPORT_BIT = 0x00000800;
export def GL_TRANSFORM_BIT = 0x00001000;
export def GL_ENABLE_BIT = 0x00002000;
export def GL_COLOR_BUFFER_BIT = 0x00004000;
export def GL_HINT_BIT = 0x00008000;
export def GL_EVAL_BIT = 0x00010000;
export def GL_LIST_BIT = 0x00020000;
export def GL_TEXTURE_BIT = 0x00040000;
export def GL_SCISSOR_BIT = 0x00080000;
export def GL_MULTISAMPLE_BIT = 0x20000000;
export def GL_MULTISAMPLE_BIT_ARB = 0x20000000;
export def GL_MULTISAMPLE_BIT_EXT = 0x20000000;
export def GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
export def GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
export def GL_DYNAMIC_STORAGE_BIT = 0x0100;
export def GL_DYNAMIC_STORAGE_BIT_EXT = 0x0100;
export def GL_CLIENT_STORAGE_BIT = 0x0200;
export def GL_CLIENT_STORAGE_BIT_EXT = 0x0200;
export def GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
export def GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;
export def GL_PER_GPU_STORAGE_BIT_NV = 0x0800;
export def GL_EXTERNAL_STORAGE_BIT_NVX = 0x2000;
export def GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
export def GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
export def GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
export def GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
export def GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
export def GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
export def GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
export def GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
export def GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
export def GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
export def GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
export def GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010;
export def GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
export def GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
export def GL_MAP_READ_BIT = 0x0001;
export def GL_MAP_READ_BIT_EXT = 0x0001;
export def GL_MAP_WRITE_BIT = 0x0002;
export def GL_MAP_WRITE_BIT_EXT = 0x0002;
export def GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
export def GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004;
export def GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
export def GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008;
export def GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
export def GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010;
export def GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
export def GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020;
export def GL_MAP_PERSISTENT_BIT = 0x0040;
export def GL_MAP_PERSISTENT_BIT_EXT = 0x0040;
export def GL_MAP_COHERENT_BIT = 0x0080;
export def GL_MAP_COHERENT_BIT_EXT = 0x0080;
export def GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
export def GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
export def GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
export def GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
export def GL_UNIFORM_BARRIER_BIT = 0x00000004;
export def GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
export def GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
export def GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
export def GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
export def GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
export def GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
export def GL_COMMAND_BARRIER_BIT = 0x00000040;
export def GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
export def GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
export def GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
export def GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
export def GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
export def GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
export def GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
export def GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
export def GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
export def GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
export def GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
export def GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
export def GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
export def GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
export def GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
export def GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000;
export def GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
export def GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
export def GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
export def GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
export def GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
export def GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
export def GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
export def GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
export def GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
export def GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001;
export def GL_VERTEX_SHADER_BIT = 0x00000001;
export def GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
export def GL_FRAGMENT_SHADER_BIT = 0x00000002;
export def GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
export def GL_GEOMETRY_SHADER_BIT = 0x00000004;
export def GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004;
export def GL_GEOMETRY_SHADER_BIT_OES = 0x00000004;
export def GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
export def GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008;
export def GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008;
export def GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
export def GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010;
export def GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010;
export def GL_COMPUTE_SHADER_BIT = 0x00000020;
export def GL_MESH_SHADER_BIT_NV = 0x00000040;
export def GL_TASK_SHADER_BIT_NV = 0x00000080;
export def GL_ALL_SHADER_BITS = 0xFFFFFFFF;
export def GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
export def GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001;
export def GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002;
export def GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004;
export def GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008;
export def GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010;
export def GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020;
export def GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040;
export def GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080;
export def GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
export def GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
export def GL_RED_BIT_ATI = 0x00000001;
export def GL_GREEN_BIT_ATI = 0x00000002;
export def GL_BLUE_BIT_ATI = 0x00000004;
export def GL_2X_BIT_ATI = 0x00000001;
export def GL_4X_BIT_ATI = 0x00000002;
export def GL_8X_BIT_ATI = 0x00000004;
export def GL_HALF_BIT_ATI = 0x00000008;
export def GL_QUARTER_BIT_ATI = 0x00000010;
export def GL_EIGHTH_BIT_ATI = 0x00000020;
export def GL_SATURATE_BIT_ATI = 0x00000040;
export def GL_COMP_BIT_ATI = 0x00000002;
export def GL_NEGATE_BIT_ATI = 0x00000004;
export def GL_BIAS_BIT_ATI = 0x00000008;
export def GL_TRACE_OPERATIONS_BIT_MESA = 0x0001;
export def GL_TRACE_PRIMITIVES_BIT_MESA = 0x0002;
export def GL_TRACE_ARRAYS_BIT_MESA = 0x0004;
export def GL_TRACE_TEXTURES_BIT_MESA = 0x0008;
export def GL_TRACE_PIXELS_BIT_MESA = 0x0010;
export def GL_TRACE_ERRORS_BIT_MESA = 0x0020;
export def GL_TRACE_ALL_BITS_MESA = 0xFFFF;
export def GL_BOLD_BIT_NV = 0x01;
export def GL_ITALIC_BIT_NV = 0x02;
export def GL_GLYPH_WIDTH_BIT_NV = 0x01;
export def GL_GLYPH_HEIGHT_BIT_NV = 0x02;
export def GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
export def GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
export def GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
export def GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
export def GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
export def GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
export def GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
export def GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
export def GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
export def GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
export def GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
export def GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
export def GL_FONT_ASCENDER_BIT_NV = 0x00200000;
export def GL_FONT_DESCENDER_BIT_NV = 0x00400000;
export def GL_FONT_HEIGHT_BIT_NV = 0x00800000;
export def GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
export def GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
export def GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
export def GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
export def GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
export def GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
export def GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
export def GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
export def GL_VERTEX23_BIT_PGI = 0x00000004;
export def GL_VERTEX4_BIT_PGI = 0x00000008;
export def GL_COLOR3_BIT_PGI = 0x00010000;
export def GL_COLOR4_BIT_PGI = 0x00020000;
export def GL_EDGEFLAG_BIT_PGI = 0x00040000;
export def GL_INDEX_BIT_PGI = 0x00080000;
export def GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
export def GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
export def GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
export def GL_MAT_EMISSION_BIT_PGI = 0x00800000;
export def GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
export def GL_MAT_SHININESS_BIT_PGI = 0x02000000;
export def GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
export def GL_NORMAL_BIT_PGI = 0x08000000;
export def GL_TEXCOORD1_BIT_PGI = 0x10000000;
export def GL_TEXCOORD2_BIT_PGI = 0x20000000;
export def GL_TEXCOORD3_BIT_PGI = 0x40000000;
export def GL_TEXCOORD4_BIT_PGI = 0x80000000;
export def GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001;
export def GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002;
export def GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004;
export def GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008;
export def GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010;
export def GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020;
export def GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040;
export def GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080;
export def GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
export def GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
export def GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
export def GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
export def GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
export def GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
export def GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
export def GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
export def GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
export def GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
export def GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
export def GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
export def GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
export def GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
export def GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
export def GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
export def GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
export def GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
export def GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
export def GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
export def GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
export def GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
export def GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
export def GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000;
export def GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001;
export def GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002;
export def GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004;
export def GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
export def GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
export def GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
export def GL_NOP_COMMAND_NV = 0x0001;
export def GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
export def GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
export def GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
export def GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
export def GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
export def GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
export def GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
export def GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
export def GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
export def GL_BLEND_COLOR_COMMAND_NV = 0x000B;
export def GL_STENCIL_REF_COMMAND_NV = 0x000C;
export def GL_LINE_WIDTH_COMMAND_NV = 0x000D;
export def GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
export def GL_ALPHA_REF_COMMAND_NV = 0x000F;
export def GL_VIEWPORT_COMMAND_NV = 0x0010;
export def GL_SCISSOR_COMMAND_NV = 0x0011;
export def GL_FRONT_FACE_COMMAND_NV = 0x0012;
export def GL_LAYOUT_DEFAULT_INTEL = 0;
export def GL_LAYOUT_LINEAR_INTEL = 1;
export def GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
export def GL_CLOSE_PATH_NV = 0x00;
export def GL_MOVE_TO_NV = 0x02;
export def GL_RELATIVE_MOVE_TO_NV = 0x03;
export def GL_LINE_TO_NV = 0x04;
export def GL_RELATIVE_LINE_TO_NV = 0x05;
export def GL_HORIZONTAL_LINE_TO_NV = 0x06;
export def GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
export def GL_VERTICAL_LINE_TO_NV = 0x08;
export def GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
export def GL_QUADRATIC_CURVE_TO_NV = 0x0A;
export def GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
export def GL_CUBIC_CURVE_TO_NV = 0x0C;
export def GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
export def GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
export def GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
export def GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
export def GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
export def GL_SMALL_CCW_ARC_TO_NV = 0x12;
export def GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
export def GL_SMALL_CW_ARC_TO_NV = 0x14;
export def GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
export def GL_LARGE_CCW_ARC_TO_NV = 0x16;
export def GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
export def GL_LARGE_CW_ARC_TO_NV = 0x18;
export def GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
export def GL_CONIC_CURVE_TO_NV = 0x1A;
export def GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
export def GL_SHARED_EDGE_NV = 0xC0;
export def GL_ROUNDED_RECT_NV = 0xE8;
export def GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
export def GL_ROUNDED_RECT2_NV = 0xEA;
export def GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
export def GL_ROUNDED_RECT4_NV = 0xEC;
export def GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
export def GL_ROUNDED_RECT8_NV = 0xEE;
export def GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
export def GL_RESTART_PATH_NV = 0xF0;
export def GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
export def GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
export def GL_RECT_NV = 0xF6;
export def GL_RELATIVE_RECT_NV = 0xF7;
export def GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
export def GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
export def GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
export def GL_ARC_TO_NV = 0xFE;
export def GL_RELATIVE_ARC_TO_NV = 0xFF;
export def GL_NEXT_BUFFER_NV = -2;
export def GL_SKIP_COMPONENTS4_NV = -3;
export def GL_SKIP_COMPONENTS3_NV = -4;
export def GL_SKIP_COMPONENTS2_NV = -5;
export def GL_SKIP_COMPONENTS1_NV = -6;
export def GL_RESTART_SUN = 0x0001;
export def GL_REPLACE_MIDDLE_SUN = 0x0002;
export def GL_REPLACE_OLDEST_SUN = 0x0003;
export def GL_FALSE = 0;
export def GL_NO_ERROR = 0;
export def GL_ZERO = 0;
export def GL_NONE = 0;
export def GL_NONE_OES = 0;
export def GL_TRUE = 1;
export def GL_ONE = 1;
export def GL_INVALID_INDEX = 0xFFFFFFFF;
export def GL_ALL_PIXELS_AMD = 0xFFFFFFFF;
export def GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
export def GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
export def GL_VERSION_ES_CL_1_0 = 1;
export def GL_VERSION_ES_CM_1_1 = 1;
export def GL_VERSION_ES_CL_1_1 = 1;
export def GL_UUID_SIZE_EXT = 16;
export def GL_LUID_SIZE_EXT = 8;
export def GL_POINTS = 0x0000;
export def GL_LINES = 0x0001;
export def GL_LINE_LOOP = 0x0002;
export def GL_LINE_STRIP = 0x0003;
export def GL_TRIANGLES = 0x0004;
export def GL_TRIANGLE_STRIP = 0x0005;
export def GL_TRIANGLE_FAN = 0x0006;
export def GL_QUADS = 0x0007;
export def GL_QUADS_EXT = 0x0007;
export def GL_QUADS_OES = 0x0007;
export def GL_QUAD_STRIP = 0x0008;
export def GL_POLYGON = 0x0009;
export def GL_LINES_ADJACENCY = 0x000A;
export def GL_LINES_ADJACENCY_ARB = 0x000A;
export def GL_LINES_ADJACENCY_EXT = 0x000A;
export def GL_LINES_ADJACENCY_OES = 0x000A;
export def GL_LINE_STRIP_ADJACENCY = 0x000B;
export def GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
export def GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
export def GL_LINE_STRIP_ADJACENCY_OES = 0x000B;
export def GL_TRIANGLES_ADJACENCY = 0x000C;
export def GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
export def GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
export def GL_TRIANGLES_ADJACENCY_OES = 0x000C;
export def GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
export def GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
export def GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
export def GL_TRIANGLE_STRIP_ADJACENCY_OES = 0x000D;
export def GL_PATCHES = 0x000E;
export def GL_PATCHES_EXT = 0x000E;
export def GL_PATCHES_OES = 0x000E;
export def GL_ACCUM = 0x0100;
export def GL_LOAD = 0x0101;
export def GL_RETURN = 0x0102;
export def GL_MULT = 0x0103;
export def GL_ADD = 0x0104;
export def GL_NEVER = 0x0200;
export def GL_LESS = 0x0201;
export def GL_EQUAL = 0x0202;
export def GL_LEQUAL = 0x0203;
export def GL_GREATER = 0x0204;
export def GL_NOTEQUAL = 0x0205;
export def GL_GEQUAL = 0x0206;
export def GL_ALWAYS = 0x0207;
export def GL_SRC_COLOR = 0x0300;
export def GL_ONE_MINUS_SRC_COLOR = 0x0301;
export def GL_SRC_ALPHA = 0x0302;
export def GL_ONE_MINUS_SRC_ALPHA = 0x0303;
export def GL_DST_ALPHA = 0x0304;
export def GL_ONE_MINUS_DST_ALPHA = 0x0305;
export def GL_DST_COLOR = 0x0306;
export def GL_ONE_MINUS_DST_COLOR = 0x0307;
export def GL_SRC_ALPHA_SATURATE = 0x0308;
export def GL_SRC_ALPHA_SATURATE_EXT = 0x0308;
export def GL_FRONT_LEFT = 0x0400;
export def GL_FRONT_RIGHT = 0x0401;
export def GL_BACK_LEFT = 0x0402;
export def GL_BACK_RIGHT = 0x0403;
export def GL_FRONT = 0x0404;
export def GL_BACK = 0x0405;
export def GL_LEFT = 0x0406;
export def GL_RIGHT = 0x0407;
export def GL_FRONT_AND_BACK = 0x0408;
export def GL_AUX0 = 0x0409;
export def GL_AUX1 = 0x040A;
export def GL_AUX2 = 0x040B;
export def GL_AUX3 = 0x040C;
export def GL_INVALID_ENUM = 0x0500;
export def GL_INVALID_VALUE = 0x0501;
export def GL_INVALID_OPERATION = 0x0502;
export def GL_STACK_OVERFLOW = 0x0503;
export def GL_STACK_OVERFLOW_KHR = 0x0503;
export def GL_STACK_UNDERFLOW = 0x0504;
export def GL_STACK_UNDERFLOW_KHR = 0x0504;
export def GL_OUT_OF_MEMORY = 0x0505;
export def GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
export def GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
export def GL_INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506;
export def GL_CONTEXT_LOST = 0x0507;
export def GL_CONTEXT_LOST_KHR = 0x0507;
export def GL_2D = 0x0600;
export def GL_3D = 0x0601;
export def GL_3D_COLOR = 0x0602;
export def GL_3D_COLOR_TEXTURE = 0x0603;
export def GL_4D_COLOR_TEXTURE = 0x0604;
export def GL_PASS_THROUGH_TOKEN = 0x0700;
export def GL_POINT_TOKEN = 0x0701;
export def GL_LINE_TOKEN = 0x0702;
export def GL_POLYGON_TOKEN = 0x0703;
export def GL_BITMAP_TOKEN = 0x0704;
export def GL_DRAW_PIXEL_TOKEN = 0x0705;
export def GL_COPY_PIXEL_TOKEN = 0x0706;
export def GL_LINE_RESET_TOKEN = 0x0707;
export def GL_EXP = 0x0800;
export def GL_EXP2 = 0x0801;
export def GL_CW = 0x0900;
export def GL_CCW = 0x0901;
export def GL_COEFF = 0x0A00;
export def GL_ORDER = 0x0A01;
export def GL_DOMAIN = 0x0A02;
export def GL_CURRENT_COLOR = 0x0B00;
export def GL_CURRENT_INDEX = 0x0B01;
export def GL_CURRENT_NORMAL = 0x0B02;
export def GL_CURRENT_TEXTURE_COORDS = 0x0B03;
export def GL_CURRENT_RASTER_COLOR = 0x0B04;
export def GL_CURRENT_RASTER_INDEX = 0x0B05;
export def GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
export def GL_CURRENT_RASTER_POSITION = 0x0B07;
export def GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
export def GL_CURRENT_RASTER_DISTANCE = 0x0B09;
export def GL_POINT_SMOOTH = 0x0B10;
export def GL_POINT_SIZE = 0x0B11;
export def GL_POINT_SIZE_RANGE = 0x0B12;
export def GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
export def GL_POINT_SIZE_GRANULARITY = 0x0B13;
export def GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
export def GL_LINE_SMOOTH = 0x0B20;
export def GL_LINE_WIDTH = 0x0B21;
export def GL_LINE_WIDTH_RANGE = 0x0B22;
export def GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
export def GL_LINE_WIDTH_GRANULARITY = 0x0B23;
export def GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
export def GL_LINE_STIPPLE = 0x0B24;
export def GL_LINE_STIPPLE_PATTERN = 0x0B25;
export def GL_LINE_STIPPLE_REPEAT = 0x0B26;
export def GL_LIST_MODE = 0x0B30;
export def GL_MAX_LIST_NESTING = 0x0B31;
export def GL_LIST_BASE = 0x0B32;
export def GL_LIST_INDEX = 0x0B33;
export def GL_POLYGON_MODE = 0x0B40;
export def GL_POLYGON_MODE_NV = 0x0B40;
export def GL_POLYGON_SMOOTH = 0x0B41;
export def GL_POLYGON_STIPPLE = 0x0B42;
export def GL_EDGE_FLAG = 0x0B43;
export def GL_CULL_FACE = 0x0B44;
export def GL_CULL_FACE_MODE = 0x0B45;
export def GL_FRONT_FACE = 0x0B46;
export def GL_LIGHTING = 0x0B50;
export def GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
export def GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
export def GL_LIGHT_MODEL_AMBIENT = 0x0B53;
export def GL_SHADE_MODEL = 0x0B54;
export def GL_COLOR_MATERIAL_FACE = 0x0B55;
export def GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
export def GL_COLOR_MATERIAL = 0x0B57;
export def GL_FOG = 0x0B60;
export def GL_FOG_INDEX = 0x0B61;
export def GL_FOG_DENSITY = 0x0B62;
export def GL_FOG_START = 0x0B63;
export def GL_FOG_END = 0x0B64;
export def GL_FOG_MODE = 0x0B65;
export def GL_FOG_COLOR = 0x0B66;
export def GL_DEPTH_RANGE = 0x0B70;
export def GL_DEPTH_TEST = 0x0B71;
export def GL_DEPTH_WRITEMASK = 0x0B72;
export def GL_DEPTH_CLEAR_VALUE = 0x0B73;
export def GL_DEPTH_FUNC = 0x0B74;
export def GL_ACCUM_CLEAR_VALUE = 0x0B80;
export def GL_STENCIL_TEST = 0x0B90;
export def GL_STENCIL_CLEAR_VALUE = 0x0B91;
export def GL_STENCIL_FUNC = 0x0B92;
export def GL_STENCIL_VALUE_MASK = 0x0B93;
export def GL_STENCIL_FAIL = 0x0B94;
export def GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
export def GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
export def GL_STENCIL_REF = 0x0B97;
export def GL_STENCIL_WRITEMASK = 0x0B98;
export def GL_MATRIX_MODE = 0x0BA0;
export def GL_NORMALIZE = 0x0BA1;
export def GL_VIEWPORT = 0x0BA2;
export def GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
export def GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
export def GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
export def GL_PROJECTION_STACK_DEPTH = 0x0BA4;
export def GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
export def GL_TEXTURE_STACK_DEPTH = 0x0BA5;
export def GL_MODELVIEW_MATRIX = 0x0BA6;
export def GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
export def GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
export def GL_PROJECTION_MATRIX = 0x0BA7;
export def GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
export def GL_TEXTURE_MATRIX = 0x0BA8;
export def GL_ATTRIB_STACK_DEPTH = 0x0BB0;
export def GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
export def GL_ALPHA_TEST = 0x0BC0;
export def GL_ALPHA_TEST_QCOM = 0x0BC0;
export def GL_ALPHA_TEST_FUNC = 0x0BC1;
export def GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
export def GL_ALPHA_TEST_REF = 0x0BC2;
export def GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
export def GL_DITHER = 0x0BD0;
export def GL_BLEND_DST = 0x0BE0;
export def GL_BLEND_SRC = 0x0BE1;
export def GL_BLEND = 0x0BE2;
export def GL_LOGIC_OP_MODE = 0x0BF0;
export def GL_INDEX_LOGIC_OP = 0x0BF1;
export def GL_LOGIC_OP = 0x0BF1;
export def GL_COLOR_LOGIC_OP = 0x0BF2;
export def GL_AUX_BUFFERS = 0x0C00;
export def GL_DRAW_BUFFER = 0x0C01;
export def GL_DRAW_BUFFER_EXT = 0x0C01;
export def GL_READ_BUFFER = 0x0C02;
export def GL_READ_BUFFER_EXT = 0x0C02;
export def GL_READ_BUFFER_NV = 0x0C02;
export def GL_SCISSOR_BOX = 0x0C10;
export def GL_SCISSOR_TEST = 0x0C11;
export def GL_INDEX_CLEAR_VALUE = 0x0C20;
export def GL_INDEX_WRITEMASK = 0x0C21;
export def GL_COLOR_CLEAR_VALUE = 0x0C22;
export def GL_COLOR_WRITEMASK = 0x0C23;
export def GL_INDEX_MODE = 0x0C30;
export def GL_RGBA_MODE = 0x0C31;
export def GL_DOUBLEBUFFER = 0x0C32;
export def GL_STEREO = 0x0C33;
export def GL_RENDER_MODE = 0x0C40;
export def GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
export def GL_POINT_SMOOTH_HINT = 0x0C51;
export def GL_LINE_SMOOTH_HINT = 0x0C52;
export def GL_POLYGON_SMOOTH_HINT = 0x0C53;
export def GL_FOG_HINT = 0x0C54;
export def GL_TEXTURE_GEN_S = 0x0C60;
export def GL_TEXTURE_GEN_T = 0x0C61;
export def GL_TEXTURE_GEN_R = 0x0C62;
export def GL_TEXTURE_GEN_Q = 0x0C63;
export def GL_PIXEL_MAP_I_TO_I = 0x0C70;
export def GL_PIXEL_MAP_S_TO_S = 0x0C71;
export def GL_PIXEL_MAP_I_TO_R = 0x0C72;
export def GL_PIXEL_MAP_I_TO_G = 0x0C73;
export def GL_PIXEL_MAP_I_TO_B = 0x0C74;
export def GL_PIXEL_MAP_I_TO_A = 0x0C75;
export def GL_PIXEL_MAP_R_TO_R = 0x0C76;
export def GL_PIXEL_MAP_G_TO_G = 0x0C77;
export def GL_PIXEL_MAP_B_TO_B = 0x0C78;
export def GL_PIXEL_MAP_A_TO_A = 0x0C79;
export def GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
export def GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
export def GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
export def GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
export def GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
export def GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
export def GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
export def GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
export def GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
export def GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
export def GL_UNPACK_SWAP_BYTES = 0x0CF0;
export def GL_UNPACK_LSB_FIRST = 0x0CF1;
export def GL_UNPACK_ROW_LENGTH = 0x0CF2;
export def GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
export def GL_UNPACK_SKIP_ROWS = 0x0CF3;
export def GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
export def GL_UNPACK_SKIP_PIXELS = 0x0CF4;
export def GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
export def GL_UNPACK_ALIGNMENT = 0x0CF5;
export def GL_PACK_SWAP_BYTES = 0x0D00;
export def GL_PACK_LSB_FIRST = 0x0D01;
export def GL_PACK_ROW_LENGTH = 0x0D02;
export def GL_PACK_ROW_LENGTH_NV = 0x0D02;
export def GL_PACK_SKIP_ROWS = 0x0D03;
export def GL_PACK_SKIP_ROWS_NV = 0x0D03;
export def GL_PACK_SKIP_PIXELS = 0x0D04;
export def GL_PACK_SKIP_PIXELS_NV = 0x0D04;
export def GL_PACK_ALIGNMENT = 0x0D05;
export def GL_MAP_COLOR = 0x0D10;
export def GL_MAP_STENCIL = 0x0D11;
export def GL_INDEX_SHIFT = 0x0D12;
export def GL_INDEX_OFFSET = 0x0D13;
export def GL_RED_SCALE = 0x0D14;
export def GL_RED_BIAS = 0x0D15;
export def GL_ZOOM_X = 0x0D16;
export def GL_ZOOM_Y = 0x0D17;
export def GL_GREEN_SCALE = 0x0D18;
export def GL_GREEN_BIAS = 0x0D19;
export def GL_BLUE_SCALE = 0x0D1A;
export def GL_BLUE_BIAS = 0x0D1B;
export def GL_ALPHA_SCALE = 0x0D1C;
export def GL_ALPHA_BIAS = 0x0D1D;
export def GL_DEPTH_SCALE = 0x0D1E;
export def GL_DEPTH_BIAS = 0x0D1F;
export def GL_MAX_EVAL_ORDER = 0x0D30;
export def GL_MAX_LIGHTS = 0x0D31;
export def GL_MAX_CLIP_PLANES = 0x0D32;
export def GL_MAX_CLIP_PLANES_IMG = 0x0D32;
export def GL_MAX_CLIP_DISTANCES = 0x0D32;
export def GL_MAX_CLIP_DISTANCES_EXT = 0x0D32;
export def GL_MAX_CLIP_DISTANCES_APPLE = 0x0D32;
export def GL_MAX_TEXTURE_SIZE = 0x0D33;
export def GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
export def GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
export def GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
export def GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
export def GL_MAX_NAME_STACK_DEPTH = 0x0D37;
export def GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
export def GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
export def GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
export def GL_MAX_VIEWPORT_DIMS = 0x0D3A;
export def GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
export def GL_SUBPIXEL_BITS = 0x0D50;
export def GL_INDEX_BITS = 0x0D51;
export def GL_RED_BITS = 0x0D52;
export def GL_GREEN_BITS = 0x0D53;
export def GL_BLUE_BITS = 0x0D54;
export def GL_ALPHA_BITS = 0x0D55;
export def GL_DEPTH_BITS = 0x0D56;
export def GL_STENCIL_BITS = 0x0D57;
export def GL_ACCUM_RED_BITS = 0x0D58;
export def GL_ACCUM_GREEN_BITS = 0x0D59;
export def GL_ACCUM_BLUE_BITS = 0x0D5A;
export def GL_ACCUM_ALPHA_BITS = 0x0D5B;
export def GL_NAME_STACK_DEPTH = 0x0D70;
export def GL_AUTO_NORMAL = 0x0D80;
export def GL_MAP1_COLOR_4 = 0x0D90;
export def GL_MAP1_INDEX = 0x0D91;
export def GL_MAP1_NORMAL = 0x0D92;
export def GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
export def GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
export def GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
export def GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
export def GL_MAP1_VERTEX_3 = 0x0D97;
export def GL_MAP1_VERTEX_4 = 0x0D98;
export def GL_MAP2_COLOR_4 = 0x0DB0;
export def GL_MAP2_INDEX = 0x0DB1;
export def GL_MAP2_NORMAL = 0x0DB2;
export def GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
export def GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
export def GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
export def GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
export def GL_MAP2_VERTEX_3 = 0x0DB7;
export def GL_MAP2_VERTEX_4 = 0x0DB8;
export def GL_MAP1_GRID_DOMAIN = 0x0DD0;
export def GL_MAP1_GRID_SEGMENTS = 0x0DD1;
export def GL_MAP2_GRID_DOMAIN = 0x0DD2;
export def GL_MAP2_GRID_SEGMENTS = 0x0DD3;
export def GL_TEXTURE_1D = 0x0DE0;
export def GL_TEXTURE_2D = 0x0DE1;
export def GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
export def GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
export def GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
export def GL_SELECTION_BUFFER_POINTER = 0x0DF3;
export def GL_SELECTION_BUFFER_SIZE = 0x0DF4;
export def GL_TEXTURE_WIDTH = 0x1000;
export def GL_TEXTURE_HEIGHT = 0x1001;
export def GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
export def GL_TEXTURE_COMPONENTS = 0x1003;
export def GL_TEXTURE_BORDER_COLOR = 0x1004;
export def GL_TEXTURE_BORDER_COLOR_EXT = 0x1004;
export def GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
export def GL_TEXTURE_BORDER_COLOR_OES = 0x1004;
export def GL_TEXTURE_BORDER = 0x1005;
export def GL_TEXTURE_TARGET = 0x1006;
export def GL_DONT_CARE = 0x1100;
export def GL_FASTEST = 0x1101;
export def GL_NICEST = 0x1102;
export def GL_AMBIENT = 0x1200;
export def GL_DIFFUSE = 0x1201;
export def GL_SPECULAR = 0x1202;
export def GL_POSITION = 0x1203;
export def GL_SPOT_DIRECTION = 0x1204;
export def GL_SPOT_EXPONENT = 0x1205;
export def GL_SPOT_CUTOFF = 0x1206;
export def GL_CONSTANT_ATTENUATION = 0x1207;
export def GL_LINEAR_ATTENUATION = 0x1208;
export def GL_QUADRATIC_ATTENUATION = 0x1209;
export def GL_COMPILE = 0x1300;
export def GL_COMPILE_AND_EXECUTE = 0x1301;
export def GL_BYTE = 0x1400;
export def GL_UNSIGNED_BYTE = 0x1401;
export def GL_SHORT = 0x1402;
export def GL_UNSIGNED_SHORT = 0x1403;
export def GL_INT = 0x1404;
export def GL_UNSIGNED_INT = 0x1405;
export def GL_FLOAT = 0x1406;
export def GL_2_BYTES = 0x1407;
export def GL_2_BYTES_NV = 0x1407;
export def GL_3_BYTES = 0x1408;
export def GL_3_BYTES_NV = 0x1408;
export def GL_4_BYTES = 0x1409;
export def GL_4_BYTES_NV = 0x1409;
export def GL_DOUBLE = 0x140A;
export def GL_DOUBLE_EXT = 0x140A;
export def GL_HALF_FLOAT = 0x140B;
export def GL_HALF_FLOAT_ARB = 0x140B;
export def GL_HALF_FLOAT_NV = 0x140B;
export def GL_HALF_APPLE = 0x140B;
export def GL_FIXED = 0x140C;
export def GL_FIXED_OES = 0x140C;
export def GL_INT64_ARB = 0x140E;
export def GL_INT64_NV = 0x140E;
export def GL_UNSIGNED_INT64_ARB = 0x140F;
export def GL_UNSIGNED_INT64_NV = 0x140F;
export def GL_CLEAR = 0x1500;
export def GL_AND = 0x1501;
export def GL_AND_REVERSE = 0x1502;
export def GL_COPY = 0x1503;
export def GL_AND_INVERTED = 0x1504;
export def GL_NOOP = 0x1505;
export def GL_XOR = 0x1506;
export def GL_XOR_NV = 0x1506;
export def GL_OR = 0x1507;
export def GL_NOR = 0x1508;
export def GL_EQUIV = 0x1509;
export def GL_INVERT = 0x150A;
export def GL_OR_REVERSE = 0x150B;
export def GL_COPY_INVERTED = 0x150C;
export def GL_OR_INVERTED = 0x150D;
export def GL_NAND = 0x150E;
export def GL_SET = 0x150F;
export def GL_EMISSION = 0x1600;
export def GL_SHININESS = 0x1601;
export def GL_AMBIENT_AND_DIFFUSE = 0x1602;
export def GL_COLOR_INDEXES = 0x1603;
export def GL_MODELVIEW = 0x1700;
export def GL_MODELVIEW0_ARB = 0x1700;
export def GL_MODELVIEW0_EXT = 0x1700;
export def GL_PATH_MODELVIEW_NV = 0x1700;
export def GL_PROJECTION = 0x1701;
export def GL_PATH_PROJECTION_NV = 0x1701;
export def GL_TEXTURE = 0x1702;
export def GL_COLOR = 0x1800;
export def GL_COLOR_EXT = 0x1800;
export def GL_DEPTH = 0x1801;
export def GL_DEPTH_EXT = 0x1801;
export def GL_STENCIL = 0x1802;
export def GL_STENCIL_EXT = 0x1802;
export def GL_COLOR_INDEX = 0x1900;
export def GL_STENCIL_INDEX = 0x1901;
export def GL_STENCIL_INDEX_OES = 0x1901;
export def GL_DEPTH_COMPONENT = 0x1902;
export def GL_RED = 0x1903;
export def GL_RED_EXT = 0x1903;
export def GL_RED_NV = 0x1903;
export def GL_GREEN = 0x1904;
export def GL_GREEN_NV = 0x1904;
export def GL_BLUE = 0x1905;
export def GL_BLUE_NV = 0x1905;
export def GL_ALPHA = 0x1906;
export def GL_RGB = 0x1907;
export def GL_RGBA = 0x1908;
export def GL_LUMINANCE = 0x1909;
export def GL_LUMINANCE_ALPHA = 0x190A;
export def GL_BITMAP = 0x1A00;
export def GL_POINT = 0x1B00;
export def GL_POINT_NV = 0x1B00;
export def GL_LINE = 0x1B01;
export def GL_LINE_NV = 0x1B01;
export def GL_FILL = 0x1B02;
export def GL_FILL_NV = 0x1B02;
export def GL_RENDER = 0x1C00;
export def GL_FEEDBACK = 0x1C01;
export def GL_SELECT = 0x1C02;
export def GL_FLAT = 0x1D00;
export def GL_SMOOTH = 0x1D01;
export def GL_KEEP = 0x1E00;
export def GL_REPLACE = 0x1E01;
export def GL_INCR = 0x1E02;
export def GL_DECR = 0x1E03;
export def GL_VENDOR = 0x1F00;
export def GL_RENDERER = 0x1F01;
export def GL_VERSION = 0x1F02;
export def GL_EXTENSIONS = 0x1F03;
export def GL_S = 0x2000;
export def GL_T = 0x2001;
export def GL_R = 0x2002;
export def GL_Q = 0x2003;
export def GL_MODULATE = 0x2100;
export def GL_DECAL = 0x2101;
export def GL_TEXTURE_ENV_MODE = 0x2200;
export def GL_TEXTURE_ENV_COLOR = 0x2201;
export def GL_TEXTURE_ENV = 0x2300;
export def GL_EYE_LINEAR = 0x2400;
export def GL_EYE_LINEAR_NV = 0x2400;
export def GL_OBJECT_LINEAR = 0x2401;
export def GL_OBJECT_LINEAR_NV = 0x2401;
export def GL_SPHERE_MAP = 0x2402;
export def GL_TEXTURE_GEN_MODE = 0x2500;
export def GL_TEXTURE_GEN_MODE_OES = 0x2500;
export def GL_OBJECT_PLANE = 0x2501;
export def GL_EYE_PLANE = 0x2502;
export def GL_NEAREST = 0x2600;
export def GL_LINEAR = 0x2601;
export def GL_NEAREST_MIPMAP_NEAREST = 0x2700;
export def GL_LINEAR_MIPMAP_NEAREST = 0x2701;
export def GL_NEAREST_MIPMAP_LINEAR = 0x2702;
export def GL_LINEAR_MIPMAP_LINEAR = 0x2703;
export def GL_TEXTURE_MAG_FILTER = 0x2800;
export def GL_TEXTURE_MIN_FILTER = 0x2801;
export def GL_TEXTURE_WRAP_S = 0x2802;
export def GL_TEXTURE_WRAP_T = 0x2803;
export def GL_CLAMP = 0x2900;
export def GL_REPEAT = 0x2901;
export def GL_POLYGON_OFFSET_UNITS = 0x2A00;
export def GL_POLYGON_OFFSET_POINT = 0x2A01;
export def GL_POLYGON_OFFSET_POINT_NV = 0x2A01;
export def GL_POLYGON_OFFSET_LINE = 0x2A02;
export def GL_POLYGON_OFFSET_LINE_NV = 0x2A02;
export def GL_R3_G3_B2 = 0x2A10;
export def GL_V2F = 0x2A20;
export def GL_V3F = 0x2A21;
export def GL_C4UB_V2F = 0x2A22;
export def GL_C4UB_V3F = 0x2A23;
export def GL_C3F_V3F = 0x2A24;
export def GL_N3F_V3F = 0x2A25;
export def GL_C4F_N3F_V3F = 0x2A26;
export def GL_T2F_V3F = 0x2A27;
export def GL_T4F_V4F = 0x2A28;
export def GL_T2F_C4UB_V3F = 0x2A29;
export def GL_T2F_C3F_V3F = 0x2A2A;
export def GL_T2F_N3F_V3F = 0x2A2B;
export def GL_T2F_C4F_N3F_V3F = 0x2A2C;
export def GL_T4F_C4F_N3F_V4F = 0x2A2D;
export def GL_CLIP_PLANE0 = 0x3000;
export def GL_CLIP_PLANE0_IMG = 0x3000;
export def GL_CLIP_DISTANCE0 = 0x3000;
export def GL_CLIP_DISTANCE0_EXT = 0x3000;
export def GL_CLIP_DISTANCE0_APPLE = 0x3000;
export def GL_CLIP_PLANE1 = 0x3001;
export def GL_CLIP_PLANE1_IMG = 0x3001;
export def GL_CLIP_DISTANCE1 = 0x3001;
export def GL_CLIP_DISTANCE1_EXT = 0x3001;
export def GL_CLIP_DISTANCE1_APPLE = 0x3001;
export def GL_CLIP_PLANE2 = 0x3002;
export def GL_CLIP_PLANE2_IMG = 0x3002;
export def GL_CLIP_DISTANCE2 = 0x3002;
export def GL_CLIP_DISTANCE2_EXT = 0x3002;
export def GL_CLIP_DISTANCE2_APPLE = 0x3002;
export def GL_CLIP_PLANE3 = 0x3003;
export def GL_CLIP_PLANE3_IMG = 0x3003;
export def GL_CLIP_DISTANCE3 = 0x3003;
export def GL_CLIP_DISTANCE3_EXT = 0x3003;
export def GL_CLIP_DISTANCE3_APPLE = 0x3003;
export def GL_CLIP_PLANE4 = 0x3004;
export def GL_CLIP_PLANE4_IMG = 0x3004;
export def GL_CLIP_DISTANCE4 = 0x3004;
export def GL_CLIP_DISTANCE4_EXT = 0x3004;
export def GL_CLIP_DISTANCE4_APPLE = 0x3004;
export def GL_CLIP_PLANE5 = 0x3005;
export def GL_CLIP_PLANE5_IMG = 0x3005;
export def GL_CLIP_DISTANCE5 = 0x3005;
export def GL_CLIP_DISTANCE5_EXT = 0x3005;
export def GL_CLIP_DISTANCE5_APPLE = 0x3005;
export def GL_CLIP_DISTANCE6 = 0x3006;
export def GL_CLIP_DISTANCE6_EXT = 0x3006;
export def GL_CLIP_DISTANCE6_APPLE = 0x3006;
export def GL_CLIP_DISTANCE7 = 0x3007;
export def GL_CLIP_DISTANCE7_EXT = 0x3007;
export def GL_CLIP_DISTANCE7_APPLE = 0x3007;
export def GL_LIGHT0 = 0x4000;
export def GL_LIGHT1 = 0x4001;
export def GL_LIGHT2 = 0x4002;
export def GL_LIGHT3 = 0x4003;
export def GL_LIGHT4 = 0x4004;
export def GL_LIGHT5 = 0x4005;
export def GL_LIGHT6 = 0x4006;
export def GL_LIGHT7 = 0x4007;
export def GL_ABGR_EXT = 0x8000;
export def GL_CONSTANT_COLOR = 0x8001;
export def GL_CONSTANT_COLOR_EXT = 0x8001;
export def GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
export def GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
export def GL_CONSTANT_ALPHA = 0x8003;
export def GL_CONSTANT_ALPHA_EXT = 0x8003;
export def GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
export def GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
export def GL_BLEND_COLOR = 0x8005;
export def GL_BLEND_COLOR_EXT = 0x8005;
export def GL_FUNC_ADD = 0x8006;
export def GL_FUNC_ADD_EXT = 0x8006;
export def GL_FUNC_ADD_OES = 0x8006;
export def GL_MIN = 0x8007;
export def GL_MIN_EXT = 0x8007;
export def GL_MAX = 0x8008;
export def GL_MAX_EXT = 0x8008;
export def GL_BLEND_EQUATION = 0x8009;
export def GL_BLEND_EQUATION_EXT = 0x8009;
export def GL_BLEND_EQUATION_OES = 0x8009;
export def GL_BLEND_EQUATION_RGB = 0x8009;
export def GL_BLEND_EQUATION_RGB_EXT = 0x8009;
export def GL_BLEND_EQUATION_RGB_OES = 0x8009;
export def GL_FUNC_SUBTRACT = 0x800A;
export def GL_FUNC_SUBTRACT_EXT = 0x800A;
export def GL_FUNC_SUBTRACT_OES = 0x800A;
export def GL_FUNC_REVERSE_SUBTRACT = 0x800B;
export def GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
export def GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B;
export def GL_CMYK_EXT = 0x800C;
export def GL_CMYKA_EXT = 0x800D;
export def GL_PACK_CMYK_HINT_EXT = 0x800E;
export def GL_UNPACK_CMYK_HINT_EXT = 0x800F;
export def GL_CONVOLUTION_1D = 0x8010;
export def GL_CONVOLUTION_1D_EXT = 0x8010;
export def GL_CONVOLUTION_2D = 0x8011;
export def GL_CONVOLUTION_2D_EXT = 0x8011;
export def GL_SEPARABLE_2D = 0x8012;
export def GL_SEPARABLE_2D_EXT = 0x8012;
export def GL_CONVOLUTION_BORDER_MODE = 0x8013;
export def GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
export def GL_CONVOLUTION_FILTER_SCALE = 0x8014;
export def GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
export def GL_CONVOLUTION_FILTER_BIAS = 0x8015;
export def GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
export def GL_REDUCE = 0x8016;
export def GL_REDUCE_EXT = 0x8016;
export def GL_CONVOLUTION_FORMAT = 0x8017;
export def GL_CONVOLUTION_FORMAT_EXT = 0x8017;
export def GL_CONVOLUTION_WIDTH = 0x8018;
export def GL_CONVOLUTION_WIDTH_EXT = 0x8018;
export def GL_CONVOLUTION_HEIGHT = 0x8019;
export def GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
export def GL_MAX_CONVOLUTION_WIDTH = 0x801A;
export def GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
export def GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
export def GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
export def GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
export def GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
export def GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
export def GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
export def GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
export def GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
export def GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
export def GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
export def GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
export def GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
export def GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
export def GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
export def GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
export def GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
export def GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
export def GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
export def GL_HISTOGRAM = 0x8024;
export def GL_HISTOGRAM_EXT = 0x8024;
export def GL_PROXY_HISTOGRAM = 0x8025;
export def GL_PROXY_HISTOGRAM_EXT = 0x8025;
export def GL_HISTOGRAM_WIDTH = 0x8026;
export def GL_HISTOGRAM_WIDTH_EXT = 0x8026;
export def GL_HISTOGRAM_FORMAT = 0x8027;
export def GL_HISTOGRAM_FORMAT_EXT = 0x8027;
export def GL_HISTOGRAM_RED_SIZE = 0x8028;
export def GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
export def GL_HISTOGRAM_GREEN_SIZE = 0x8029;
export def GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
export def GL_HISTOGRAM_BLUE_SIZE = 0x802A;
export def GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
export def GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
export def GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
export def GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
export def GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
export def GL_HISTOGRAM_SINK = 0x802D;
export def GL_HISTOGRAM_SINK_EXT = 0x802D;
export def GL_MINMAX = 0x802E;
export def GL_MINMAX_EXT = 0x802E;
export def GL_MINMAX_FORMAT = 0x802F;
export def GL_MINMAX_FORMAT_EXT = 0x802F;
export def GL_MINMAX_SINK = 0x8030;
export def GL_MINMAX_SINK_EXT = 0x8030;
export def GL_TABLE_TOO_LARGE_EXT = 0x8031;
export def GL_TABLE_TOO_LARGE = 0x8031;
export def GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
export def GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
export def GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
export def GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
export def GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
export def GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
export def GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
export def GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
export def GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
export def GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
export def GL_POLYGON_OFFSET_EXT = 0x8037;
export def GL_POLYGON_OFFSET_FILL = 0x8037;
export def GL_POLYGON_OFFSET_FACTOR = 0x8038;
export def GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
export def GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
export def GL_RESCALE_NORMAL = 0x803A;
export def GL_RESCALE_NORMAL_EXT = 0x803A;
export def GL_ALPHA4 = 0x803B;
export def GL_ALPHA4_EXT = 0x803B;
export def GL_ALPHA8 = 0x803C;
export def GL_ALPHA8_EXT = 0x803C;
export def GL_ALPHA8_OES = 0x803C;
export def GL_ALPHA12 = 0x803D;
export def GL_ALPHA12_EXT = 0x803D;
export def GL_ALPHA16 = 0x803E;
export def GL_ALPHA16_EXT = 0x803E;
export def GL_LUMINANCE4 = 0x803F;
export def GL_LUMINANCE4_EXT = 0x803F;
export def GL_LUMINANCE8 = 0x8040;
export def GL_LUMINANCE8_EXT = 0x8040;
export def GL_LUMINANCE8_OES = 0x8040;
export def GL_LUMINANCE12 = 0x8041;
export def GL_LUMINANCE12_EXT = 0x8041;
export def GL_LUMINANCE16 = 0x8042;
export def GL_LUMINANCE16_EXT = 0x8042;
export def GL_LUMINANCE4_ALPHA4 = 0x8043;
export def GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
export def GL_LUMINANCE4_ALPHA4_OES = 0x8043;
export def GL_LUMINANCE6_ALPHA2 = 0x8044;
export def GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
export def GL_LUMINANCE8_ALPHA8 = 0x8045;
export def GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
export def GL_LUMINANCE8_ALPHA8_OES = 0x8045;
export def GL_LUMINANCE12_ALPHA4 = 0x8046;
export def GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
export def GL_LUMINANCE12_ALPHA12 = 0x8047;
export def GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
export def GL_LUMINANCE16_ALPHA16 = 0x8048;
export def GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
export def GL_INTENSITY = 0x8049;
export def GL_INTENSITY_EXT = 0x8049;
export def GL_INTENSITY4 = 0x804A;
export def GL_INTENSITY4_EXT = 0x804A;
export def GL_INTENSITY8 = 0x804B;
export def GL_INTENSITY8_EXT = 0x804B;
export def GL_INTENSITY12 = 0x804C;
export def GL_INTENSITY12_EXT = 0x804C;
export def GL_INTENSITY16 = 0x804D;
export def GL_INTENSITY16_EXT = 0x804D;
export def GL_RGB2_EXT = 0x804E;
export def GL_RGB4 = 0x804F;
export def GL_RGB4_EXT = 0x804F;
export def GL_RGB5 = 0x8050;
export def GL_RGB5_EXT = 0x8050;
export def GL_RGB8 = 0x8051;
export def GL_RGB8_EXT = 0x8051;
export def GL_RGB8_OES = 0x8051;
export def GL_RGB10 = 0x8052;
export def GL_RGB10_EXT = 0x8052;
export def GL_RGB12 = 0x8053;
export def GL_RGB12_EXT = 0x8053;
export def GL_RGB16 = 0x8054;
export def GL_RGB16_EXT = 0x8054;
export def GL_RGBA2 = 0x8055;
export def GL_RGBA2_EXT = 0x8055;
export def GL_RGBA4 = 0x8056;
export def GL_RGBA4_EXT = 0x8056;
export def GL_RGBA4_OES = 0x8056;
export def GL_RGB5_A1 = 0x8057;
export def GL_RGB5_A1_EXT = 0x8057;
export def GL_RGB5_A1_OES = 0x8057;
export def GL_RGBA8 = 0x8058;
export def GL_RGBA8_EXT = 0x8058;
export def GL_RGBA8_OES = 0x8058;
export def GL_RGB10_A2 = 0x8059;
export def GL_RGB10_A2_EXT = 0x8059;
export def GL_RGBA12 = 0x805A;
export def GL_RGBA12_EXT = 0x805A;
export def GL_RGBA16 = 0x805B;
export def GL_RGBA16_EXT = 0x805B;
export def GL_TEXTURE_RED_SIZE = 0x805C;
export def GL_TEXTURE_RED_SIZE_EXT = 0x805C;
export def GL_TEXTURE_GREEN_SIZE = 0x805D;
export def GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
export def GL_TEXTURE_BLUE_SIZE = 0x805E;
export def GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
export def GL_TEXTURE_ALPHA_SIZE = 0x805F;
export def GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
export def GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
export def GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
export def GL_TEXTURE_INTENSITY_SIZE = 0x8061;
export def GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
export def GL_REPLACE_EXT = 0x8062;
export def GL_PROXY_TEXTURE_1D = 0x8063;
export def GL_PROXY_TEXTURE_1D_EXT = 0x8063;
export def GL_PROXY_TEXTURE_2D = 0x8064;
export def GL_PROXY_TEXTURE_2D_EXT = 0x8064;
export def GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
export def GL_TEXTURE_PRIORITY = 0x8066;
export def GL_TEXTURE_PRIORITY_EXT = 0x8066;
export def GL_TEXTURE_RESIDENT = 0x8067;
export def GL_TEXTURE_RESIDENT_EXT = 0x8067;
export def GL_TEXTURE_1D_BINDING_EXT = 0x8068;
export def GL_TEXTURE_BINDING_1D = 0x8068;
export def GL_TEXTURE_2D_BINDING_EXT = 0x8069;
export def GL_TEXTURE_BINDING_2D = 0x8069;
export def GL_TEXTURE_3D_BINDING_EXT = 0x806A;
export def GL_TEXTURE_3D_BINDING_OES = 0x806A;
export def GL_TEXTURE_BINDING_3D = 0x806A;
export def GL_TEXTURE_BINDING_3D_OES = 0x806A;
export def GL_PACK_SKIP_IMAGES = 0x806B;
export def GL_PACK_SKIP_IMAGES_EXT = 0x806B;
export def GL_PACK_IMAGE_HEIGHT = 0x806C;
export def GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
export def GL_UNPACK_SKIP_IMAGES = 0x806D;
export def GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
export def GL_UNPACK_IMAGE_HEIGHT = 0x806E;
export def GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
export def GL_TEXTURE_3D = 0x806F;
export def GL_TEXTURE_3D_EXT = 0x806F;
export def GL_TEXTURE_3D_OES = 0x806F;
export def GL_PROXY_TEXTURE_3D = 0x8070;
export def GL_PROXY_TEXTURE_3D_EXT = 0x8070;
export def GL_TEXTURE_DEPTH = 0x8071;
export def GL_TEXTURE_DEPTH_EXT = 0x8071;
export def GL_TEXTURE_WRAP_R = 0x8072;
export def GL_TEXTURE_WRAP_R_EXT = 0x8072;
export def GL_TEXTURE_WRAP_R_OES = 0x8072;
export def GL_MAX_3D_TEXTURE_SIZE = 0x8073;
export def GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
export def GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073;
export def GL_VERTEX_ARRAY = 0x8074;
export def GL_VERTEX_ARRAY_EXT = 0x8074;
export def GL_VERTEX_ARRAY_KHR = 0x8074;
export def GL_NORMAL_ARRAY = 0x8075;
export def GL_NORMAL_ARRAY_EXT = 0x8075;
export def GL_COLOR_ARRAY = 0x8076;
export def GL_COLOR_ARRAY_EXT = 0x8076;
export def GL_INDEX_ARRAY = 0x8077;
export def GL_INDEX_ARRAY_EXT = 0x8077;
export def GL_TEXTURE_COORD_ARRAY = 0x8078;
export def GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
export def GL_EDGE_FLAG_ARRAY = 0x8079;
export def GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
export def GL_VERTEX_ARRAY_SIZE = 0x807A;
export def GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
export def GL_VERTEX_ARRAY_TYPE = 0x807B;
export def GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
export def GL_VERTEX_ARRAY_STRIDE = 0x807C;
export def GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
export def GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
export def GL_NORMAL_ARRAY_TYPE = 0x807E;
export def GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
export def GL_NORMAL_ARRAY_STRIDE = 0x807F;
export def GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
export def GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
export def GL_COLOR_ARRAY_SIZE = 0x8081;
export def GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
export def GL_COLOR_ARRAY_TYPE = 0x8082;
export def GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
export def GL_COLOR_ARRAY_STRIDE = 0x8083;
export def GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
export def GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
export def GL_INDEX_ARRAY_TYPE = 0x8085;
export def GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
export def GL_INDEX_ARRAY_STRIDE = 0x8086;
export def GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
export def GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
export def GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
export def GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
export def GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
export def GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
export def GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
export def GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
export def GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
export def GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
export def GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
export def GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
export def GL_VERTEX_ARRAY_POINTER = 0x808E;
export def GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
export def GL_NORMAL_ARRAY_POINTER = 0x808F;
export def GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
export def GL_COLOR_ARRAY_POINTER = 0x8090;
export def GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
export def GL_INDEX_ARRAY_POINTER = 0x8091;
export def GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
export def GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
export def GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
export def GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
export def GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
export def GL_INTERLACE_SGIX = 0x8094;
export def GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
export def GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
export def GL_LINEAR_DETAIL_SGIS = 0x8097;
export def GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
export def GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
export def GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
export def GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
export def GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
export def GL_MULTISAMPLE = 0x809D;
export def GL_MULTISAMPLE_ARB = 0x809D;
export def GL_MULTISAMPLE_EXT = 0x809D;
export def GL_MULTISAMPLE_SGIS = 0x809D;
export def GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
export def GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
export def GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
export def GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
export def GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
export def GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
export def GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
export def GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
export def GL_SAMPLE_COVERAGE = 0x80A0;
export def GL_SAMPLE_COVERAGE_ARB = 0x80A0;
export def GL_SAMPLE_MASK_EXT = 0x80A0;
export def GL_SAMPLE_MASK_SGIS = 0x80A0;
export def GL_1PASS_EXT = 0x80A1;
export def GL_1PASS_SGIS = 0x80A1;
export def GL_2PASS_0_EXT = 0x80A2;
export def GL_2PASS_0_SGIS = 0x80A2;
export def GL_2PASS_1_EXT = 0x80A3;
export def GL_2PASS_1_SGIS = 0x80A3;
export def GL_4PASS_0_EXT = 0x80A4;
export def GL_4PASS_0_SGIS = 0x80A4;
export def GL_4PASS_1_EXT = 0x80A5;
export def GL_4PASS_1_SGIS = 0x80A5;
export def GL_4PASS_2_EXT = 0x80A6;
export def GL_4PASS_2_SGIS = 0x80A6;
export def GL_4PASS_3_EXT = 0x80A7;
export def GL_4PASS_3_SGIS = 0x80A7;
export def GL_SAMPLE_BUFFERS = 0x80A8;
export def GL_SAMPLE_BUFFERS_ARB = 0x80A8;
export def GL_SAMPLE_BUFFERS_EXT = 0x80A8;
export def GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
export def GL_SAMPLES = 0x80A9;
export def GL_SAMPLES_ARB = 0x80A9;
export def GL_SAMPLES_EXT = 0x80A9;
export def GL_SAMPLES_SGIS = 0x80A9;
export def GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
export def GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
export def GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
export def GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
export def GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
export def GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
export def GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
export def GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
export def GL_SAMPLE_PATTERN_EXT = 0x80AC;
export def GL_SAMPLE_PATTERN_SGIS = 0x80AC;
export def GL_LINEAR_SHARPEN_SGIS = 0x80AD;
export def GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
export def GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
export def GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
export def GL_COLOR_MATRIX = 0x80B1;
export def GL_COLOR_MATRIX_SGI = 0x80B1;
export def GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
export def GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
export def GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
export def GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
export def GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
export def GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
export def GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
export def GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
export def GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
export def GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
export def GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
export def GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
export def GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
export def GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
export def GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
export def GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
export def GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
export def GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
export def GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
export def GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
export def GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
export def GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
export def GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
export def GL_SHADOW_AMBIENT_SGIX = 0x80BF;
export def GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
export def GL_BLEND_DST_RGB = 0x80C8;
export def GL_BLEND_DST_RGB_EXT = 0x80C8;
export def GL_BLEND_DST_RGB_OES = 0x80C8;
export def GL_BLEND_SRC_RGB = 0x80C9;
export def GL_BLEND_SRC_RGB_EXT = 0x80C9;
export def GL_BLEND_SRC_RGB_OES = 0x80C9;
export def GL_BLEND_DST_ALPHA = 0x80CA;
export def GL_BLEND_DST_ALPHA_EXT = 0x80CA;
export def GL_BLEND_DST_ALPHA_OES = 0x80CA;
export def GL_BLEND_SRC_ALPHA = 0x80CB;
export def GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
export def GL_BLEND_SRC_ALPHA_OES = 0x80CB;
export def GL_422_EXT = 0x80CC;
export def GL_422_REV_EXT = 0x80CD;
export def GL_422_AVERAGE_EXT = 0x80CE;
export def GL_422_REV_AVERAGE_EXT = 0x80CF;
export def GL_COLOR_TABLE = 0x80D0;
export def GL_COLOR_TABLE_SGI = 0x80D0;
export def GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
export def GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
export def GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
export def GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
export def GL_PROXY_COLOR_TABLE = 0x80D3;
export def GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
export def GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
export def GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
export def GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
export def GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
export def GL_COLOR_TABLE_SCALE = 0x80D6;
export def GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
export def GL_COLOR_TABLE_BIAS = 0x80D7;
export def GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
export def GL_COLOR_TABLE_FORMAT = 0x80D8;
export def GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
export def GL_COLOR_TABLE_WIDTH = 0x80D9;
export def GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
export def GL_COLOR_TABLE_RED_SIZE = 0x80DA;
export def GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
export def GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
export def GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
export def GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
export def GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
export def GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
export def GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
export def GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
export def GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
export def GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
export def GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
export def GL_BGR = 0x80E0;
export def GL_BGR_EXT = 0x80E0;
export def GL_BGRA = 0x80E1;
export def GL_BGRA_EXT = 0x80E1;
export def GL_BGRA_IMG = 0x80E1;
export def GL_COLOR_INDEX1_EXT = 0x80E2;
export def GL_COLOR_INDEX2_EXT = 0x80E3;
export def GL_COLOR_INDEX4_EXT = 0x80E4;
export def GL_COLOR_INDEX8_EXT = 0x80E5;
export def GL_COLOR_INDEX12_EXT = 0x80E6;
export def GL_COLOR_INDEX16_EXT = 0x80E7;
export def GL_MAX_ELEMENTS_VERTICES = 0x80E8;
export def GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
export def GL_MAX_ELEMENTS_INDICES = 0x80E9;
export def GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
export def GL_PHONG_WIN = 0x80EA;
export def GL_PHONG_HINT_WIN = 0x80EB;
export def GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
export def GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
export def GL_PARAMETER_BUFFER = 0x80EE;
export def GL_PARAMETER_BUFFER_ARB = 0x80EE;
export def GL_PARAMETER_BUFFER_BINDING = 0x80EF;
export def GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
export def GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
export def GL_DUAL_ALPHA4_SGIS = 0x8110;
export def GL_DUAL_ALPHA8_SGIS = 0x8111;
export def GL_DUAL_ALPHA12_SGIS = 0x8112;
export def GL_DUAL_ALPHA16_SGIS = 0x8113;
export def GL_DUAL_LUMINANCE4_SGIS = 0x8114;
export def GL_DUAL_LUMINANCE8_SGIS = 0x8115;
export def GL_DUAL_LUMINANCE12_SGIS = 0x8116;
export def GL_DUAL_LUMINANCE16_SGIS = 0x8117;
export def GL_DUAL_INTENSITY4_SGIS = 0x8118;
export def GL_DUAL_INTENSITY8_SGIS = 0x8119;
export def GL_DUAL_INTENSITY12_SGIS = 0x811A;
export def GL_DUAL_INTENSITY16_SGIS = 0x811B;
export def GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
export def GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
export def GL_QUAD_ALPHA4_SGIS = 0x811E;
export def GL_QUAD_ALPHA8_SGIS = 0x811F;
export def GL_QUAD_LUMINANCE4_SGIS = 0x8120;
export def GL_QUAD_LUMINANCE8_SGIS = 0x8121;
export def GL_QUAD_INTENSITY4_SGIS = 0x8122;
export def GL_QUAD_INTENSITY8_SGIS = 0x8123;
export def GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
export def GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
export def GL_POINT_SIZE_MIN = 0x8126;
export def GL_POINT_SIZE_MIN_ARB = 0x8126;
export def GL_POINT_SIZE_MIN_EXT = 0x8126;
export def GL_POINT_SIZE_MIN_SGIS = 0x8126;
export def GL_POINT_SIZE_MAX = 0x8127;
export def GL_POINT_SIZE_MAX_ARB = 0x8127;
export def GL_POINT_SIZE_MAX_EXT = 0x8127;
export def GL_POINT_SIZE_MAX_SGIS = 0x8127;
export def GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
export def GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
export def GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
export def GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
export def GL_DISTANCE_ATTENUATION_EXT = 0x8129;
export def GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
export def GL_POINT_DISTANCE_ATTENUATION = 0x8129;
export def GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
export def GL_FOG_FUNC_SGIS = 0x812A;
export def GL_FOG_FUNC_POINTS_SGIS = 0x812B;
export def GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
export def GL_CLAMP_TO_BORDER = 0x812D;
export def GL_CLAMP_TO_BORDER_ARB = 0x812D;
export def GL_CLAMP_TO_BORDER_EXT = 0x812D;
export def GL_CLAMP_TO_BORDER_NV = 0x812D;
export def GL_CLAMP_TO_BORDER_SGIS = 0x812D;
export def GL_CLAMP_TO_BORDER_OES = 0x812D;
export def GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
export def GL_CLAMP_TO_EDGE = 0x812F;
export def GL_CLAMP_TO_EDGE_SGIS = 0x812F;
export def GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
export def GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
export def GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
export def GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
export def GL_TEXTURE_4D_SGIS = 0x8134;
export def GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
export def GL_TEXTURE_4DSIZE_SGIS = 0x8136;
export def GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
export def GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
export def GL_PIXEL_TEX_GEN_SGIX = 0x8139;
export def GL_TEXTURE_MIN_LOD = 0x813A;
export def GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
export def GL_TEXTURE_MAX_LOD = 0x813B;
export def GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
export def GL_TEXTURE_BASE_LEVEL = 0x813C;
export def GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
export def GL_TEXTURE_MAX_LEVEL = 0x813D;
export def GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D;
export def GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
export def GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
export def GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
export def GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
export def GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
export def GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
export def GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
export def GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
export def GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
export def GL_FILTER4_SGIS = 0x8146;
export def GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
export def GL_SPRITE_SGIX = 0x8148;
export def GL_SPRITE_MODE_SGIX = 0x8149;
export def GL_SPRITE_AXIS_SGIX = 0x814A;
export def GL_SPRITE_TRANSLATION_SGIX = 0x814B;
export def GL_SPRITE_AXIAL_SGIX = 0x814C;
export def GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
export def GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
export def GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
export def GL_IGNORE_BORDER_HP = 0x8150;
export def GL_CONSTANT_BORDER = 0x8151;
export def GL_CONSTANT_BORDER_HP = 0x8151;
export def GL_REPLICATE_BORDER = 0x8153;
export def GL_REPLICATE_BORDER_HP = 0x8153;
export def GL_CONVOLUTION_BORDER_COLOR = 0x8154;
export def GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
export def GL_IMAGE_SCALE_X_HP = 0x8155;
export def GL_IMAGE_SCALE_Y_HP = 0x8156;
export def GL_IMAGE_TRANSLATE_X_HP = 0x8157;
export def GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
export def GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
export def GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
export def GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
export def GL_IMAGE_MAG_FILTER_HP = 0x815C;
export def GL_IMAGE_MIN_FILTER_HP = 0x815D;
export def GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
export def GL_CUBIC_HP = 0x815F;
export def GL_AVERAGE_HP = 0x8160;
export def GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
export def GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
export def GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
export def GL_OCCLUSION_TEST_HP = 0x8165;
export def GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
export def GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
export def GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
export def GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
export def GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
export def GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
export def GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
export def GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
export def GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
export def GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
export def GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
export def GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
export def GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
export def GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
export def GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
export def GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
export def GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
export def GL_REFERENCE_PLANE_SGIX = 0x817D;
export def GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
export def GL_IR_INSTRUMENT1_SGIX = 0x817F;
export def GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
export def GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
export def GL_LIST_PRIORITY_SGIX = 0x8182;
export def GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
export def GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
export def GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
export def GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
export def GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
export def GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
export def GL_FRAMEZOOM_SGIX = 0x818B;
export def GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
export def GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
export def GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
export def GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
export def GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
export def GL_GENERATE_MIPMAP = 0x8191;
export def GL_GENERATE_MIPMAP_SGIS = 0x8191;
export def GL_GENERATE_MIPMAP_HINT = 0x8192;
export def GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
export def GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
export def GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
export def GL_DEFORMATIONS_MASK_SGIX = 0x8196;
export def GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
export def GL_FOG_OFFSET_SGIX = 0x8198;
export def GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
export def GL_TEXTURE_COMPARE_SGIX = 0x819A;
export def GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
export def GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
export def GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
export def GL_DEPTH_COMPONENT16 = 0x81A5;
export def GL_DEPTH_COMPONENT16_ARB = 0x81A5;
export def GL_DEPTH_COMPONENT16_OES = 0x81A5;
export def GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
export def GL_DEPTH_COMPONENT24 = 0x81A6;
export def GL_DEPTH_COMPONENT24_ARB = 0x81A6;
export def GL_DEPTH_COMPONENT24_OES = 0x81A6;
export def GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
export def GL_DEPTH_COMPONENT32 = 0x81A7;
export def GL_DEPTH_COMPONENT32_ARB = 0x81A7;
export def GL_DEPTH_COMPONENT32_OES = 0x81A7;
export def GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
export def GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
export def GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
export def GL_CULL_VERTEX_EXT = 0x81AA;
export def GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
export def GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
export def GL_IUI_V2F_EXT = 0x81AD;
export def GL_IUI_V3F_EXT = 0x81AE;
export def GL_IUI_N3F_V2F_EXT = 0x81AF;
export def GL_IUI_N3F_V3F_EXT = 0x81B0;
export def GL_T2F_IUI_V2F_EXT = 0x81B1;
export def GL_T2F_IUI_V3F_EXT = 0x81B2;
export def GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
export def GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
export def GL_INDEX_TEST_EXT = 0x81B5;
export def GL_INDEX_TEST_FUNC_EXT = 0x81B6;
export def GL_INDEX_TEST_REF_EXT = 0x81B7;
export def GL_INDEX_MATERIAL_EXT = 0x81B8;
export def GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
export def GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
export def GL_YCRCB_422_SGIX = 0x81BB;
export def GL_YCRCB_444_SGIX = 0x81BC;
export def GL_WRAP_BORDER_SUN = 0x81D4;
export def GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
export def GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
export def GL_TRIANGLE_LIST_SUN = 0x81D7;
export def GL_REPLACEMENT_CODE_SUN = 0x81D8;
export def GL_GLOBAL_ALPHA_SUN = 0x81D9;
export def GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
export def GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
export def GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
export def GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
export def GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
export def GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
export def GL_EYE_POINT_SGIS = 0x81F4;
export def GL_OBJECT_POINT_SGIS = 0x81F5;
export def GL_EYE_LINE_SGIS = 0x81F6;
export def GL_OBJECT_LINE_SGIS = 0x81F7;
export def GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
export def GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
export def GL_SINGLE_COLOR = 0x81F9;
export def GL_SINGLE_COLOR_EXT = 0x81F9;
export def GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
export def GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
export def GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
export def GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
export def GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
export def GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
export def GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
export def GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
export def GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
export def GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
export def GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
export def GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
export def GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
export def GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
export def GL_FRAMEBUFFER_DEFAULT = 0x8218;
export def GL_FRAMEBUFFER_UNDEFINED = 0x8219;
export def GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219;
export def GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
export def GL_MAJOR_VERSION = 0x821B;
export def GL_MINOR_VERSION = 0x821C;
export def GL_NUM_EXTENSIONS = 0x821D;
export def GL_CONTEXT_FLAGS = 0x821E;
export def GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
export def GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x821F;
export def GL_BUFFER_STORAGE_FLAGS = 0x8220;
export def GL_BUFFER_STORAGE_FLAGS_EXT = 0x8220;
export def GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
export def GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221;
export def GL_INDEX = 0x8222;
export def GL_COMPRESSED_RED = 0x8225;
export def GL_COMPRESSED_RG = 0x8226;
export def GL_RG = 0x8227;
export def GL_RG_EXT = 0x8227;
export def GL_RG_INTEGER = 0x8228;
export def GL_R8 = 0x8229;
export def GL_R8_EXT = 0x8229;
export def GL_R16 = 0x822A;
export def GL_R16_EXT = 0x822A;
export def GL_RG8 = 0x822B;
export def GL_RG8_EXT = 0x822B;
export def GL_RG16 = 0x822C;
export def GL_RG16_EXT = 0x822C;
export def GL_R16F = 0x822D;
export def GL_R16F_EXT = 0x822D;
export def GL_R32F = 0x822E;
export def GL_R32F_EXT = 0x822E;
export def GL_RG16F = 0x822F;
export def GL_RG16F_EXT = 0x822F;
export def GL_RG32F = 0x8230;
export def GL_RG32F_EXT = 0x8230;
export def GL_R8I = 0x8231;
export def GL_R8UI = 0x8232;
export def GL_R16I = 0x8233;
export def GL_R16UI = 0x8234;
export def GL_R32I = 0x8235;
export def GL_R32UI = 0x8236;
export def GL_RG8I = 0x8237;
export def GL_RG8UI = 0x8238;
export def GL_RG16I = 0x8239;
export def GL_RG16UI = 0x823A;
export def GL_RG32I = 0x823B;
export def GL_RG32UI = 0x823C;
export def GL_SYNC_CL_EVENT_ARB = 0x8240;
export def GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
export def GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
export def GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
export def GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
export def GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
export def GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
export def GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
export def GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
export def GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
export def GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
export def GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
export def GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
export def GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
export def GL_DEBUG_SOURCE_API = 0x8246;
export def GL_DEBUG_SOURCE_API_ARB = 0x8246;
export def GL_DEBUG_SOURCE_API_KHR = 0x8246;
export def GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
export def GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
export def GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
export def GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
export def GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
export def GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
export def GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
export def GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
export def GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
export def GL_DEBUG_SOURCE_APPLICATION = 0x824A;
export def GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
export def GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
export def GL_DEBUG_SOURCE_OTHER = 0x824B;
export def GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
export def GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
export def GL_DEBUG_TYPE_ERROR = 0x824C;
export def GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
export def GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
export def GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
export def GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
export def GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
export def GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
export def GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
export def GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
export def GL_DEBUG_TYPE_PORTABILITY = 0x824F;
export def GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
export def GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
export def GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
export def GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
export def GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
export def GL_DEBUG_TYPE_OTHER = 0x8251;
export def GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
export def GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
export def GL_LOSE_CONTEXT_ON_RESET = 0x8252;
export def GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
export def GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252;
export def GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
export def GL_GUILTY_CONTEXT_RESET = 0x8253;
export def GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
export def GL_GUILTY_CONTEXT_RESET_EXT = 0x8253;
export def GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
export def GL_INNOCENT_CONTEXT_RESET = 0x8254;
export def GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
export def GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254;
export def GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
export def GL_UNKNOWN_CONTEXT_RESET = 0x8255;
export def GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
export def GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255;
export def GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
export def GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
export def GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
export def GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256;
export def GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
export def GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
export def GL_PROGRAM_SEPARABLE = 0x8258;
export def GL_PROGRAM_SEPARABLE_EXT = 0x8258;
export def GL_ACTIVE_PROGRAM = 0x8259;
export def GL_ACTIVE_PROGRAM_EXT = 0x8259;
export def GL_PROGRAM_PIPELINE_BINDING = 0x825A;
export def GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
export def GL_MAX_VIEWPORTS = 0x825B;
export def GL_MAX_VIEWPORTS_NV = 0x825B;
export def GL_MAX_VIEWPORTS_OES = 0x825B;
export def GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
export def GL_VIEWPORT_SUBPIXEL_BITS_EXT = 0x825C;
export def GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x825C;
export def GL_VIEWPORT_SUBPIXEL_BITS_OES = 0x825C;
export def GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
export def GL_VIEWPORT_BOUNDS_RANGE_EXT = 0x825D;
export def GL_VIEWPORT_BOUNDS_RANGE_NV = 0x825D;
export def GL_VIEWPORT_BOUNDS_RANGE_OES = 0x825D;
export def GL_LAYER_PROVOKING_VERTEX = 0x825E;
export def GL_LAYER_PROVOKING_VERTEX_EXT = 0x825E;
export def GL_LAYER_PROVOKING_VERTEX_OES = 0x825E;
export def GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
export def GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 0x825F;
export def GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825F;
export def GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x825F;
export def GL_UNDEFINED_VERTEX = 0x8260;
export def GL_UNDEFINED_VERTEX_EXT = 0x8260;
export def GL_UNDEFINED_VERTEX_OES = 0x8260;
export def GL_NO_RESET_NOTIFICATION = 0x8261;
export def GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
export def GL_NO_RESET_NOTIFICATION_EXT = 0x8261;
export def GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
export def GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
export def GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
export def GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
export def GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
export def GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
export def GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
export def GL_DEBUG_TYPE_MARKER = 0x8268;
export def GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
export def GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
export def GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
export def GL_DEBUG_TYPE_POP_GROUP = 0x826A;
export def GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
export def GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
export def GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
export def GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
export def GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
export def GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
export def GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
export def GL_MAX_UNIFORM_LOCATIONS = 0x826E;
export def GL_INTERNALFORMAT_SUPPORTED = 0x826F;
export def GL_INTERNALFORMAT_PREFERRED = 0x8270;
export def GL_INTERNALFORMAT_RED_SIZE = 0x8271;
export def GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
export def GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
export def GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
export def GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
export def GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
export def GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
export def GL_INTERNALFORMAT_RED_TYPE = 0x8278;
export def GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
export def GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
export def GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
export def GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
export def GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
export def GL_MAX_WIDTH = 0x827E;
export def GL_MAX_HEIGHT = 0x827F;
export def GL_MAX_DEPTH = 0x8280;
export def GL_MAX_LAYERS = 0x8281;
export def GL_MAX_COMBINED_DIMENSIONS = 0x8282;
export def GL_COLOR_COMPONENTS = 0x8283;
export def GL_DEPTH_COMPONENTS = 0x8284;
export def GL_STENCIL_COMPONENTS = 0x8285;
export def GL_COLOR_RENDERABLE = 0x8286;
export def GL_DEPTH_RENDERABLE = 0x8287;
export def GL_STENCIL_RENDERABLE = 0x8288;
export def GL_FRAMEBUFFER_RENDERABLE = 0x8289;
export def GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
export def GL_FRAMEBUFFER_BLEND = 0x828B;
export def GL_READ_PIXELS = 0x828C;
export def GL_READ_PIXELS_FORMAT = 0x828D;
export def GL_READ_PIXELS_TYPE = 0x828E;
export def GL_TEXTURE_IMAGE_FORMAT = 0x828F;
export def GL_TEXTURE_IMAGE_TYPE = 0x8290;
export def GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
export def GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
export def GL_MIPMAP = 0x8293;
export def GL_MANUAL_GENERATE_MIPMAP = 0x8294;
export def GL_AUTO_GENERATE_MIPMAP = 0x8295;
export def GL_COLOR_ENCODING = 0x8296;
export def GL_SRGB_READ = 0x8297;
export def GL_SRGB_WRITE = 0x8298;
export def GL_SRGB_DECODE_ARB = 0x8299;
export def GL_FILTER = 0x829A;
export def GL_VERTEX_TEXTURE = 0x829B;
export def GL_TESS_CONTROL_TEXTURE = 0x829C;
export def GL_TESS_EVALUATION_TEXTURE = 0x829D;
export def GL_GEOMETRY_TEXTURE = 0x829E;
export def GL_FRAGMENT_TEXTURE = 0x829F;
export def GL_COMPUTE_TEXTURE = 0x82A0;
export def GL_TEXTURE_SHADOW = 0x82A1;
export def GL_TEXTURE_GATHER = 0x82A2;
export def GL_TEXTURE_GATHER_SHADOW = 0x82A3;
export def GL_SHADER_IMAGE_LOAD = 0x82A4;
export def GL_SHADER_IMAGE_STORE = 0x82A5;
export def GL_SHADER_IMAGE_ATOMIC = 0x82A6;
export def GL_IMAGE_TEXEL_SIZE = 0x82A7;
export def GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
export def GL_IMAGE_PIXEL_FORMAT = 0x82A9;
export def GL_IMAGE_PIXEL_TYPE = 0x82AA;
export def GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
export def GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
export def GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
export def GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
export def GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
export def GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
export def GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
export def GL_CLEAR_BUFFER = 0x82B4;
export def GL_TEXTURE_VIEW = 0x82B5;
export def GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
export def GL_FULL_SUPPORT = 0x82B7;
export def GL_CAVEAT_SUPPORT = 0x82B8;
export def GL_IMAGE_CLASS_4_X_32 = 0x82B9;
export def GL_IMAGE_CLASS_2_X_32 = 0x82BA;
export def GL_IMAGE_CLASS_1_X_32 = 0x82BB;
export def GL_IMAGE_CLASS_4_X_16 = 0x82BC;
export def GL_IMAGE_CLASS_2_X_16 = 0x82BD;
export def GL_IMAGE_CLASS_1_X_16 = 0x82BE;
export def GL_IMAGE_CLASS_4_X_8 = 0x82BF;
export def GL_IMAGE_CLASS_2_X_8 = 0x82C0;
export def GL_IMAGE_CLASS_1_X_8 = 0x82C1;
export def GL_IMAGE_CLASS_11_11_10 = 0x82C2;
export def GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
export def GL_VIEW_CLASS_128_BITS = 0x82C4;
export def GL_VIEW_CLASS_96_BITS = 0x82C5;
export def GL_VIEW_CLASS_64_BITS = 0x82C6;
export def GL_VIEW_CLASS_48_BITS = 0x82C7;
export def GL_VIEW_CLASS_32_BITS = 0x82C8;
export def GL_VIEW_CLASS_24_BITS = 0x82C9;
export def GL_VIEW_CLASS_16_BITS = 0x82CA;
export def GL_VIEW_CLASS_8_BITS = 0x82CB;
export def GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
export def GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
export def GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
export def GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
export def GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
export def GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
export def GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
export def GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
export def GL_VERTEX_ATTRIB_BINDING = 0x82D4;
export def GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
export def GL_VERTEX_BINDING_DIVISOR = 0x82D6;
export def GL_VERTEX_BINDING_OFFSET = 0x82D7;
export def GL_VERTEX_BINDING_STRIDE = 0x82D8;
export def GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
export def GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
export def GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
export def GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB;
export def GL_TEXTURE_VIEW_MIN_LEVEL_OES = 0x82DB;
export def GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
export def GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC;
export def GL_TEXTURE_VIEW_NUM_LEVELS_OES = 0x82DC;
export def GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
export def GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD;
export def GL_TEXTURE_VIEW_MIN_LAYER_OES = 0x82DD;
export def GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
export def GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE;
export def GL_TEXTURE_VIEW_NUM_LAYERS_OES = 0x82DE;
export def GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
export def GL_BUFFER = 0x82E0;
export def GL_BUFFER_KHR = 0x82E0;
export def GL_SHADER = 0x82E1;
export def GL_SHADER_KHR = 0x82E1;
export def GL_PROGRAM = 0x82E2;
export def GL_PROGRAM_KHR = 0x82E2;
export def GL_QUERY = 0x82E3;
export def GL_QUERY_KHR = 0x82E3;
export def GL_PROGRAM_PIPELINE = 0x82E4;
export def GL_PROGRAM_PIPELINE_KHR = 0x82E4;
export def GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
export def GL_SAMPLER = 0x82E6;
export def GL_SAMPLER_KHR = 0x82E6;
export def GL_DISPLAY_LIST = 0x82E7;
export def GL_MAX_LABEL_LENGTH = 0x82E8;
export def GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
export def GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
export def GL_QUERY_TARGET = 0x82EA;
export def GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
export def GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
export def GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
export def GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
export def GL_VERTICES_SUBMITTED = 0x82EE;
export def GL_VERTICES_SUBMITTED_ARB = 0x82EE;
export def GL_PRIMITIVES_SUBMITTED = 0x82EF;
export def GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
export def GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
export def GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
export def GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
export def GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
export def GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
export def GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
export def GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
export def GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
export def GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
export def GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
export def GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
export def GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
export def GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
export def GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
export def GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
export def GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
export def GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
export def GL_MAX_CULL_DISTANCES = 0x82F9;
export def GL_MAX_CULL_DISTANCES_EXT = 0x82F9;
export def GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
export def GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x82FA;
export def GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
export def GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
export def GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
export def GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
export def GL_ROBUST_GPU_TIMEOUT_MS_KHR = 0x82FD;
export def GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
export def GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
export def GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
export def GL_FRAGMENTS_INSTRUMENT_SGIX = 0x8313;
export def GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314;
export def GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315;
export def GL_CONVOLUTION_HINT_SGIX = 0x8316;
export def GL_YCRCB_SGIX = 0x8318;
export def GL_YCRCBA_SGIX = 0x8319;
export def GL_UNPACK_COMPRESSED_SIZE_SGIX = 0x831A;
export def GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831B;
export def GL_PACK_COMPRESSED_SIZE_SGIX = 0x831C;
export def GL_SLIM8U_SGIX = 0x831D;
export def GL_SLIM10U_SGIX = 0x831E;
export def GL_SLIM12S_SGIX = 0x831F;
export def GL_ALPHA_MIN_SGIX = 0x8320;
export def GL_ALPHA_MAX_SGIX = 0x8321;
export def GL_SCALEBIAS_HINT_SGIX = 0x8322;
export def GL_ASYNC_MARKER_SGIX = 0x8329;
export def GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
export def GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
export def GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
export def GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
export def GL_PIXEL_MAG_FILTER_EXT = 0x8331;
export def GL_PIXEL_MIN_FILTER_EXT = 0x8332;
export def GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
export def GL_CUBIC_EXT = 0x8334;
export def GL_AVERAGE_EXT = 0x8335;
export def GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
export def GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
export def GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
export def GL_FRAGMENT_MATERIAL_EXT = 0x8349;
export def GL_FRAGMENT_NORMAL_EXT = 0x834A;
export def GL_FRAGMENT_COLOR_EXT = 0x834C;
export def GL_ATTENUATION_EXT = 0x834D;
export def GL_SHADOW_ATTENUATION_EXT = 0x834E;
export def GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
export def GL_TEXTURE_LIGHT_EXT = 0x8350;
export def GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
export def GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
export def GL_PIXEL_TEXTURE_SGIS = 0x8353;
export def GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
export def GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
export def GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
export def GL_LINE_QUALITY_HINT_SGIX = 0x835B;
export def GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
export def GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
export def GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
export def GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
export def GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
export def GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
export def GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
export def GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
export def GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
export def GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
export def GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
export def GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
export def GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
export def GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
export def GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
export def GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
export def GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
export def GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
export def GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
export def GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
export def GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
export def GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
export def GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
export def GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
export def GL_MIRRORED_REPEAT = 0x8370;
export def GL_MIRRORED_REPEAT_ARB = 0x8370;
export def GL_MIRRORED_REPEAT_IBM = 0x8370;
export def GL_MIRRORED_REPEAT_OES = 0x8370;
export def GL_RGB_S3TC = 0x83A0;
export def GL_RGB4_S3TC = 0x83A1;
export def GL_RGBA_S3TC = 0x83A2;
export def GL_RGBA4_S3TC = 0x83A3;
export def GL_RGBA_DXT5_S3TC = 0x83A4;
export def GL_RGBA4_DXT5_S3TC = 0x83A5;
export def GL_VERTEX_PRECLIP_SGIX = 0x83EE;
export def GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
export def GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
export def GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
export def GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2;
export def GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
export def GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3;
export def GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
export def GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
export def GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
export def GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
export def GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
export def GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
export def GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
export def GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
export def GL_PERFQUERY_WAIT_INTEL = 0x83FB;
export def GL_BLACKHOLE_RENDER_INTEL = 0x83FC;
export def GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
export def GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
export def GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
export def GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
export def GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
export def GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
export def GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
export def GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
export def GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
export def GL_LIGHT_ENV_MODE_SGIX = 0x8407;
export def GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
export def GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
export def GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
export def GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
export def GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
export def GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
export def GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
export def GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
export def GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
export def GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
export def GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
export def GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
export def GL_PACK_RESAMPLE_SGIX = 0x842E;
export def GL_UNPACK_RESAMPLE_SGIX = 0x842F;
export def GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
export def GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
export def GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
export def GL_TANGENT_ARRAY_EXT = 0x8439;
export def GL_BINORMAL_ARRAY_EXT = 0x843A;
export def GL_CURRENT_TANGENT_EXT = 0x843B;
export def GL_CURRENT_BINORMAL_EXT = 0x843C;
export def GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
export def GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
export def GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
export def GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
export def GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
export def GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
export def GL_MAP1_TANGENT_EXT = 0x8444;
export def GL_MAP2_TANGENT_EXT = 0x8445;
export def GL_MAP1_BINORMAL_EXT = 0x8446;
export def GL_MAP2_BINORMAL_EXT = 0x8447;
export def GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
export def GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
export def GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
export def GL_FOG_COORDINATE_SOURCE = 0x8450;
export def GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
export def GL_FOG_COORD_SRC = 0x8450;
export def GL_FOG_COORDINATE = 0x8451;
export def GL_FOG_COORDINATE_EXT = 0x8451;
export def GL_FOG_COORD = 0x8451;
export def GL_FRAGMENT_DEPTH = 0x8452;
export def GL_FRAGMENT_DEPTH_EXT = 0x8452;
export def GL_CURRENT_FOG_COORDINATE = 0x8453;
export def GL_CURRENT_FOG_COORD = 0x8453;
export def GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
export def GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
export def GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
export def GL_FOG_COORD_ARRAY_TYPE = 0x8454;
export def GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
export def GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
export def GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
export def GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
export def GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
export def GL_FOG_COORD_ARRAY_POINTER = 0x8456;
export def GL_FOG_COORDINATE_ARRAY = 0x8457;
export def GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
export def GL_FOG_COORD_ARRAY = 0x8457;
export def GL_COLOR_SUM = 0x8458;
export def GL_COLOR_SUM_ARB = 0x8458;
export def GL_COLOR_SUM_EXT = 0x8458;
export def GL_CURRENT_SECONDARY_COLOR = 0x8459;
export def GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
export def GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
export def GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
export def GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
export def GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
export def GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
export def GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
export def GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
export def GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
export def GL_SECONDARY_COLOR_ARRAY = 0x845E;
export def GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
export def GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
export def GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
export def GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
export def GL_SCREEN_COORDINATES_REND = 0x8490;
export def GL_INVERTED_SCREEN_W_REND = 0x8491;
export def GL_TEXTURE0 = 0x84C0;
export def GL_TEXTURE0_ARB = 0x84C0;
export def GL_TEXTURE1 = 0x84C1;
export def GL_TEXTURE1_ARB = 0x84C1;
export def GL_TEXTURE2 = 0x84C2;
export def GL_TEXTURE2_ARB = 0x84C2;
export def GL_TEXTURE3 = 0x84C3;
export def GL_TEXTURE3_ARB = 0x84C3;
export def GL_TEXTURE4 = 0x84C4;
export def GL_TEXTURE4_ARB = 0x84C4;
export def GL_TEXTURE5 = 0x84C5;
export def GL_TEXTURE5_ARB = 0x84C5;
export def GL_TEXTURE6 = 0x84C6;
export def GL_TEXTURE6_ARB = 0x84C6;
export def GL_TEXTURE7 = 0x84C7;
export def GL_TEXTURE7_ARB = 0x84C7;
export def GL_TEXTURE8 = 0x84C8;
export def GL_TEXTURE8_ARB = 0x84C8;
export def GL_TEXTURE9 = 0x84C9;
export def GL_TEXTURE9_ARB = 0x84C9;
export def GL_TEXTURE10 = 0x84CA;
export def GL_TEXTURE10_ARB = 0x84CA;
export def GL_TEXTURE11 = 0x84CB;
export def GL_TEXTURE11_ARB = 0x84CB;
export def GL_TEXTURE12 = 0x84CC;
export def GL_TEXTURE12_ARB = 0x84CC;
export def GL_TEXTURE13 = 0x84CD;
export def GL_TEXTURE13_ARB = 0x84CD;
export def GL_TEXTURE14 = 0x84CE;
export def GL_TEXTURE14_ARB = 0x84CE;
export def GL_TEXTURE15 = 0x84CF;
export def GL_TEXTURE15_ARB = 0x84CF;
export def GL_TEXTURE16 = 0x84D0;
export def GL_TEXTURE16_ARB = 0x84D0;
export def GL_TEXTURE17 = 0x84D1;
export def GL_TEXTURE17_ARB = 0x84D1;
export def GL_TEXTURE18 = 0x84D2;
export def GL_TEXTURE18_ARB = 0x84D2;
export def GL_TEXTURE19 = 0x84D3;
export def GL_TEXTURE19_ARB = 0x84D3;
export def GL_TEXTURE20 = 0x84D4;
export def GL_TEXTURE20_ARB = 0x84D4;
export def GL_TEXTURE21 = 0x84D5;
export def GL_TEXTURE21_ARB = 0x84D5;
export def GL_TEXTURE22 = 0x84D6;
export def GL_TEXTURE22_ARB = 0x84D6;
export def GL_TEXTURE23 = 0x84D7;
export def GL_TEXTURE23_ARB = 0x84D7;
export def GL_TEXTURE24 = 0x84D8;
export def GL_TEXTURE24_ARB = 0x84D8;
export def GL_TEXTURE25 = 0x84D9;
export def GL_TEXTURE25_ARB = 0x84D9;
export def GL_TEXTURE26 = 0x84DA;
export def GL_TEXTURE26_ARB = 0x84DA;
export def GL_TEXTURE27 = 0x84DB;
export def GL_TEXTURE27_ARB = 0x84DB;
export def GL_TEXTURE28 = 0x84DC;
export def GL_TEXTURE28_ARB = 0x84DC;
export def GL_TEXTURE29 = 0x84DD;
export def GL_TEXTURE29_ARB = 0x84DD;
export def GL_TEXTURE30 = 0x84DE;
export def GL_TEXTURE30_ARB = 0x84DE;
export def GL_TEXTURE31 = 0x84DF;
export def GL_TEXTURE31_ARB = 0x84DF;
export def GL_ACTIVE_TEXTURE = 0x84E0;
export def GL_ACTIVE_TEXTURE_ARB = 0x84E0;
export def GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
export def GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
export def GL_MAX_TEXTURE_UNITS = 0x84E2;
export def GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
export def GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
export def GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
export def GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
export def GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
export def GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
export def GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
export def GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
export def GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
export def GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
export def GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
export def GL_SUBTRACT = 0x84E7;
export def GL_SUBTRACT_ARB = 0x84E7;
export def GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
export def GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
export def GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8;
export def GL_COMPRESSED_ALPHA = 0x84E9;
export def GL_COMPRESSED_ALPHA_ARB = 0x84E9;
export def GL_COMPRESSED_LUMINANCE = 0x84EA;
export def GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
export def GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
export def GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
export def GL_COMPRESSED_INTENSITY = 0x84EC;
export def GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
export def GL_COMPRESSED_RGB = 0x84ED;
export def GL_COMPRESSED_RGB_ARB = 0x84ED;
export def GL_COMPRESSED_RGBA = 0x84EE;
export def GL_COMPRESSED_RGBA_ARB = 0x84EE;
export def GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
export def GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
export def GL_ALL_COMPLETED_NV = 0x84F2;
export def GL_FENCE_STATUS_NV = 0x84F3;
export def GL_FENCE_CONDITION_NV = 0x84F4;
export def GL_TEXTURE_RECTANGLE = 0x84F5;
export def GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
export def GL_TEXTURE_RECTANGLE_NV = 0x84F5;
export def GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
export def GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
export def GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
export def GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
export def GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
export def GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
export def GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
export def GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
export def GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
export def GL_DEPTH_STENCIL = 0x84F9;
export def GL_DEPTH_STENCIL_EXT = 0x84F9;
export def GL_DEPTH_STENCIL_NV = 0x84F9;
export def GL_DEPTH_STENCIL_OES = 0x84F9;
export def GL_UNSIGNED_INT_24_8 = 0x84FA;
export def GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
export def GL_UNSIGNED_INT_24_8_NV = 0x84FA;
export def GL_UNSIGNED_INT_24_8_OES = 0x84FA;
export def GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
export def GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
export def GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
export def GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
export def GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
export def GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
export def GL_TEXTURE_FILTER_CONTROL = 0x8500;
export def GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
export def GL_TEXTURE_LOD_BIAS = 0x8501;
export def GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
export def GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
export def GL_COMBINE4_NV = 0x8503;
export def GL_MAX_SHININESS_NV = 0x8504;
export def GL_MAX_SPOT_EXPONENT_NV = 0x8505;
export def GL_MODELVIEW1_MATRIX_EXT = 0x8506;
export def GL_INCR_WRAP = 0x8507;
export def GL_INCR_WRAP_EXT = 0x8507;
export def GL_INCR_WRAP_OES = 0x8507;
export def GL_DECR_WRAP = 0x8508;
export def GL_DECR_WRAP_EXT = 0x8508;
export def GL_DECR_WRAP_OES = 0x8508;
export def GL_VERTEX_WEIGHTING_EXT = 0x8509;
export def GL_MODELVIEW1_ARB = 0x850A;
export def GL_MODELVIEW1_EXT = 0x850A;
export def GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
export def GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
export def GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
export def GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
export def GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
export def GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
export def GL_NORMAL_MAP = 0x8511;
export def GL_NORMAL_MAP_ARB = 0x8511;
export def GL_NORMAL_MAP_EXT = 0x8511;
export def GL_NORMAL_MAP_NV = 0x8511;
export def GL_NORMAL_MAP_OES = 0x8511;
export def GL_REFLECTION_MAP = 0x8512;
export def GL_REFLECTION_MAP_ARB = 0x8512;
export def GL_REFLECTION_MAP_EXT = 0x8512;
export def GL_REFLECTION_MAP_NV = 0x8512;
export def GL_REFLECTION_MAP_OES = 0x8512;
export def GL_TEXTURE_CUBE_MAP = 0x8513;
export def GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
export def GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
export def GL_TEXTURE_CUBE_MAP_OES = 0x8513;
export def GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
export def GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
export def GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
export def GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
export def GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
export def GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A;
export def GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
export def GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
export def GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
export def GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
export def GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
export def GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
export def GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C;
export def GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
export def GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
export def GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
export def GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
export def GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
export def GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
export def GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
export def GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
export def GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
export def GL_REGISTER_COMBINERS_NV = 0x8522;
export def GL_VARIABLE_A_NV = 0x8523;
export def GL_VARIABLE_B_NV = 0x8524;
export def GL_VARIABLE_C_NV = 0x8525;
export def GL_VARIABLE_D_NV = 0x8526;
export def GL_VARIABLE_E_NV = 0x8527;
export def GL_VARIABLE_F_NV = 0x8528;
export def GL_VARIABLE_G_NV = 0x8529;
export def GL_CONSTANT_COLOR0_NV = 0x852A;
export def GL_CONSTANT_COLOR1_NV = 0x852B;
export def GL_PRIMARY_COLOR_NV = 0x852C;
export def GL_SECONDARY_COLOR_NV = 0x852D;
export def GL_SPARE0_NV = 0x852E;
export def GL_SPARE1_NV = 0x852F;
export def GL_DISCARD_NV = 0x8530;
export def GL_E_TIMES_F_NV = 0x8531;
export def GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
export def GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
export def GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
export def GL_PER_STAGE_CONSTANTS_NV = 0x8535;
export def GL_UNSIGNED_IDENTITY_NV = 0x8536;
export def GL_UNSIGNED_INVERT_NV = 0x8537;
export def GL_EXPAND_NORMAL_NV = 0x8538;
export def GL_EXPAND_NEGATE_NV = 0x8539;
export def GL_HALF_BIAS_NORMAL_NV = 0x853A;
export def GL_HALF_BIAS_NEGATE_NV = 0x853B;
export def GL_SIGNED_IDENTITY_NV = 0x853C;
export def GL_SIGNED_NEGATE_NV = 0x853D;
export def GL_SCALE_BY_TWO_NV = 0x853E;
export def GL_SCALE_BY_FOUR_NV = 0x853F;
export def GL_SCALE_BY_ONE_HALF_NV = 0x8540;
export def GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
export def GL_COMBINER_INPUT_NV = 0x8542;
export def GL_COMBINER_MAPPING_NV = 0x8543;
export def GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
export def GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
export def GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
export def GL_COMBINER_MUX_SUM_NV = 0x8547;
export def GL_COMBINER_SCALE_NV = 0x8548;
export def GL_COMBINER_BIAS_NV = 0x8549;
export def GL_COMBINER_AB_OUTPUT_NV = 0x854A;
export def GL_COMBINER_CD_OUTPUT_NV = 0x854B;
export def GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
export def GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
export def GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
export def GL_COLOR_SUM_CLAMP_NV = 0x854F;
export def GL_COMBINER0_NV = 0x8550;
export def GL_COMBINER1_NV = 0x8551;
export def GL_COMBINER2_NV = 0x8552;
export def GL_COMBINER3_NV = 0x8553;
export def GL_COMBINER4_NV = 0x8554;
export def GL_COMBINER5_NV = 0x8555;
export def GL_COMBINER6_NV = 0x8556;
export def GL_COMBINER7_NV = 0x8557;
export def GL_PRIMITIVE_RESTART_NV = 0x8558;
export def GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
export def GL_FOG_DISTANCE_MODE_NV = 0x855A;
export def GL_EYE_RADIAL_NV = 0x855B;
export def GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
export def GL_EMBOSS_LIGHT_NV = 0x855D;
export def GL_EMBOSS_CONSTANT_NV = 0x855E;
export def GL_EMBOSS_MAP_NV = 0x855F;
export def GL_RED_MIN_CLAMP_INGR = 0x8560;
export def GL_GREEN_MIN_CLAMP_INGR = 0x8561;
export def GL_BLUE_MIN_CLAMP_INGR = 0x8562;
export def GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
export def GL_RED_MAX_CLAMP_INGR = 0x8564;
export def GL_GREEN_MAX_CLAMP_INGR = 0x8565;
export def GL_BLUE_MAX_CLAMP_INGR = 0x8566;
export def GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
export def GL_INTERLACE_READ_INGR = 0x8568;
export def GL_COMBINE = 0x8570;
export def GL_COMBINE_ARB = 0x8570;
export def GL_COMBINE_EXT = 0x8570;
export def GL_COMBINE_RGB = 0x8571;
export def GL_COMBINE_RGB_ARB = 0x8571;
export def GL_COMBINE_RGB_EXT = 0x8571;
export def GL_COMBINE_ALPHA = 0x8572;
export def GL_COMBINE_ALPHA_ARB = 0x8572;
export def GL_COMBINE_ALPHA_EXT = 0x8572;
export def GL_RGB_SCALE = 0x8573;
export def GL_RGB_SCALE_ARB = 0x8573;
export def GL_RGB_SCALE_EXT = 0x8573;
export def GL_ADD_SIGNED = 0x8574;
export def GL_ADD_SIGNED_ARB = 0x8574;
export def GL_ADD_SIGNED_EXT = 0x8574;
export def GL_INTERPOLATE = 0x8575;
export def GL_INTERPOLATE_ARB = 0x8575;
export def GL_INTERPOLATE_EXT = 0x8575;
export def GL_CONSTANT = 0x8576;
export def GL_CONSTANT_ARB = 0x8576;
export def GL_CONSTANT_EXT = 0x8576;
export def GL_CONSTANT_NV = 0x8576;
export def GL_PRIMARY_COLOR = 0x8577;
export def GL_PRIMARY_COLOR_ARB = 0x8577;
export def GL_PRIMARY_COLOR_EXT = 0x8577;
export def GL_PREVIOUS = 0x8578;
export def GL_PREVIOUS_ARB = 0x8578;
export def GL_PREVIOUS_EXT = 0x8578;
export def GL_SOURCE0_RGB = 0x8580;
export def GL_SOURCE0_RGB_ARB = 0x8580;
export def GL_SOURCE0_RGB_EXT = 0x8580;
export def GL_SRC0_RGB = 0x8580;
export def GL_SOURCE1_RGB = 0x8581;
export def GL_SOURCE1_RGB_ARB = 0x8581;
export def GL_SOURCE1_RGB_EXT = 0x8581;
export def GL_SRC1_RGB = 0x8581;
export def GL_SOURCE2_RGB = 0x8582;
export def GL_SOURCE2_RGB_ARB = 0x8582;
export def GL_SOURCE2_RGB_EXT = 0x8582;
export def GL_SRC2_RGB = 0x8582;
export def GL_SOURCE3_RGB_NV = 0x8583;
export def GL_SOURCE0_ALPHA = 0x8588;
export def GL_SOURCE0_ALPHA_ARB = 0x8588;
export def GL_SOURCE0_ALPHA_EXT = 0x8588;
export def GL_SRC0_ALPHA = 0x8588;
export def GL_SOURCE1_ALPHA = 0x8589;
export def GL_SOURCE1_ALPHA_ARB = 0x8589;
export def GL_SOURCE1_ALPHA_EXT = 0x8589;
export def GL_SRC1_ALPHA = 0x8589;
export def GL_SRC1_ALPHA_EXT = 0x8589;
export def GL_SOURCE2_ALPHA = 0x858A;
export def GL_SOURCE2_ALPHA_ARB = 0x858A;
export def GL_SOURCE2_ALPHA_EXT = 0x858A;
export def GL_SRC2_ALPHA = 0x858A;
export def GL_SOURCE3_ALPHA_NV = 0x858B;
export def GL_OPERAND0_RGB = 0x8590;
export def GL_OPERAND0_RGB_ARB = 0x8590;
export def GL_OPERAND0_RGB_EXT = 0x8590;
export def GL_OPERAND1_RGB = 0x8591;
export def GL_OPERAND1_RGB_ARB = 0x8591;
export def GL_OPERAND1_RGB_EXT = 0x8591;
export def GL_OPERAND2_RGB = 0x8592;
export def GL_OPERAND2_RGB_ARB = 0x8592;
export def GL_OPERAND2_RGB_EXT = 0x8592;
export def GL_OPERAND3_RGB_NV = 0x8593;
export def GL_OPERAND0_ALPHA = 0x8598;
export def GL_OPERAND0_ALPHA_ARB = 0x8598;
export def GL_OPERAND0_ALPHA_EXT = 0x8598;
export def GL_OPERAND1_ALPHA = 0x8599;
export def GL_OPERAND1_ALPHA_ARB = 0x8599;
export def GL_OPERAND1_ALPHA_EXT = 0x8599;
export def GL_OPERAND2_ALPHA = 0x859A;
export def GL_OPERAND2_ALPHA_ARB = 0x859A;
export def GL_OPERAND2_ALPHA_EXT = 0x859A;
export def GL_OPERAND3_ALPHA_NV = 0x859B;
export def GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
export def GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
export def GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
export def GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
export def GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
export def GL_PERTURB_EXT = 0x85AE;
export def GL_TEXTURE_NORMAL_EXT = 0x85AF;
export def GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
export def GL_TRANSFORM_HINT_APPLE = 0x85B1;
export def GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
export def GL_BUFFER_OBJECT_APPLE = 0x85B3;
export def GL_STORAGE_CLIENT_APPLE = 0x85B4;
export def GL_VERTEX_ARRAY_BINDING = 0x85B5;
export def GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
export def GL_VERTEX_ARRAY_BINDING_OES = 0x85B5;
export def GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
export def GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
export def GL_YCBCR_422_APPLE = 0x85B9;
export def GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
export def GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
export def GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
export def GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
export def GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
export def GL_STORAGE_PRIVATE_APPLE = 0x85BD;
export def GL_STORAGE_CACHED_APPLE = 0x85BE;
export def GL_STORAGE_SHARED_APPLE = 0x85BF;
export def GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
export def GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
export def GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
export def GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
export def GL_R1UI_V3F_SUN = 0x85C4;
export def GL_R1UI_C4UB_V3F_SUN = 0x85C5;
export def GL_R1UI_C3F_V3F_SUN = 0x85C6;
export def GL_R1UI_N3F_V3F_SUN = 0x85C7;
export def GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
export def GL_R1UI_T2F_V3F_SUN = 0x85C9;
export def GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
export def GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
export def GL_SLICE_ACCUM_SUN = 0x85CC;
export def GL_QUAD_MESH_SUN = 0x8614;
export def GL_TRIANGLE_MESH_SUN = 0x8615;
export def GL_VERTEX_PROGRAM_ARB = 0x8620;
export def GL_VERTEX_PROGRAM_NV = 0x8620;
export def GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
export def GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
export def GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
export def GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
export def GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
export def GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
export def GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
export def GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
export def GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
export def GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
export def GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
export def GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
export def GL_CURRENT_ATTRIB_NV = 0x8626;
export def GL_CURRENT_VERTEX_ATTRIB = 0x8626;
export def GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
export def GL_PROGRAM_LENGTH_ARB = 0x8627;
export def GL_PROGRAM_LENGTH_NV = 0x8627;
export def GL_PROGRAM_STRING_ARB = 0x8628;
export def GL_PROGRAM_STRING_NV = 0x8628;
export def GL_MODELVIEW_PROJECTION_NV = 0x8629;
export def GL_IDENTITY_NV = 0x862A;
export def GL_INVERSE_NV = 0x862B;
export def GL_TRANSPOSE_NV = 0x862C;
export def GL_INVERSE_TRANSPOSE_NV = 0x862D;
export def GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
export def GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
export def GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
export def GL_MAX_TRACK_MATRICES_NV = 0x862F;
export def GL_MATRIX0_NV = 0x8630;
export def GL_MATRIX1_NV = 0x8631;
export def GL_MATRIX2_NV = 0x8632;
export def GL_MATRIX3_NV = 0x8633;
export def GL_MATRIX4_NV = 0x8634;
export def GL_MATRIX5_NV = 0x8635;
export def GL_MATRIX6_NV = 0x8636;
export def GL_MATRIX7_NV = 0x8637;
export def GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
export def GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
export def GL_CURRENT_MATRIX_ARB = 0x8641;
export def GL_CURRENT_MATRIX_NV = 0x8641;
export def GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
export def GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
export def GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
export def GL_PROGRAM_POINT_SIZE = 0x8642;
export def GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
export def GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
export def GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
export def GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
export def GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
export def GL_PROGRAM_PARAMETER_NV = 0x8644;
export def GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
export def GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
export def GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
export def GL_PROGRAM_TARGET_NV = 0x8646;
export def GL_PROGRAM_RESIDENT_NV = 0x8647;
export def GL_TRACK_MATRIX_NV = 0x8648;
export def GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
export def GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
export def GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
export def GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
export def GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
export def GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
export def GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
export def GL_DEPTH_CLAMP = 0x864F;
export def GL_DEPTH_CLAMP_NV = 0x864F;
export def GL_DEPTH_CLAMP_EXT = 0x864F;
export def GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
export def GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
export def GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
export def GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
export def GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
export def GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
export def GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
export def GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
export def GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
export def GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
export def GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
export def GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
export def GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
export def GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
export def GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
export def GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
export def GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
export def GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
export def GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
export def GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
export def GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
export def GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
export def GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
export def GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
export def GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
export def GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
export def GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
export def GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
export def GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
export def GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
export def GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
export def GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
export def GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
export def GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
export def GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
export def GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
export def GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
export def GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
export def GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
export def GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
export def GL_PROGRAM_BINDING_ARB = 0x8677;
export def GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
export def GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
export def GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
export def GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
export def GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
export def GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
export def GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
export def GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
export def GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
export def GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
export def GL_TEXTURE_COMPRESSED = 0x86A1;
export def GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
export def GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
export def GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
export def GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
export def GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
export def GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
export def GL_MAX_VERTEX_UNITS_OES = 0x86A4;
export def GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
export def GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
export def GL_VERTEX_BLEND_ARB = 0x86A7;
export def GL_CURRENT_WEIGHT_ARB = 0x86A8;
export def GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
export def GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9;
export def GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
export def GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA;
export def GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
export def GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB;
export def GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
export def GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC;
export def GL_WEIGHT_ARRAY_ARB = 0x86AD;
export def GL_WEIGHT_ARRAY_OES = 0x86AD;
export def GL_DOT3_RGB = 0x86AE;
export def GL_DOT3_RGB_ARB = 0x86AE;
export def GL_DOT3_RGBA = 0x86AF;
export def GL_DOT3_RGBA_ARB = 0x86AF;
export def GL_DOT3_RGBA_IMG = 0x86AF;
export def GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
export def GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
export def GL_MULTISAMPLE_3DFX = 0x86B2;
export def GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
export def GL_SAMPLES_3DFX = 0x86B4;
export def GL_EVAL_2D_NV = 0x86C0;
export def GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
export def GL_MAP_TESSELLATION_NV = 0x86C2;
export def GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
export def GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
export def GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
export def GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
export def GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
export def GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
export def GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
export def GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
export def GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
export def GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
export def GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
export def GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
export def GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
export def GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
export def GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
export def GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
export def GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
export def GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
export def GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
export def GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
export def GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
export def GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
export def GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
export def GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
export def GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
export def GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
export def GL_SHADER_CONSISTENT_NV = 0x86DD;
export def GL_TEXTURE_SHADER_NV = 0x86DE;
export def GL_SHADER_OPERATION_NV = 0x86DF;
export def GL_CULL_MODES_NV = 0x86E0;
export def GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
export def GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
export def GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
export def GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
export def GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
export def GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
export def GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
export def GL_CONST_EYE_NV = 0x86E5;
export def GL_PASS_THROUGH_NV = 0x86E6;
export def GL_CULL_FRAGMENT_NV = 0x86E7;
export def GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
export def GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
export def GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
export def GL_SURFACE_STATE_NV = 0x86EB;
export def GL_DOT_PRODUCT_NV = 0x86EC;
export def GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
export def GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
export def GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
export def GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
export def GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
export def GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
export def GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
export def GL_HILO_NV = 0x86F4;
export def GL_DSDT_NV = 0x86F5;
export def GL_DSDT_MAG_NV = 0x86F6;
export def GL_DSDT_MAG_VIB_NV = 0x86F7;
export def GL_HILO16_NV = 0x86F8;
export def GL_SIGNED_HILO_NV = 0x86F9;
export def GL_SIGNED_HILO16_NV = 0x86FA;
export def GL_SIGNED_RGBA_NV = 0x86FB;
export def GL_SIGNED_RGBA8_NV = 0x86FC;
export def GL_SURFACE_REGISTERED_NV = 0x86FD;
export def GL_SIGNED_RGB_NV = 0x86FE;
export def GL_SIGNED_RGB8_NV = 0x86FF;
export def GL_SURFACE_MAPPED_NV = 0x8700;
export def GL_SIGNED_LUMINANCE_NV = 0x8701;
export def GL_SIGNED_LUMINANCE8_NV = 0x8702;
export def GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
export def GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
export def GL_SIGNED_ALPHA_NV = 0x8705;
export def GL_SIGNED_ALPHA8_NV = 0x8706;
export def GL_SIGNED_INTENSITY_NV = 0x8707;
export def GL_SIGNED_INTENSITY8_NV = 0x8708;
export def GL_DSDT8_NV = 0x8709;
export def GL_DSDT8_MAG8_NV = 0x870A;
export def GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
export def GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
export def GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
export def GL_HI_SCALE_NV = 0x870E;
export def GL_LO_SCALE_NV = 0x870F;
export def GL_DS_SCALE_NV = 0x8710;
export def GL_DT_SCALE_NV = 0x8711;
export def GL_MAGNITUDE_SCALE_NV = 0x8712;
export def GL_VIBRANCE_SCALE_NV = 0x8713;
export def GL_HI_BIAS_NV = 0x8714;
export def GL_LO_BIAS_NV = 0x8715;
export def GL_DS_BIAS_NV = 0x8716;
export def GL_DT_BIAS_NV = 0x8717;
export def GL_MAGNITUDE_BIAS_NV = 0x8718;
export def GL_VIBRANCE_BIAS_NV = 0x8719;
export def GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
export def GL_TEXTURE_HI_SIZE_NV = 0x871B;
export def GL_TEXTURE_LO_SIZE_NV = 0x871C;
export def GL_TEXTURE_DS_SIZE_NV = 0x871D;
export def GL_TEXTURE_DT_SIZE_NV = 0x871E;
export def GL_TEXTURE_MAG_SIZE_NV = 0x871F;
export def GL_MODELVIEW2_ARB = 0x8722;
export def GL_MODELVIEW3_ARB = 0x8723;
export def GL_MODELVIEW4_ARB = 0x8724;
export def GL_MODELVIEW5_ARB = 0x8725;
export def GL_MODELVIEW6_ARB = 0x8726;
export def GL_MODELVIEW7_ARB = 0x8727;
export def GL_MODELVIEW8_ARB = 0x8728;
export def GL_MODELVIEW9_ARB = 0x8729;
export def GL_MODELVIEW10_ARB = 0x872A;
export def GL_MODELVIEW11_ARB = 0x872B;
export def GL_MODELVIEW12_ARB = 0x872C;
export def GL_MODELVIEW13_ARB = 0x872D;
export def GL_MODELVIEW14_ARB = 0x872E;
export def GL_MODELVIEW15_ARB = 0x872F;
export def GL_MODELVIEW16_ARB = 0x8730;
export def GL_MODELVIEW17_ARB = 0x8731;
export def GL_MODELVIEW18_ARB = 0x8732;
export def GL_MODELVIEW19_ARB = 0x8733;
export def GL_MODELVIEW20_ARB = 0x8734;
export def GL_MODELVIEW21_ARB = 0x8735;
export def GL_MODELVIEW22_ARB = 0x8736;
export def GL_MODELVIEW23_ARB = 0x8737;
export def GL_MODELVIEW24_ARB = 0x8738;
export def GL_MODELVIEW25_ARB = 0x8739;
export def GL_MODELVIEW26_ARB = 0x873A;
export def GL_MODELVIEW27_ARB = 0x873B;
export def GL_MODELVIEW28_ARB = 0x873C;
export def GL_MODELVIEW29_ARB = 0x873D;
export def GL_MODELVIEW30_ARB = 0x873E;
export def GL_MODELVIEW31_ARB = 0x873F;
export def GL_DOT3_RGB_EXT = 0x8740;
export def GL_Z400_BINARY_AMD = 0x8740;
export def GL_DOT3_RGBA_EXT = 0x8741;
export def GL_PROGRAM_BINARY_LENGTH_OES = 0x8741;
export def GL_PROGRAM_BINARY_LENGTH = 0x8741;
export def GL_MIRROR_CLAMP_ATI = 0x8742;
export def GL_MIRROR_CLAMP_EXT = 0x8742;
export def GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
export def GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
export def GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
export def GL_MODULATE_ADD_ATI = 0x8744;
export def GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
export def GL_MODULATE_SUBTRACT_ATI = 0x8746;
export def GL_SET_AMD = 0x874A;
export def GL_REPLACE_VALUE_AMD = 0x874B;
export def GL_STENCIL_OP_VALUE_AMD = 0x874C;
export def GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
export def GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
export def GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
export def GL_DEPTH_STENCIL_MESA = 0x8750;
export def GL_UNSIGNED_INT_24_8_MESA = 0x8751;
export def GL_UNSIGNED_INT_8_24_REV_MESA = 0x8752;
export def GL_UNSIGNED_SHORT_15_1_MESA = 0x8753;
export def GL_UNSIGNED_SHORT_1_15_REV_MESA = 0x8754;
export def GL_TRACE_MASK_MESA = 0x8755;
export def GL_TRACE_NAME_MESA = 0x8756;
export def GL_YCBCR_MESA = 0x8757;
export def GL_PACK_INVERT_MESA = 0x8758;
export def GL_DEBUG_OBJECT_MESA = 0x8759;
export def GL_TEXTURE_1D_STACK_MESAX = 0x8759;
export def GL_DEBUG_PRINT_MESA = 0x875A;
export def GL_TEXTURE_2D_STACK_MESAX = 0x875A;
export def GL_DEBUG_ASSERT_MESA = 0x875B;
export def GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
export def GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
export def GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
export def GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
export def GL_PROGRAM_BINARY_FORMAT_MESA = 0x875F;
export def GL_STATIC_ATI = 0x8760;
export def GL_DYNAMIC_ATI = 0x8761;
export def GL_PRESERVE_ATI = 0x8762;
export def GL_DISCARD_ATI = 0x8763;
export def GL_BUFFER_SIZE = 0x8764;
export def GL_BUFFER_SIZE_ARB = 0x8764;
export def GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
export def GL_BUFFER_USAGE = 0x8765;
export def GL_BUFFER_USAGE_ARB = 0x8765;
export def GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
export def GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
export def GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
export def GL_ELEMENT_ARRAY_ATI = 0x8768;
export def GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
export def GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
export def GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
export def GL_VERTEX_STREAM0_ATI = 0x876C;
export def GL_VERTEX_STREAM1_ATI = 0x876D;
export def GL_VERTEX_STREAM2_ATI = 0x876E;
export def GL_VERTEX_STREAM3_ATI = 0x876F;
export def GL_VERTEX_STREAM4_ATI = 0x8770;
export def GL_VERTEX_STREAM5_ATI = 0x8771;
export def GL_VERTEX_STREAM6_ATI = 0x8772;
export def GL_VERTEX_STREAM7_ATI = 0x8773;
export def GL_VERTEX_SOURCE_ATI = 0x8774;
export def GL_BUMP_ROT_MATRIX_ATI = 0x8775;
export def GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
export def GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
export def GL_BUMP_TEX_UNITS_ATI = 0x8778;
export def GL_DUDV_ATI = 0x8779;
export def GL_DU8DV8_ATI = 0x877A;
export def GL_BUMP_ENVMAP_ATI = 0x877B;
export def GL_BUMP_TARGET_ATI = 0x877C;
export def GL_VERTEX_SHADER_EXT = 0x8780;
export def GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
export def GL_OP_INDEX_EXT = 0x8782;
export def GL_OP_NEGATE_EXT = 0x8783;
export def GL_OP_DOT3_EXT = 0x8784;
export def GL_OP_DOT4_EXT = 0x8785;
export def GL_OP_MUL_EXT = 0x8786;
export def GL_OP_ADD_EXT = 0x8787;
export def GL_OP_MADD_EXT = 0x8788;
export def GL_OP_FRAC_EXT = 0x8789;
export def GL_OP_MAX_EXT = 0x878A;
export def GL_OP_MIN_EXT = 0x878B;
export def GL_OP_SET_GE_EXT = 0x878C;
export def GL_OP_SET_LT_EXT = 0x878D;
export def GL_OP_CLAMP_EXT = 0x878E;
export def GL_OP_FLOOR_EXT = 0x878F;
export def GL_OP_ROUND_EXT = 0x8790;
export def GL_OP_EXP_BASE_2_EXT = 0x8791;
export def GL_OP_LOG_BASE_2_EXT = 0x8792;
export def GL_OP_POWER_EXT = 0x8793;
export def GL_OP_RECIP_EXT = 0x8794;
export def GL_OP_RECIP_SQRT_EXT = 0x8795;
export def GL_OP_SUB_EXT = 0x8796;
export def GL_OP_CROSS_PRODUCT_EXT = 0x8797;
export def GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
export def GL_OP_MOV_EXT = 0x8799;
export def GL_OUTPUT_VERTEX_EXT = 0x879A;
export def GL_OUTPUT_COLOR0_EXT = 0x879B;
export def GL_OUTPUT_COLOR1_EXT = 0x879C;
export def GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
export def GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
export def GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
export def GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
export def GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
export def GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
export def GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
export def GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
export def GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
export def GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
export def GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
export def GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
export def GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
export def GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
export def GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
export def GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
export def GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
export def GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
export def GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
export def GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
export def GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
export def GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
export def GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
export def GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
export def GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
export def GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
export def GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
export def GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
export def GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
export def GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
export def GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
export def GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
export def GL_OUTPUT_FOG_EXT = 0x87BD;
export def GL_SCALAR_EXT = 0x87BE;
export def GL_VECTOR_EXT = 0x87BF;
export def GL_MATRIX_EXT = 0x87C0;
export def GL_VARIANT_EXT = 0x87C1;
export def GL_INVARIANT_EXT = 0x87C2;
export def GL_LOCAL_CONSTANT_EXT = 0x87C3;
export def GL_LOCAL_EXT = 0x87C4;
export def GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
export def GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
export def GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
export def GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
export def GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
export def GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
export def GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
export def GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
export def GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
export def GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
export def GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
export def GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
export def GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
export def GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
export def GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
export def GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
export def GL_X_EXT = 0x87D5;
export def GL_Y_EXT = 0x87D6;
export def GL_Z_EXT = 0x87D7;
export def GL_W_EXT = 0x87D8;
export def GL_NEGATIVE_X_EXT = 0x87D9;
export def GL_NEGATIVE_Y_EXT = 0x87DA;
export def GL_NEGATIVE_Z_EXT = 0x87DB;
export def GL_NEGATIVE_W_EXT = 0x87DC;
export def GL_ZERO_EXT = 0x87DD;
export def GL_ONE_EXT = 0x87DE;
export def GL_NEGATIVE_ONE_EXT = 0x87DF;
export def GL_NORMALIZED_RANGE_EXT = 0x87E0;
export def GL_FULL_RANGE_EXT = 0x87E1;
export def GL_CURRENT_VERTEX_EXT = 0x87E2;
export def GL_MVP_MATRIX_EXT = 0x87E3;
export def GL_VARIANT_VALUE_EXT = 0x87E4;
export def GL_VARIANT_DATATYPE_EXT = 0x87E5;
export def GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
export def GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
export def GL_VARIANT_ARRAY_EXT = 0x87E8;
export def GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
export def GL_INVARIANT_VALUE_EXT = 0x87EA;
export def GL_INVARIANT_DATATYPE_EXT = 0x87EB;
export def GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
export def GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
export def GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;
export def GL_PN_TRIANGLES_ATI = 0x87F0;
export def GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
export def GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
export def GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
export def GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
export def GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
export def GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
export def GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
export def GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
export def GL_3DC_X_AMD = 0x87F9;
export def GL_3DC_XY_AMD = 0x87FA;
export def GL_VBO_FREE_MEMORY_ATI = 0x87FB;
export def GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
export def GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
export def GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
export def GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE;
export def GL_PROGRAM_BINARY_FORMATS = 0x87FF;
export def GL_PROGRAM_BINARY_FORMATS_OES = 0x87FF;
export def GL_STENCIL_BACK_FUNC = 0x8800;
export def GL_STENCIL_BACK_FUNC_ATI = 0x8800;
export def GL_STENCIL_BACK_FAIL = 0x8801;
export def GL_STENCIL_BACK_FAIL_ATI = 0x8801;
export def GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
export def GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
export def GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
export def GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
export def GL_FRAGMENT_PROGRAM_ARB = 0x8804;
export def GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
export def GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
export def GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
export def GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
export def GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
export def GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
export def GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
export def GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
export def GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
export def GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
export def GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
export def GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
export def GL_RGBA32F = 0x8814;
export def GL_RGBA32F_ARB = 0x8814;
export def GL_RGBA32F_EXT = 0x8814;
export def GL_RGBA_FLOAT32_APPLE = 0x8814;
export def GL_RGBA_FLOAT32_ATI = 0x8814;
export def GL_RGB32F = 0x8815;
export def GL_RGB32F_ARB = 0x8815;
export def GL_RGB32F_EXT = 0x8815;
export def GL_RGB_FLOAT32_APPLE = 0x8815;
export def GL_RGB_FLOAT32_ATI = 0x8815;
export def GL_ALPHA32F_ARB = 0x8816;
export def GL_ALPHA32F_EXT = 0x8816;
export def GL_ALPHA_FLOAT32_APPLE = 0x8816;
export def GL_ALPHA_FLOAT32_ATI = 0x8816;
export def GL_INTENSITY32F_ARB = 0x8817;
export def GL_INTENSITY_FLOAT32_APPLE = 0x8817;
export def GL_INTENSITY_FLOAT32_ATI = 0x8817;
export def GL_LUMINANCE32F_ARB = 0x8818;
export def GL_LUMINANCE32F_EXT = 0x8818;
export def GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
export def GL_LUMINANCE_FLOAT32_ATI = 0x8818;
export def GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
export def GL_LUMINANCE_ALPHA32F_EXT = 0x8819;
export def GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
export def GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
export def GL_RGBA16F = 0x881A;
export def GL_RGBA16F_ARB = 0x881A;
export def GL_RGBA16F_EXT = 0x881A;
export def GL_RGBA_FLOAT16_APPLE = 0x881A;
export def GL_RGBA_FLOAT16_ATI = 0x881A;
export def GL_RGB16F = 0x881B;
export def GL_RGB16F_ARB = 0x881B;
export def GL_RGB16F_EXT = 0x881B;
export def GL_RGB_FLOAT16_APPLE = 0x881B;
export def GL_RGB_FLOAT16_ATI = 0x881B;
export def GL_ALPHA16F_ARB = 0x881C;
export def GL_ALPHA16F_EXT = 0x881C;
export def GL_ALPHA_FLOAT16_APPLE = 0x881C;
export def GL_ALPHA_FLOAT16_ATI = 0x881C;
export def GL_INTENSITY16F_ARB = 0x881D;
export def GL_INTENSITY_FLOAT16_APPLE = 0x881D;
export def GL_INTENSITY_FLOAT16_ATI = 0x881D;
export def GL_LUMINANCE16F_ARB = 0x881E;
export def GL_LUMINANCE16F_EXT = 0x881E;
export def GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
export def GL_LUMINANCE_FLOAT16_ATI = 0x881E;
export def GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
export def GL_LUMINANCE_ALPHA16F_EXT = 0x881F;
export def GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
export def GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
export def GL_RGBA_FLOAT_MODE_ARB = 0x8820;
export def GL_RGBA_FLOAT_MODE_ATI = 0x8820;
export def GL_WRITEONLY_RENDERING_QCOM = 0x8823;
export def GL_MAX_DRAW_BUFFERS = 0x8824;
export def GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
export def GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
export def GL_MAX_DRAW_BUFFERS_EXT = 0x8824;
export def GL_MAX_DRAW_BUFFERS_NV = 0x8824;
export def GL_DRAW_BUFFER0 = 0x8825;
export def GL_DRAW_BUFFER0_ARB = 0x8825;
export def GL_DRAW_BUFFER0_ATI = 0x8825;
export def GL_DRAW_BUFFER0_EXT = 0x8825;
export def GL_DRAW_BUFFER0_NV = 0x8825;
export def GL_DRAW_BUFFER1 = 0x8826;
export def GL_DRAW_BUFFER1_ARB = 0x8826;
export def GL_DRAW_BUFFER1_ATI = 0x8826;
export def GL_DRAW_BUFFER1_EXT = 0x8826;
export def GL_DRAW_BUFFER1_NV = 0x8826;
export def GL_DRAW_BUFFER2 = 0x8827;
export def GL_DRAW_BUFFER2_ARB = 0x8827;
export def GL_DRAW_BUFFER2_ATI = 0x8827;
export def GL_DRAW_BUFFER2_EXT = 0x8827;
export def GL_DRAW_BUFFER2_NV = 0x8827;
export def GL_DRAW_BUFFER3 = 0x8828;
export def GL_DRAW_BUFFER3_ARB = 0x8828;
export def GL_DRAW_BUFFER3_ATI = 0x8828;
export def GL_DRAW_BUFFER3_EXT = 0x8828;
export def GL_DRAW_BUFFER3_NV = 0x8828;
export def GL_DRAW_BUFFER4 = 0x8829;
export def GL_DRAW_BUFFER4_ARB = 0x8829;
export def GL_DRAW_BUFFER4_ATI = 0x8829;
export def GL_DRAW_BUFFER4_EXT = 0x8829;
export def GL_DRAW_BUFFER4_NV = 0x8829;
export def GL_DRAW_BUFFER5 = 0x882A;
export def GL_DRAW_BUFFER5_ARB = 0x882A;
export def GL_DRAW_BUFFER5_ATI = 0x882A;
export def GL_DRAW_BUFFER5_EXT = 0x882A;
export def GL_DRAW_BUFFER5_NV = 0x882A;
export def GL_DRAW_BUFFER6 = 0x882B;
export def GL_DRAW_BUFFER6_ARB = 0x882B;
export def GL_DRAW_BUFFER6_ATI = 0x882B;
export def GL_DRAW_BUFFER6_EXT = 0x882B;
export def GL_DRAW_BUFFER6_NV = 0x882B;
export def GL_DRAW_BUFFER7 = 0x882C;
export def GL_DRAW_BUFFER7_ARB = 0x882C;
export def GL_DRAW_BUFFER7_ATI = 0x882C;
export def GL_DRAW_BUFFER7_EXT = 0x882C;
export def GL_DRAW_BUFFER7_NV = 0x882C;
export def GL_DRAW_BUFFER8 = 0x882D;
export def GL_DRAW_BUFFER8_ARB = 0x882D;
export def GL_DRAW_BUFFER8_ATI = 0x882D;
export def GL_DRAW_BUFFER8_EXT = 0x882D;
export def GL_DRAW_BUFFER8_NV = 0x882D;
export def GL_DRAW_BUFFER9 = 0x882E;
export def GL_DRAW_BUFFER9_ARB = 0x882E;
export def GL_DRAW_BUFFER9_ATI = 0x882E;
export def GL_DRAW_BUFFER9_EXT = 0x882E;
export def GL_DRAW_BUFFER9_NV = 0x882E;
export def GL_DRAW_BUFFER10 = 0x882F;
export def GL_DRAW_BUFFER10_ARB = 0x882F;
export def GL_DRAW_BUFFER10_ATI = 0x882F;
export def GL_DRAW_BUFFER10_EXT = 0x882F;
export def GL_DRAW_BUFFER10_NV = 0x882F;
export def GL_DRAW_BUFFER11 = 0x8830;
export def GL_DRAW_BUFFER11_ARB = 0x8830;
export def GL_DRAW_BUFFER11_ATI = 0x8830;
export def GL_DRAW_BUFFER11_EXT = 0x8830;
export def GL_DRAW_BUFFER11_NV = 0x8830;
export def GL_DRAW_BUFFER12 = 0x8831;
export def GL_DRAW_BUFFER12_ARB = 0x8831;
export def GL_DRAW_BUFFER12_ATI = 0x8831;
export def GL_DRAW_BUFFER12_EXT = 0x8831;
export def GL_DRAW_BUFFER12_NV = 0x8831;
export def GL_DRAW_BUFFER13 = 0x8832;
export def GL_DRAW_BUFFER13_ARB = 0x8832;
export def GL_DRAW_BUFFER13_ATI = 0x8832;
export def GL_DRAW_BUFFER13_EXT = 0x8832;
export def GL_DRAW_BUFFER13_NV = 0x8832;
export def GL_DRAW_BUFFER14 = 0x8833;
export def GL_DRAW_BUFFER14_ARB = 0x8833;
export def GL_DRAW_BUFFER14_ATI = 0x8833;
export def GL_DRAW_BUFFER14_EXT = 0x8833;
export def GL_DRAW_BUFFER14_NV = 0x8833;
export def GL_DRAW_BUFFER15 = 0x8834;
export def GL_DRAW_BUFFER15_ARB = 0x8834;
export def GL_DRAW_BUFFER15_ATI = 0x8834;
export def GL_DRAW_BUFFER15_EXT = 0x8834;
export def GL_DRAW_BUFFER15_NV = 0x8834;
export def GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
export def GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837;
export def GL_BLEND_EQUATION_ALPHA = 0x883D;
export def GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
export def GL_BLEND_EQUATION_ALPHA_OES = 0x883D;
export def GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
export def GL_MATRIX_PALETTE_ARB = 0x8840;
export def GL_MATRIX_PALETTE_OES = 0x8840;
export def GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
export def GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
export def GL_MAX_PALETTE_MATRICES_OES = 0x8842;
export def GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
export def GL_CURRENT_PALETTE_MATRIX_OES = 0x8843;
export def GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
export def GL_MATRIX_INDEX_ARRAY_OES = 0x8844;
export def GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
export def GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
export def GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846;
export def GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
export def GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847;
export def GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
export def GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848;
export def GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
export def GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849;
export def GL_TEXTURE_DEPTH_SIZE = 0x884A;
export def GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
export def GL_DEPTH_TEXTURE_MODE = 0x884B;
export def GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
export def GL_TEXTURE_COMPARE_MODE = 0x884C;
export def GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
export def GL_TEXTURE_COMPARE_MODE_EXT = 0x884C;
export def GL_TEXTURE_COMPARE_FUNC = 0x884D;
export def GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
export def GL_TEXTURE_COMPARE_FUNC_EXT = 0x884D;
export def GL_COMPARE_R_TO_TEXTURE = 0x884E;
export def GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
export def GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
export def GL_COMPARE_REF_TO_TEXTURE = 0x884E;
export def GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884E;
export def GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
export def GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
export def GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
export def GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
export def GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
export def GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
export def GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
export def GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
export def GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
export def GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
export def GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
export def GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
export def GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
export def GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
export def GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
export def GL_HILO8_NV = 0x885E;
export def GL_SIGNED_HILO8_NV = 0x885F;
export def GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
export def GL_POINT_SPRITE = 0x8861;
export def GL_POINT_SPRITE_ARB = 0x8861;
export def GL_POINT_SPRITE_NV = 0x8861;
export def GL_POINT_SPRITE_OES = 0x8861;
export def GL_COORD_REPLACE = 0x8862;
export def GL_COORD_REPLACE_ARB = 0x8862;
export def GL_COORD_REPLACE_NV = 0x8862;
export def GL_COORD_REPLACE_OES = 0x8862;
export def GL_POINT_SPRITE_R_MODE_NV = 0x8863;
export def GL_PIXEL_COUNTER_BITS_NV = 0x8864;
export def GL_QUERY_COUNTER_BITS = 0x8864;
export def GL_QUERY_COUNTER_BITS_ARB = 0x8864;
export def GL_QUERY_COUNTER_BITS_EXT = 0x8864;
export def GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
export def GL_CURRENT_QUERY = 0x8865;
export def GL_CURRENT_QUERY_ARB = 0x8865;
export def GL_CURRENT_QUERY_EXT = 0x8865;
export def GL_PIXEL_COUNT_NV = 0x8866;
export def GL_QUERY_RESULT = 0x8866;
export def GL_QUERY_RESULT_ARB = 0x8866;
export def GL_QUERY_RESULT_EXT = 0x8866;
export def GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
export def GL_QUERY_RESULT_AVAILABLE = 0x8867;
export def GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
export def GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
export def GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
export def GL_MAX_VERTEX_ATTRIBS = 0x8869;
export def GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
export def GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
export def GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
export def GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
export def GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C;
export def GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886C;
export def GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
export def GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D;
export def GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886D;
export def GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
export def GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
export def GL_FRAGMENT_PROGRAM_NV = 0x8870;
export def GL_MAX_TEXTURE_COORDS = 0x8871;
export def GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
export def GL_MAX_TEXTURE_COORDS_NV = 0x8871;
export def GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
export def GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
export def GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
export def GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
export def GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
export def GL_PROGRAM_ERROR_STRING_NV = 0x8874;
export def GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
export def GL_PROGRAM_FORMAT_ARB = 0x8876;
export def GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
export def GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
export def GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
export def GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
export def GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
export def GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
export def GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
export def GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F;
export def GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x887F;
export def GL_FLOAT_R_NV = 0x8880;
export def GL_FLOAT_RG_NV = 0x8881;
export def GL_FLOAT_RGB_NV = 0x8882;
export def GL_FLOAT_RGBA_NV = 0x8883;
export def GL_FLOAT_R16_NV = 0x8884;
export def GL_FLOAT_R32_NV = 0x8885;
export def GL_FLOAT_RG16_NV = 0x8886;
export def GL_FLOAT_RG32_NV = 0x8887;
export def GL_FLOAT_RGB16_NV = 0x8888;
export def GL_FLOAT_RGB32_NV = 0x8889;
export def GL_FLOAT_RGBA16_NV = 0x888A;
export def GL_FLOAT_RGBA32_NV = 0x888B;
export def GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
export def GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
export def GL_FLOAT_RGBA_MODE_NV = 0x888E;
export def GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
export def GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
export def GL_DEPTH_BOUNDS_EXT = 0x8891;
export def GL_ARRAY_BUFFER = 0x8892;
export def GL_ARRAY_BUFFER_ARB = 0x8892;
export def GL_ELEMENT_ARRAY_BUFFER = 0x8893;
export def GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
export def GL_ARRAY_BUFFER_BINDING = 0x8894;
export def GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
export def GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
export def GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
export def GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
export def GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
export def GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
export def GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
export def GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
export def GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
export def GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
export def GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
export def GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
export def GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
export def GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
export def GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
export def GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
export def GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
export def GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
export def GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
export def GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
export def GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
export def GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
export def GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E;
export def GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
export def GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
export def GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
export def GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
export def GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
export def GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
export def GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
export def GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
export def GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
export def GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
export def GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
export def GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
export def GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
export def GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
export def GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
export def GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
export def GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
export def GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
export def GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
export def GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
export def GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
export def GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
export def GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
export def GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
export def GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
export def GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
export def GL_READ_ONLY = 0x88B8;
export def GL_READ_ONLY_ARB = 0x88B8;
export def GL_WRITE_ONLY = 0x88B9;
export def GL_WRITE_ONLY_ARB = 0x88B9;
export def GL_WRITE_ONLY_OES = 0x88B9;
export def GL_READ_WRITE = 0x88BA;
export def GL_READ_WRITE_ARB = 0x88BA;
export def GL_BUFFER_ACCESS = 0x88BB;
export def GL_BUFFER_ACCESS_ARB = 0x88BB;
export def GL_BUFFER_ACCESS_OES = 0x88BB;
export def GL_BUFFER_MAPPED = 0x88BC;
export def GL_BUFFER_MAPPED_ARB = 0x88BC;
export def GL_BUFFER_MAPPED_OES = 0x88BC;
export def GL_BUFFER_MAP_POINTER = 0x88BD;
export def GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
export def GL_BUFFER_MAP_POINTER_OES = 0x88BD;
export def GL_WRITE_DISCARD_NV = 0x88BE;
export def GL_TIME_ELAPSED = 0x88BF;
export def GL_TIME_ELAPSED_EXT = 0x88BF;
export def GL_MATRIX0_ARB = 0x88C0;
export def GL_MATRIX1_ARB = 0x88C1;
export def GL_MATRIX2_ARB = 0x88C2;
export def GL_MATRIX3_ARB = 0x88C3;
export def GL_MATRIX4_ARB = 0x88C4;
export def GL_MATRIX5_ARB = 0x88C5;
export def GL_MATRIX6_ARB = 0x88C6;
export def GL_MATRIX7_ARB = 0x88C7;
export def GL_MATRIX8_ARB = 0x88C8;
export def GL_MATRIX9_ARB = 0x88C9;
export def GL_MATRIX10_ARB = 0x88CA;
export def GL_MATRIX11_ARB = 0x88CB;
export def GL_MATRIX12_ARB = 0x88CC;
export def GL_MATRIX13_ARB = 0x88CD;
export def GL_MATRIX14_ARB = 0x88CE;
export def GL_MATRIX15_ARB = 0x88CF;
export def GL_MATRIX16_ARB = 0x88D0;
export def GL_MATRIX17_ARB = 0x88D1;
export def GL_MATRIX18_ARB = 0x88D2;
export def GL_MATRIX19_ARB = 0x88D3;
export def GL_MATRIX20_ARB = 0x88D4;
export def GL_MATRIX21_ARB = 0x88D5;
export def GL_MATRIX22_ARB = 0x88D6;
export def GL_MATRIX23_ARB = 0x88D7;
export def GL_MATRIX24_ARB = 0x88D8;
export def GL_MATRIX25_ARB = 0x88D9;
export def GL_MATRIX26_ARB = 0x88DA;
export def GL_MATRIX27_ARB = 0x88DB;
export def GL_MATRIX28_ARB = 0x88DC;
export def GL_MATRIX29_ARB = 0x88DD;
export def GL_MATRIX30_ARB = 0x88DE;
export def GL_MATRIX31_ARB = 0x88DF;
export def GL_STREAM_DRAW = 0x88E0;
export def GL_STREAM_DRAW_ARB = 0x88E0;
export def GL_STREAM_READ = 0x88E1;
export def GL_STREAM_READ_ARB = 0x88E1;
export def GL_STREAM_COPY = 0x88E2;
export def GL_STREAM_COPY_ARB = 0x88E2;
export def GL_STATIC_DRAW = 0x88E4;
export def GL_STATIC_DRAW_ARB = 0x88E4;
export def GL_STATIC_READ = 0x88E5;
export def GL_STATIC_READ_ARB = 0x88E5;
export def GL_STATIC_COPY = 0x88E6;
export def GL_STATIC_COPY_ARB = 0x88E6;
export def GL_DYNAMIC_DRAW = 0x88E8;
export def GL_DYNAMIC_DRAW_ARB = 0x88E8;
export def GL_DYNAMIC_READ = 0x88E9;
export def GL_DYNAMIC_READ_ARB = 0x88E9;
export def GL_DYNAMIC_COPY = 0x88EA;
export def GL_DYNAMIC_COPY_ARB = 0x88EA;
export def GL_PIXEL_PACK_BUFFER = 0x88EB;
export def GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
export def GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
export def GL_PIXEL_PACK_BUFFER_NV = 0x88EB;
export def GL_PIXEL_UNPACK_BUFFER = 0x88EC;
export def GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
export def GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
export def GL_PIXEL_UNPACK_BUFFER_NV = 0x88EC;
export def GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
export def GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
export def GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
export def GL_PIXEL_PACK_BUFFER_BINDING_NV = 0x88ED;
export def GL_ETC1_SRGB8_NV = 0x88EE;
export def GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
export def GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
export def GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
export def GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 0x88EF;
export def GL_DEPTH24_STENCIL8 = 0x88F0;
export def GL_DEPTH24_STENCIL8_EXT = 0x88F0;
export def GL_DEPTH24_STENCIL8_OES = 0x88F0;
export def GL_TEXTURE_STENCIL_SIZE = 0x88F1;
export def GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
export def GL_STENCIL_TAG_BITS_EXT = 0x88F2;
export def GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
export def GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
export def GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
export def GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
export def GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
export def GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
export def GL_SRC1_COLOR = 0x88F9;
export def GL_SRC1_COLOR_EXT = 0x88F9;
export def GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
export def GL_ONE_MINUS_SRC1_COLOR_EXT = 0x88FA;
export def GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
export def GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x88FB;
export def GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
export def GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88FC;
export def GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
export def GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
export def GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
export def GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
export def GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
export def GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
export def GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE;
export def GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE;
export def GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
export def GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
export def GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
export def GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
export def GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
export def GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
export def GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
export def GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
export def GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
export def GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
export def GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
export def GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
export def GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
export def GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
export def GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
export def GL_SAMPLES_PASSED = 0x8914;
export def GL_SAMPLES_PASSED_ARB = 0x8914;
export def GL_GEOMETRY_VERTICES_OUT = 0x8916;
export def GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916;
export def GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916;
export def GL_GEOMETRY_INPUT_TYPE = 0x8917;
export def GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917;
export def GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917;
export def GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
export def GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918;
export def GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918;
export def GL_SAMPLER_BINDING = 0x8919;
export def GL_CLAMP_VERTEX_COLOR = 0x891A;
export def GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
export def GL_CLAMP_FRAGMENT_COLOR = 0x891B;
export def GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
export def GL_CLAMP_READ_COLOR = 0x891C;
export def GL_CLAMP_READ_COLOR_ARB = 0x891C;
export def GL_FIXED_ONLY = 0x891D;
export def GL_FIXED_ONLY_ARB = 0x891D;
export def GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
export def GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
export def GL_FRAGMENT_SHADER_ATI = 0x8920;
export def GL_REG_0_ATI = 0x8921;
export def GL_REG_1_ATI = 0x8922;
export def GL_REG_2_ATI = 0x8923;
export def GL_REG_3_ATI = 0x8924;
export def GL_REG_4_ATI = 0x8925;
export def GL_REG_5_ATI = 0x8926;
export def GL_REG_6_ATI = 0x8927;
export def GL_REG_7_ATI = 0x8928;
export def GL_REG_8_ATI = 0x8929;
export def GL_REG_9_ATI = 0x892A;
export def GL_REG_10_ATI = 0x892B;
export def GL_REG_11_ATI = 0x892C;
export def GL_REG_12_ATI = 0x892D;
export def GL_REG_13_ATI = 0x892E;
export def GL_REG_14_ATI = 0x892F;
export def GL_REG_15_ATI = 0x8930;
export def GL_REG_16_ATI = 0x8931;
export def GL_REG_17_ATI = 0x8932;
export def GL_REG_18_ATI = 0x8933;
export def GL_REG_19_ATI = 0x8934;
export def GL_REG_20_ATI = 0x8935;
export def GL_REG_21_ATI = 0x8936;
export def GL_REG_22_ATI = 0x8937;
export def GL_REG_23_ATI = 0x8938;
export def GL_REG_24_ATI = 0x8939;
export def GL_REG_25_ATI = 0x893A;
export def GL_REG_26_ATI = 0x893B;
export def GL_REG_27_ATI = 0x893C;
export def GL_REG_28_ATI = 0x893D;
export def GL_REG_29_ATI = 0x893E;
export def GL_REG_30_ATI = 0x893F;
export def GL_REG_31_ATI = 0x8940;
export def GL_CON_0_ATI = 0x8941;
export def GL_CON_1_ATI = 0x8942;
export def GL_CON_2_ATI = 0x8943;
export def GL_CON_3_ATI = 0x8944;
export def GL_CON_4_ATI = 0x8945;
export def GL_CON_5_ATI = 0x8946;
export def GL_CON_6_ATI = 0x8947;
export def GL_CON_7_ATI = 0x8948;
export def GL_CON_8_ATI = 0x8949;
export def GL_CON_9_ATI = 0x894A;
export def GL_CON_10_ATI = 0x894B;
export def GL_CON_11_ATI = 0x894C;
export def GL_CON_12_ATI = 0x894D;
export def GL_CON_13_ATI = 0x894E;
export def GL_CON_14_ATI = 0x894F;
export def GL_CON_15_ATI = 0x8950;
export def GL_CON_16_ATI = 0x8951;
export def GL_CON_17_ATI = 0x8952;
export def GL_CON_18_ATI = 0x8953;
export def GL_CON_19_ATI = 0x8954;
export def GL_CON_20_ATI = 0x8955;
export def GL_CON_21_ATI = 0x8956;
export def GL_CON_22_ATI = 0x8957;
export def GL_CON_23_ATI = 0x8958;
export def GL_CON_24_ATI = 0x8959;
export def GL_CON_25_ATI = 0x895A;
export def GL_CON_26_ATI = 0x895B;
export def GL_CON_27_ATI = 0x895C;
export def GL_CON_28_ATI = 0x895D;
export def GL_CON_29_ATI = 0x895E;
export def GL_CON_30_ATI = 0x895F;
export def GL_CON_31_ATI = 0x8960;
export def GL_MOV_ATI = 0x8961;
export def GL_ADD_ATI = 0x8963;
export def GL_MUL_ATI = 0x8964;
export def GL_SUB_ATI = 0x8965;
export def GL_DOT3_ATI = 0x8966;
export def GL_DOT4_ATI = 0x8967;
export def GL_MAD_ATI = 0x8968;
export def GL_LERP_ATI = 0x8969;
export def GL_CND_ATI = 0x896A;
export def GL_CND0_ATI = 0x896B;
export def GL_DOT2_ADD_ATI = 0x896C;
export def GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
export def GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
export def GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
export def GL_NUM_PASSES_ATI = 0x8970;
export def GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
export def GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
export def GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
export def GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
export def GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
export def GL_SWIZZLE_STR_ATI = 0x8976;
export def GL_SWIZZLE_STQ_ATI = 0x8977;
export def GL_SWIZZLE_STR_DR_ATI = 0x8978;
export def GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
export def GL_SWIZZLE_STRQ_ATI = 0x897A;
export def GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
export def GL_INTERLACE_OML = 0x8980;
export def GL_INTERLACE_READ_OML = 0x8981;
export def GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
export def GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
export def GL_PACK_RESAMPLE_OML = 0x8984;
export def GL_UNPACK_RESAMPLE_OML = 0x8985;
export def GL_RESAMPLE_REPLICATE_OML = 0x8986;
export def GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
export def GL_RESAMPLE_AVERAGE_OML = 0x8988;
export def GL_RESAMPLE_DECIMATE_OML = 0x8989;
export def GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A;
export def GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B;
export def GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C;
export def GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D;
export def GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E;
export def GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F;
export def GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
export def GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
export def GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
export def GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
export def GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
export def GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
export def GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
export def GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
export def GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
export def GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
export def GL_DRAW_PIXELS_APPLE = 0x8A0A;
export def GL_FENCE_APPLE = 0x8A0B;
export def GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
export def GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
export def GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
export def GL_COLOR_FLOAT_APPLE = 0x8A0F;
export def GL_UNIFORM_BUFFER = 0x8A11;
export def GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
export def GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
export def GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
export def GL_PACK_ROW_BYTES_APPLE = 0x8A15;
export def GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
export def GL_RELEASED_APPLE = 0x8A19;
export def GL_VOLATILE_APPLE = 0x8A1A;
export def GL_RETAINED_APPLE = 0x8A1B;
export def GL_UNDEFINED_APPLE = 0x8A1C;
export def GL_PURGEABLE_APPLE = 0x8A1D;
export def GL_RGB_422_APPLE = 0x8A1F;
export def GL_UNIFORM_BUFFER_BINDING = 0x8A28;
export def GL_UNIFORM_BUFFER_START = 0x8A29;
export def GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
export def GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
export def GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
export def GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C;
export def GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8A2C;
export def GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
export def GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
export def GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
export def GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
export def GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
export def GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
export def GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32;
export def GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8A32;
export def GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
export def GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
export def GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
export def GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
export def GL_UNIFORM_TYPE = 0x8A37;
export def GL_UNIFORM_SIZE = 0x8A38;
export def GL_UNIFORM_NAME_LENGTH = 0x8A39;
export def GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
export def GL_UNIFORM_OFFSET = 0x8A3B;
export def GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
export def GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
export def GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
export def GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
export def GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
export def GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
export def GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
export def GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
export def GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
export def GL_DECODE_EXT = 0x8A49;
export def GL_SKIP_DECODE_EXT = 0x8A4A;
export def GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
export def GL_RGB_RAW_422_APPLE = 0x8A51;
export def GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
export def GL_SYNC_OBJECT_APPLE = 0x8A53;
export def GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54;
export def GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55;
export def GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56;
export def GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57;
export def GL_FRAGMENT_SHADER = 0x8B30;
export def GL_FRAGMENT_SHADER_ARB = 0x8B30;
export def GL_VERTEX_SHADER = 0x8B31;
export def GL_VERTEX_SHADER_ARB = 0x8B31;
export def GL_PROGRAM_OBJECT_ARB = 0x8B40;
export def GL_PROGRAM_OBJECT_EXT = 0x8B40;
export def GL_SHADER_OBJECT_ARB = 0x8B48;
export def GL_SHADER_OBJECT_EXT = 0x8B48;
export def GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
export def GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
export def GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
export def GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
export def GL_MAX_VARYING_FLOATS = 0x8B4B;
export def GL_MAX_VARYING_COMPONENTS = 0x8B4B;
export def GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
export def GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
export def GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
export def GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
export def GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
export def GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
export def GL_OBJECT_TYPE_ARB = 0x8B4E;
export def GL_SHADER_TYPE = 0x8B4F;
export def GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
export def GL_FLOAT_VEC2 = 0x8B50;
export def GL_FLOAT_VEC2_ARB = 0x8B50;
export def GL_FLOAT_VEC3 = 0x8B51;
export def GL_FLOAT_VEC3_ARB = 0x8B51;
export def GL_FLOAT_VEC4 = 0x8B52;
export def GL_FLOAT_VEC4_ARB = 0x8B52;
export def GL_INT_VEC2 = 0x8B53;
export def GL_INT_VEC2_ARB = 0x8B53;
export def GL_INT_VEC3 = 0x8B54;
export def GL_INT_VEC3_ARB = 0x8B54;
export def GL_INT_VEC4 = 0x8B55;
export def GL_INT_VEC4_ARB = 0x8B55;
export def GL_BOOL = 0x8B56;
export def GL_BOOL_ARB = 0x8B56;
export def GL_BOOL_VEC2 = 0x8B57;
export def GL_BOOL_VEC2_ARB = 0x8B57;
export def GL_BOOL_VEC3 = 0x8B58;
export def GL_BOOL_VEC3_ARB = 0x8B58;
export def GL_BOOL_VEC4 = 0x8B59;
export def GL_BOOL_VEC4_ARB = 0x8B59;
export def GL_FLOAT_MAT2 = 0x8B5A;
export def GL_FLOAT_MAT2_ARB = 0x8B5A;
export def GL_FLOAT_MAT3 = 0x8B5B;
export def GL_FLOAT_MAT3_ARB = 0x8B5B;
export def GL_FLOAT_MAT4 = 0x8B5C;
export def GL_FLOAT_MAT4_ARB = 0x8B5C;
export def GL_SAMPLER_1D = 0x8B5D;
export def GL_SAMPLER_1D_ARB = 0x8B5D;
export def GL_SAMPLER_2D = 0x8B5E;
export def GL_SAMPLER_2D_ARB = 0x8B5E;
export def GL_SAMPLER_3D = 0x8B5F;
export def GL_SAMPLER_3D_ARB = 0x8B5F;
export def GL_SAMPLER_3D_OES = 0x8B5F;
export def GL_SAMPLER_CUBE = 0x8B60;
export def GL_SAMPLER_CUBE_ARB = 0x8B60;
export def GL_SAMPLER_1D_SHADOW = 0x8B61;
export def GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
export def GL_SAMPLER_2D_SHADOW = 0x8B62;
export def GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
export def GL_SAMPLER_2D_SHADOW_EXT = 0x8B62;
export def GL_SAMPLER_2D_RECT = 0x8B63;
export def GL_SAMPLER_2D_RECT_ARB = 0x8B63;
export def GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
export def GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
export def GL_FLOAT_MAT2x3 = 0x8B65;
export def GL_FLOAT_MAT2x3_NV = 0x8B65;
export def GL_FLOAT_MAT2x4 = 0x8B66;
export def GL_FLOAT_MAT2x4_NV = 0x8B66;
export def GL_FLOAT_MAT3x2 = 0x8B67;
export def GL_FLOAT_MAT3x2_NV = 0x8B67;
export def GL_FLOAT_MAT3x4 = 0x8B68;
export def GL_FLOAT_MAT3x4_NV = 0x8B68;
export def GL_FLOAT_MAT4x2 = 0x8B69;
export def GL_FLOAT_MAT4x2_NV = 0x8B69;
export def GL_FLOAT_MAT4x3 = 0x8B6A;
export def GL_FLOAT_MAT4x3_NV = 0x8B6A;
export def GL_DELETE_STATUS = 0x8B80;
export def GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
export def GL_COMPILE_STATUS = 0x8B81;
export def GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
export def GL_LINK_STATUS = 0x8B82;
export def GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
export def GL_VALIDATE_STATUS = 0x8B83;
export def GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
export def GL_INFO_LOG_LENGTH = 0x8B84;
export def GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
export def GL_ATTACHED_SHADERS = 0x8B85;
export def GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
export def GL_ACTIVE_UNIFORMS = 0x8B86;
export def GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
export def GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
export def GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
export def GL_SHADER_SOURCE_LENGTH = 0x8B88;
export def GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
export def GL_ACTIVE_ATTRIBUTES = 0x8B89;
export def GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
export def GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
export def GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
export def GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
export def GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
export def GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
export def GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
export def GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
export def GL_CURRENT_PROGRAM = 0x8B8D;
export def GL_PALETTE4_RGB8_OES = 0x8B90;
export def GL_PALETTE4_RGBA8_OES = 0x8B91;
export def GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
export def GL_PALETTE4_RGBA4_OES = 0x8B93;
export def GL_PALETTE4_RGB5_A1_OES = 0x8B94;
export def GL_PALETTE8_RGB8_OES = 0x8B95;
export def GL_PALETTE8_RGBA8_OES = 0x8B96;
export def GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
export def GL_PALETTE8_RGBA4_OES = 0x8B98;
export def GL_PALETTE8_RGB5_A1_OES = 0x8B99;
export def GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
export def GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
export def GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
export def GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
export def GL_POINT_SIZE_ARRAY_OES = 0x8B9C;
export def GL_TEXTURE_CROP_RECT_OES = 0x8B9D;
export def GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E;
export def GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F;
export def GL_FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0;
export def GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1;
export def GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2;
export def GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3;
export def GL_VERTEX_PROGRAM_POSITION_MESA = 0x8BB4;
export def GL_VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB5;
export def GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6;
export def GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7;
export def GL_TILE_RASTER_ORDER_FIXED_MESA = 0x8BB8;
export def GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 0x8BB9;
export def GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 0x8BBA;
export def GL_FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB;
export def GL_FRAMEBUFFER_FLIP_X_MESA = 0x8BBC;
export def GL_FRAMEBUFFER_SWAP_XY_MESA = 0x8BBD;
export def GL_COUNTER_TYPE_AMD = 0x8BC0;
export def GL_COUNTER_RANGE_AMD = 0x8BC1;
export def GL_UNSIGNED_INT64_AMD = 0x8BC2;
export def GL_PERCENTAGE_AMD = 0x8BC3;
export def GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
export def GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
export def GL_PERFMON_RESULT_AMD = 0x8BC6;
export def GL_TEXTURE_WIDTH_QCOM = 0x8BD2;
export def GL_TEXTURE_HEIGHT_QCOM = 0x8BD3;
export def GL_TEXTURE_DEPTH_QCOM = 0x8BD4;
export def GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
export def GL_TEXTURE_FORMAT_QCOM = 0x8BD6;
export def GL_TEXTURE_TYPE_QCOM = 0x8BD7;
export def GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
export def GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
export def GL_TEXTURE_TARGET_QCOM = 0x8BDA;
export def GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
export def GL_STATE_RESTORE = 0x8BDC;
export def GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8BE7;
export def GL_TEXTURE_PROTECTED_EXT = 0x8BFA;
export def GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 0x8BFB;
export def GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 0x8BFC;
export def GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 0x8BFD;
export def GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 0x8BFE;
export def GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 0x8BFF;
export def GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
export def GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
export def GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
export def GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
export def GL_MODULATE_COLOR_IMG = 0x8C04;
export def GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05;
export def GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06;
export def GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07;
export def GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08;
export def GL_ADD_BLEND_IMG = 0x8C09;
export def GL_SGX_BINARY_IMG = 0x8C0A;
export def GL_TEXTURE_RED_TYPE = 0x8C10;
export def GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
export def GL_TEXTURE_GREEN_TYPE = 0x8C11;
export def GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
export def GL_TEXTURE_BLUE_TYPE = 0x8C12;
export def GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
export def GL_TEXTURE_ALPHA_TYPE = 0x8C13;
export def GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
export def GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
export def GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
export def GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
export def GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
export def GL_TEXTURE_DEPTH_TYPE = 0x8C16;
export def GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
export def GL_UNSIGNED_NORMALIZED = 0x8C17;
export def GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
export def GL_UNSIGNED_NORMALIZED_EXT = 0x8C17;
export def GL_TEXTURE_1D_ARRAY = 0x8C18;
export def GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
export def GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
export def GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
export def GL_TEXTURE_2D_ARRAY = 0x8C1A;
export def GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
export def GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
export def GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
export def GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
export def GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
export def GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
export def GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
export def GL_GEOMETRY_PROGRAM_NV = 0x8C26;
export def GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
export def GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
export def GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
export def GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
export def GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
export def GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8C29;
export def GL_TEXTURE_BUFFER = 0x8C2A;
export def GL_TEXTURE_BUFFER_ARB = 0x8C2A;
export def GL_TEXTURE_BUFFER_EXT = 0x8C2A;
export def GL_TEXTURE_BUFFER_OES = 0x8C2A;
export def GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
export def GL_TEXTURE_BUFFER_BINDING_EXT = 0x8C2A;
export def GL_TEXTURE_BUFFER_BINDING_OES = 0x8C2A;
export def GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
export def GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
export def GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
export def GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x8C2B;
export def GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
export def GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
export def GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
export def GL_TEXTURE_BINDING_BUFFER_OES = 0x8C2C;
export def GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
export def GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
export def GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
export def GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8C2D;
export def GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
export def GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
export def GL_ANY_SAMPLES_PASSED = 0x8C2F;
export def GL_ANY_SAMPLES_PASSED_EXT = 0x8C2F;
export def GL_SAMPLE_SHADING = 0x8C36;
export def GL_SAMPLE_SHADING_ARB = 0x8C36;
export def GL_SAMPLE_SHADING_OES = 0x8C36;
export def GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
export def GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
export def GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37;
export def GL_R11F_G11F_B10F = 0x8C3A;
export def GL_R11F_G11F_B10F_APPLE = 0x8C3A;
export def GL_R11F_G11F_B10F_EXT = 0x8C3A;
export def GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
export def GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B;
export def GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
export def GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
export def GL_RGB9_E5 = 0x8C3D;
export def GL_RGB9_E5_APPLE = 0x8C3D;
export def GL_RGB9_E5_EXT = 0x8C3D;
export def GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
export def GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E;
export def GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
export def GL_TEXTURE_SHARED_SIZE = 0x8C3F;
export def GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
export def GL_SRGB = 0x8C40;
export def GL_SRGB_EXT = 0x8C40;
export def GL_SRGB8 = 0x8C41;
export def GL_SRGB8_EXT = 0x8C41;
export def GL_SRGB8_NV = 0x8C41;
export def GL_SRGB_ALPHA = 0x8C42;
export def GL_SRGB_ALPHA_EXT = 0x8C42;
export def GL_SRGB8_ALPHA8 = 0x8C43;
export def GL_SRGB8_ALPHA8_EXT = 0x8C43;
export def GL_SLUMINANCE_ALPHA = 0x8C44;
export def GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
export def GL_SLUMINANCE_ALPHA_NV = 0x8C44;
export def GL_SLUMINANCE8_ALPHA8 = 0x8C45;
export def GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
export def GL_SLUMINANCE8_ALPHA8_NV = 0x8C45;
export def GL_SLUMINANCE = 0x8C46;
export def GL_SLUMINANCE_EXT = 0x8C46;
export def GL_SLUMINANCE_NV = 0x8C46;
export def GL_SLUMINANCE8 = 0x8C47;
export def GL_SLUMINANCE8_EXT = 0x8C47;
export def GL_SLUMINANCE8_NV = 0x8C47;
export def GL_COMPRESSED_SRGB = 0x8C48;
export def GL_COMPRESSED_SRGB_EXT = 0x8C48;
export def GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
export def GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
export def GL_COMPRESSED_SLUMINANCE = 0x8C4A;
export def GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
export def GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
export def GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
export def GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
export def GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C;
export def GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
export def GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D;
export def GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
export def GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E;
export def GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
export def GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F;
export def GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
export def GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
export def GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
export def GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
export def GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
export def GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
export def GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
export def GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
export def GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
export def GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
export def GL_TEXTURE_COORD_NV = 0x8C79;
export def GL_CLIP_DISTANCE_NV = 0x8C7A;
export def GL_VERTEX_ID_NV = 0x8C7B;
export def GL_PRIMITIVE_ID_NV = 0x8C7C;
export def GL_GENERIC_ATTRIB_NV = 0x8C7D;
export def GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
export def GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
export def GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
export def GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
export def GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
export def GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
export def GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
export def GL_ACTIVE_VARYINGS_NV = 0x8C81;
export def GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
export def GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
export def GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
export def GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
export def GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
export def GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
export def GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
export def GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
export def GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
export def GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
export def GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
export def GL_PRIMITIVES_GENERATED = 0x8C87;
export def GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
export def GL_PRIMITIVES_GENERATED_NV = 0x8C87;
export def GL_PRIMITIVES_GENERATED_OES = 0x8C87;
export def GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
export def GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
export def GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
export def GL_RASTERIZER_DISCARD = 0x8C89;
export def GL_RASTERIZER_DISCARD_EXT = 0x8C89;
export def GL_RASTERIZER_DISCARD_NV = 0x8C89;
export def GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
export def GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
export def GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
export def GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
export def GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
export def GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
export def GL_INTERLEAVED_ATTRIBS = 0x8C8C;
export def GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
export def GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
export def GL_SEPARATE_ATTRIBS = 0x8C8D;
export def GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
export def GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
export def GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
export def GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
export def GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
export def GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
export def GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
export def GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
export def GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x8C90;
export def GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x8C91;
export def GL_ATC_RGB_AMD = 0x8C92;
export def GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
export def GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
export def GL_LOWER_LEFT = 0x8CA1;
export def GL_LOWER_LEFT_EXT = 0x8CA1;
export def GL_UPPER_LEFT = 0x8CA2;
export def GL_UPPER_LEFT_EXT = 0x8CA2;
export def GL_STENCIL_BACK_REF = 0x8CA3;
export def GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
export def GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
export def GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
export def GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
export def GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
export def GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
export def GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6;
export def GL_FRAMEBUFFER_BINDING = 0x8CA6;
export def GL_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
export def GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
export def GL_FRAMEBUFFER_BINDING_OES = 0x8CA6;
export def GL_RENDERBUFFER_BINDING = 0x8CA7;
export def GL_RENDERBUFFER_BINDING_ANGLE = 0x8CA7;
export def GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
export def GL_RENDERBUFFER_BINDING_OES = 0x8CA7;
export def GL_READ_FRAMEBUFFER = 0x8CA8;
export def GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8;
export def GL_READ_FRAMEBUFFER_APPLE = 0x8CA8;
export def GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
export def GL_READ_FRAMEBUFFER_NV = 0x8CA8;
export def GL_DRAW_FRAMEBUFFER = 0x8CA9;
export def GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9;
export def GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
export def GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
export def GL_DRAW_FRAMEBUFFER_NV = 0x8CA9;
export def GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
export def GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA;
export def GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;
export def GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
export def GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAA;
export def GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
export def GL_RENDERBUFFER_SAMPLES = 0x8CAB;
export def GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB;
export def GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
export def GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
export def GL_RENDERBUFFER_SAMPLES_NV = 0x8CAB;
export def GL_DEPTH_COMPONENT32F = 0x8CAC;
export def GL_DEPTH32F_STENCIL8 = 0x8CAD;
export def GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
export def GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
export def GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0;
export def GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
export def GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
export def GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
export def GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
export def GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
export def GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5;
export def GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
export def GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
export def GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6;
export def GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
export def GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
export def GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7;
export def GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
export def GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
export def GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9;
export def GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
export def GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA;
export def GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
export def GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
export def GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDB;
export def GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
export def GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
export def GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDC;
export def GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
export def GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
export def GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD;
export def GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
export def GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
export def GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDF;
export def GL_COLOR_ATTACHMENT0 = 0x8CE0;
export def GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
export def GL_COLOR_ATTACHMENT0_NV = 0x8CE0;
export def GL_COLOR_ATTACHMENT0_OES = 0x8CE0;
export def GL_COLOR_ATTACHMENT1 = 0x8CE1;
export def GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
export def GL_COLOR_ATTACHMENT1_NV = 0x8CE1;
export def GL_COLOR_ATTACHMENT2 = 0x8CE2;
export def GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
export def GL_COLOR_ATTACHMENT2_NV = 0x8CE2;
export def GL_COLOR_ATTACHMENT3 = 0x8CE3;
export def GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
export def GL_COLOR_ATTACHMENT3_NV = 0x8CE3;
export def GL_COLOR_ATTACHMENT4 = 0x8CE4;
export def GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
export def GL_COLOR_ATTACHMENT4_NV = 0x8CE4;
export def GL_COLOR_ATTACHMENT5 = 0x8CE5;
export def GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
export def GL_COLOR_ATTACHMENT5_NV = 0x8CE5;
export def GL_COLOR_ATTACHMENT6 = 0x8CE6;
export def GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
export def GL_COLOR_ATTACHMENT6_NV = 0x8CE6;
export def GL_COLOR_ATTACHMENT7 = 0x8CE7;
export def GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
export def GL_COLOR_ATTACHMENT7_NV = 0x8CE7;
export def GL_COLOR_ATTACHMENT8 = 0x8CE8;
export def GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
export def GL_COLOR_ATTACHMENT8_NV = 0x8CE8;
export def GL_COLOR_ATTACHMENT9 = 0x8CE9;
export def GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
export def GL_COLOR_ATTACHMENT9_NV = 0x8CE9;
export def GL_COLOR_ATTACHMENT10 = 0x8CEA;
export def GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
export def GL_COLOR_ATTACHMENT10_NV = 0x8CEA;
export def GL_COLOR_ATTACHMENT11 = 0x8CEB;
export def GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
export def GL_COLOR_ATTACHMENT11_NV = 0x8CEB;
export def GL_COLOR_ATTACHMENT12 = 0x8CEC;
export def GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
export def GL_COLOR_ATTACHMENT12_NV = 0x8CEC;
export def GL_COLOR_ATTACHMENT13 = 0x8CED;
export def GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
export def GL_COLOR_ATTACHMENT13_NV = 0x8CED;
export def GL_COLOR_ATTACHMENT14 = 0x8CEE;
export def GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
export def GL_COLOR_ATTACHMENT14_NV = 0x8CEE;
export def GL_COLOR_ATTACHMENT15 = 0x8CEF;
export def GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
export def GL_COLOR_ATTACHMENT15_NV = 0x8CEF;
export def GL_COLOR_ATTACHMENT16 = 0x8CF0;
export def GL_COLOR_ATTACHMENT17 = 0x8CF1;
export def GL_COLOR_ATTACHMENT18 = 0x8CF2;
export def GL_COLOR_ATTACHMENT19 = 0x8CF3;
export def GL_COLOR_ATTACHMENT20 = 0x8CF4;
export def GL_COLOR_ATTACHMENT21 = 0x8CF5;
export def GL_COLOR_ATTACHMENT22 = 0x8CF6;
export def GL_COLOR_ATTACHMENT23 = 0x8CF7;
export def GL_COLOR_ATTACHMENT24 = 0x8CF8;
export def GL_COLOR_ATTACHMENT25 = 0x8CF9;
export def GL_COLOR_ATTACHMENT26 = 0x8CFA;
export def GL_COLOR_ATTACHMENT27 = 0x8CFB;
export def GL_COLOR_ATTACHMENT28 = 0x8CFC;
export def GL_COLOR_ATTACHMENT29 = 0x8CFD;
export def GL_COLOR_ATTACHMENT30 = 0x8CFE;
export def GL_COLOR_ATTACHMENT31 = 0x8CFF;
export def GL_DEPTH_ATTACHMENT = 0x8D00;
export def GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
export def GL_DEPTH_ATTACHMENT_OES = 0x8D00;
export def GL_STENCIL_ATTACHMENT = 0x8D20;
export def GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
export def GL_STENCIL_ATTACHMENT_OES = 0x8D20;
export def GL_FRAMEBUFFER = 0x8D40;
export def GL_FRAMEBUFFER_EXT = 0x8D40;
export def GL_FRAMEBUFFER_OES = 0x8D40;
export def GL_RENDERBUFFER = 0x8D41;
export def GL_RENDERBUFFER_EXT = 0x8D41;
export def GL_RENDERBUFFER_OES = 0x8D41;
export def GL_RENDERBUFFER_WIDTH = 0x8D42;
export def GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
export def GL_RENDERBUFFER_WIDTH_OES = 0x8D42;
export def GL_RENDERBUFFER_HEIGHT = 0x8D43;
export def GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
export def GL_RENDERBUFFER_HEIGHT_OES = 0x8D43;
export def GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
export def GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
export def GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44;
export def GL_STENCIL_INDEX1 = 0x8D46;
export def GL_STENCIL_INDEX1_EXT = 0x8D46;
export def GL_STENCIL_INDEX1_OES = 0x8D46;
export def GL_STENCIL_INDEX4 = 0x8D47;
export def GL_STENCIL_INDEX4_EXT = 0x8D47;
export def GL_STENCIL_INDEX4_OES = 0x8D47;
export def GL_STENCIL_INDEX8 = 0x8D48;
export def GL_STENCIL_INDEX8_EXT = 0x8D48;
export def GL_STENCIL_INDEX8_OES = 0x8D48;
export def GL_STENCIL_INDEX16 = 0x8D49;
export def GL_STENCIL_INDEX16_EXT = 0x8D49;
export def GL_RENDERBUFFER_RED_SIZE = 0x8D50;
export def GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
export def GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50;
export def GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
export def GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
export def GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51;
export def GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
export def GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
export def GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52;
export def GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
export def GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
export def GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53;
export def GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
export def GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
export def GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54;
export def GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
export def GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
export def GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56;
export def GL_MAX_SAMPLES = 0x8D57;
export def GL_MAX_SAMPLES_ANGLE = 0x8D57;
export def GL_MAX_SAMPLES_APPLE = 0x8D57;
export def GL_MAX_SAMPLES_EXT = 0x8D57;
export def GL_MAX_SAMPLES_NV = 0x8D57;
export def GL_TEXTURE_GEN_STR_OES = 0x8D60;
export def GL_HALF_FLOAT_OES = 0x8D61;
export def GL_RGB565_OES = 0x8D62;
export def GL_RGB565 = 0x8D62;
export def GL_ETC1_RGB8_OES = 0x8D64;
export def GL_TEXTURE_EXTERNAL_OES = 0x8D65;
export def GL_SAMPLER_EXTERNAL_OES = 0x8D66;
export def GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
export def GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;
export def GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
export def GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
export def GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A;
export def GL_MAX_ELEMENT_INDEX = 0x8D6B;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
export def GL_RGBA32UI = 0x8D70;
export def GL_RGBA32UI_EXT = 0x8D70;
export def GL_RGB32UI = 0x8D71;
export def GL_RGB32UI_EXT = 0x8D71;
export def GL_ALPHA32UI_EXT = 0x8D72;
export def GL_INTENSITY32UI_EXT = 0x8D73;
export def GL_LUMINANCE32UI_EXT = 0x8D74;
export def GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
export def GL_RGBA16UI = 0x8D76;
export def GL_RGBA16UI_EXT = 0x8D76;
export def GL_RGB16UI = 0x8D77;
export def GL_RGB16UI_EXT = 0x8D77;
export def GL_ALPHA16UI_EXT = 0x8D78;
export def GL_INTENSITY16UI_EXT = 0x8D79;
export def GL_LUMINANCE16UI_EXT = 0x8D7A;
export def GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
export def GL_RGBA8UI = 0x8D7C;
export def GL_RGBA8UI_EXT = 0x8D7C;
export def GL_RGB8UI = 0x8D7D;
export def GL_RGB8UI_EXT = 0x8D7D;
export def GL_ALPHA8UI_EXT = 0x8D7E;
export def GL_INTENSITY8UI_EXT = 0x8D7F;
export def GL_LUMINANCE8UI_EXT = 0x8D80;
export def GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
export def GL_RGBA32I = 0x8D82;
export def GL_RGBA32I_EXT = 0x8D82;
export def GL_RGB32I = 0x8D83;
export def GL_RGB32I_EXT = 0x8D83;
export def GL_ALPHA32I_EXT = 0x8D84;
export def GL_INTENSITY32I_EXT = 0x8D85;
export def GL_LUMINANCE32I_EXT = 0x8D86;
export def GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
export def GL_RGBA16I = 0x8D88;
export def GL_RGBA16I_EXT = 0x8D88;
export def GL_RGB16I = 0x8D89;
export def GL_RGB16I_EXT = 0x8D89;
export def GL_ALPHA16I_EXT = 0x8D8A;
export def GL_INTENSITY16I_EXT = 0x8D8B;
export def GL_LUMINANCE16I_EXT = 0x8D8C;
export def GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
export def GL_RGBA8I = 0x8D8E;
export def GL_RGBA8I_EXT = 0x8D8E;
export def GL_RGB8I = 0x8D8F;
export def GL_RGB8I_EXT = 0x8D8F;
export def GL_ALPHA8I_EXT = 0x8D90;
export def GL_INTENSITY8I_EXT = 0x8D91;
export def GL_LUMINANCE8I_EXT = 0x8D92;
export def GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
export def GL_RED_INTEGER = 0x8D94;
export def GL_RED_INTEGER_EXT = 0x8D94;
export def GL_GREEN_INTEGER = 0x8D95;
export def GL_GREEN_INTEGER_EXT = 0x8D95;
export def GL_BLUE_INTEGER = 0x8D96;
export def GL_BLUE_INTEGER_EXT = 0x8D96;
export def GL_ALPHA_INTEGER = 0x8D97;
export def GL_ALPHA_INTEGER_EXT = 0x8D97;
export def GL_RGB_INTEGER = 0x8D98;
export def GL_RGB_INTEGER_EXT = 0x8D98;
export def GL_RGBA_INTEGER = 0x8D99;
export def GL_RGBA_INTEGER_EXT = 0x8D99;
export def GL_BGR_INTEGER = 0x8D9A;
export def GL_BGR_INTEGER_EXT = 0x8D9A;
export def GL_BGRA_INTEGER = 0x8D9B;
export def GL_BGRA_INTEGER_EXT = 0x8D9B;
export def GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
export def GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
export def GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
export def GL_INT_2_10_10_10_REV = 0x8D9F;
export def GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
export def GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
export def GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
export def GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
export def GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
export def GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
export def GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
export def GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
export def GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
export def GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
export def GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7;
export def GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
export def GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
export def GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
export def GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8DA8;
export def GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
export def GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
export def GL_LAYER_NV = 0x8DAA;
export def GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
export def GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
export def GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
export def GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
export def GL_SHADER_INCLUDE_ARB = 0x8DAE;
export def GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
export def GL_FRAMEBUFFER_SRGB = 0x8DB9;
export def GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
export def GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
export def GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
export def GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
export def GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
export def GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
export def GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
export def GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
export def GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
export def GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
export def GL_SAMPLER_1D_ARRAY = 0x8DC0;
export def GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
export def GL_SAMPLER_2D_ARRAY = 0x8DC1;
export def GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
export def GL_SAMPLER_BUFFER = 0x8DC2;
export def GL_SAMPLER_BUFFER_EXT = 0x8DC2;
export def GL_SAMPLER_BUFFER_OES = 0x8DC2;
export def GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
export def GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
export def GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
export def GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
export def GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x8DC4;
export def GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
export def GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
export def GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5;
export def GL_UNSIGNED_INT_VEC2 = 0x8DC6;
export def GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
export def GL_UNSIGNED_INT_VEC3 = 0x8DC7;
export def GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
export def GL_UNSIGNED_INT_VEC4 = 0x8DC8;
export def GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
export def GL_INT_SAMPLER_1D = 0x8DC9;
export def GL_INT_SAMPLER_1D_EXT = 0x8DC9;
export def GL_INT_SAMPLER_2D = 0x8DCA;
export def GL_INT_SAMPLER_2D_EXT = 0x8DCA;
export def GL_INT_SAMPLER_3D = 0x8DCB;
export def GL_INT_SAMPLER_3D_EXT = 0x8DCB;
export def GL_INT_SAMPLER_CUBE = 0x8DCC;
export def GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
export def GL_INT_SAMPLER_2D_RECT = 0x8DCD;
export def GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
export def GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
export def GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
export def GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
export def GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
export def GL_INT_SAMPLER_BUFFER = 0x8DD0;
export def GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
export def GL_INT_SAMPLER_BUFFER_OES = 0x8DD0;
export def GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
export def GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
export def GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
export def GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
export def GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
export def GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
export def GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
export def GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
export def GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
export def GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
export def GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
export def GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
export def GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
export def GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
export def GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
export def GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
export def GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8DD8;
export def GL_GEOMETRY_SHADER = 0x8DD9;
export def GL_GEOMETRY_SHADER_ARB = 0x8DD9;
export def GL_GEOMETRY_SHADER_EXT = 0x8DD9;
export def GL_GEOMETRY_SHADER_OES = 0x8DD9;
export def GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
export def GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
export def GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
export def GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
export def GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
export def GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
export def GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
export def GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
export def GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
export def GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
export def GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
export def GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
export def GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
export def GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8DDF;
export def GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
export def GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
export def GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
export def GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8DE0;
export def GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
export def GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
export def GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
export def GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8DE1;
export def GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
export def GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
export def GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
export def GL_ACTIVE_SUBROUTINES = 0x8DE5;
export def GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
export def GL_MAX_SUBROUTINES = 0x8DE7;
export def GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
export def GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
export def GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
export def GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
export def GL_UNIFORM_BUFFER_EXT = 0x8DEE;
export def GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
export def GL_LOW_FLOAT = 0x8DF0;
export def GL_MEDIUM_FLOAT = 0x8DF1;
export def GL_HIGH_FLOAT = 0x8DF2;
export def GL_LOW_INT = 0x8DF3;
export def GL_MEDIUM_INT = 0x8DF4;
export def GL_HIGH_INT = 0x8DF5;
export def GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6;
export def GL_INT_10_10_10_2_OES = 0x8DF7;
export def GL_SHADER_BINARY_FORMATS = 0x8DF8;
export def GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
export def GL_SHADER_COMPILER = 0x8DFA;
export def GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
export def GL_MAX_VARYING_VECTORS = 0x8DFC;
export def GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
export def GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
export def GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
export def GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
export def GL_QUERY_WAIT = 0x8E13;
export def GL_QUERY_WAIT_NV = 0x8E13;
export def GL_QUERY_NO_WAIT = 0x8E14;
export def GL_QUERY_NO_WAIT_NV = 0x8E14;
export def GL_QUERY_BY_REGION_WAIT = 0x8E15;
export def GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
export def GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
export def GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
export def GL_QUERY_WAIT_INVERTED = 0x8E17;
export def GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
export def GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
export def GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
export def GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
export def GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
export def GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
export def GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E;
export def GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E1E;
export def GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
export def GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F;
export def GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E1F;
export def GL_COLOR_SAMPLES_NV = 0x8E20;
export def GL_TRANSFORM_FEEDBACK = 0x8E22;
export def GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
export def GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
export def GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
export def GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
export def GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
export def GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
export def GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
export def GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
export def GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
export def GL_FRAME_NV = 0x8E26;
export def GL_FIELDS_NV = 0x8E27;
export def GL_CURRENT_TIME_NV = 0x8E28;
export def GL_TIMESTAMP = 0x8E28;
export def GL_TIMESTAMP_EXT = 0x8E28;
export def GL_NUM_FILL_STREAMS_NV = 0x8E29;
export def GL_PRESENT_TIME_NV = 0x8E2A;
export def GL_PRESENT_DURATION_NV = 0x8E2B;
export def GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C;
export def GL_PROGRAM_MATRIX_EXT = 0x8E2D;
export def GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
export def GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
export def GL_TEXTURE_SWIZZLE_R = 0x8E42;
export def GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
export def GL_TEXTURE_SWIZZLE_G = 0x8E43;
export def GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
export def GL_TEXTURE_SWIZZLE_B = 0x8E44;
export def GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
export def GL_TEXTURE_SWIZZLE_A = 0x8E45;
export def GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
export def GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
export def GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
export def GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
export def GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
export def GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
export def GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
export def GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
export def GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
export def GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
export def GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
export def GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
export def GL_FIRST_VERTEX_CONVENTION_OES = 0x8E4D;
export def GL_LAST_VERTEX_CONVENTION = 0x8E4E;
export def GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
export def GL_LAST_VERTEX_CONVENTION_OES = 0x8E4E;
export def GL_PROVOKING_VERTEX = 0x8E4F;
export def GL_PROVOKING_VERTEX_EXT = 0x8E4F;
export def GL_SAMPLE_POSITION = 0x8E50;
export def GL_SAMPLE_POSITION_NV = 0x8E50;
export def GL_SAMPLE_LOCATION_ARB = 0x8E50;
export def GL_SAMPLE_LOCATION_NV = 0x8E50;
export def GL_SAMPLE_MASK = 0x8E51;
export def GL_SAMPLE_MASK_NV = 0x8E51;
export def GL_SAMPLE_MASK_VALUE = 0x8E52;
export def GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
export def GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
export def GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
export def GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
export def GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
export def GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
export def GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
export def GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
export def GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
export def GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
export def GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
export def GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A;
export def GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8E5A;
export def GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
export def GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B;
export def GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
export def GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
export def GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C;
export def GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
export def GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
export def GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D;
export def GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
export def GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
export def GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
export def GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
export def GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
export def GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
export def GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
export def GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;
export def GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;
export def GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;
export def GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;
export def GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;
export def GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;
export def GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;
export def GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;
export def GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;
export def GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;
export def GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;
export def GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;
export def GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;
export def GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;
export def GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;
export def GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;
export def GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
export def GL_MAX_VERTEX_STREAMS = 0x8E71;
export def GL_PATCH_VERTICES = 0x8E72;
export def GL_PATCH_VERTICES_EXT = 0x8E72;
export def GL_PATCH_VERTICES_OES = 0x8E72;
export def GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
export def GL_PATCH_DEFAULT_INNER_LEVEL_EXT = 0x8E73;
export def GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
export def GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = 0x8E74;
export def GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
export def GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75;
export def GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8E75;
export def GL_TESS_GEN_MODE = 0x8E76;
export def GL_TESS_GEN_MODE_EXT = 0x8E76;
export def GL_TESS_GEN_MODE_OES = 0x8E76;
export def GL_TESS_GEN_SPACING = 0x8E77;
export def GL_TESS_GEN_SPACING_EXT = 0x8E77;
export def GL_TESS_GEN_SPACING_OES = 0x8E77;
export def GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
export def GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78;
export def GL_TESS_GEN_VERTEX_ORDER_OES = 0x8E78;
export def GL_TESS_GEN_POINT_MODE = 0x8E79;
export def GL_TESS_GEN_POINT_MODE_EXT = 0x8E79;
export def GL_TESS_GEN_POINT_MODE_OES = 0x8E79;
export def GL_ISOLINES = 0x8E7A;
export def GL_ISOLINES_EXT = 0x8E7A;
export def GL_ISOLINES_OES = 0x8E7A;
export def GL_FRACTIONAL_ODD = 0x8E7B;
export def GL_FRACTIONAL_ODD_EXT = 0x8E7B;
export def GL_FRACTIONAL_ODD_OES = 0x8E7B;
export def GL_FRACTIONAL_EVEN = 0x8E7C;
export def GL_FRACTIONAL_EVEN_EXT = 0x8E7C;
export def GL_FRACTIONAL_EVEN_OES = 0x8E7C;
export def GL_MAX_PATCH_VERTICES = 0x8E7D;
export def GL_MAX_PATCH_VERTICES_EXT = 0x8E7D;
export def GL_MAX_PATCH_VERTICES_OES = 0x8E7D;
export def GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
export def GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7E;
export def GL_MAX_TESS_GEN_LEVEL_OES = 0x8E7E;
export def GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
export def GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F;
export def GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E7F;
export def GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
export def GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80;
export def GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E80;
export def GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
export def GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81;
export def GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8E81;
export def GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
export def GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82;
export def GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8E82;
export def GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
export def GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83;
export def GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8E83;
export def GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
export def GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84;
export def GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x8E84;
export def GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
export def GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85;
export def GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8E85;
export def GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
export def GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86;
export def GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8E86;
export def GL_TESS_EVALUATION_SHADER = 0x8E87;
export def GL_TESS_EVALUATION_SHADER_EXT = 0x8E87;
export def GL_TESS_EVALUATION_SHADER_OES = 0x8E87;
export def GL_TESS_CONTROL_SHADER = 0x8E88;
export def GL_TESS_CONTROL_SHADER_EXT = 0x8E88;
export def GL_TESS_CONTROL_SHADER_OES = 0x8E88;
export def GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
export def GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89;
export def GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8E89;
export def GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
export def GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A;
export def GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8E8A;
export def GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
export def GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
export def GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
export def GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
export def GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
export def GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
export def GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
export def GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
export def GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
export def GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
export def GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
export def GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
export def GL_TRP_IMG = 0x8EA0;
export def GL_TRP_ERROR_CONTEXT_RESET_IMG = 0x8EA1;
export def GL_TRP_UNSUPPORTED_CONTEXT_IMG = 0x8EA2;
export def GL_PVRIC_SIGNATURE_MISMATCH_IMG = 0x8EA3;
export def GL_COVERAGE_COMPONENT_NV = 0x8ED0;
export def GL_COVERAGE_COMPONENT4_NV = 0x8ED1;
export def GL_COVERAGE_ATTACHMENT_NV = 0x8ED2;
export def GL_COVERAGE_BUFFERS_NV = 0x8ED3;
export def GL_COVERAGE_SAMPLES_NV = 0x8ED4;
export def GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5;
export def GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6;
export def GL_COVERAGE_AUTOMATIC_NV = 0x8ED7;
export def GL_INCLUSIVE_EXT = 0x8F10;
export def GL_EXCLUSIVE_EXT = 0x8F11;
export def GL_WINDOW_RECTANGLE_EXT = 0x8F12;
export def GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
export def GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
export def GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
export def GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
export def GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
export def GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
export def GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
export def GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
export def GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
export def GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
export def GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
export def GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
export def GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
export def GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
export def GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
export def GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
export def GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
export def GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
export def GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
export def GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
export def GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
export def GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
export def GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
export def GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
export def GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
export def GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
export def GL_GPU_ADDRESS_NV = 0x8F34;
export def GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
export def GL_COPY_READ_BUFFER = 0x8F36;
export def GL_COPY_READ_BUFFER_NV = 0x8F36;
export def GL_COPY_READ_BUFFER_BINDING = 0x8F36;
export def GL_COPY_WRITE_BUFFER = 0x8F37;
export def GL_COPY_WRITE_BUFFER_NV = 0x8F37;
export def GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
export def GL_MAX_IMAGE_UNITS = 0x8F38;
export def GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
export def GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
export def GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
export def GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
export def GL_IMAGE_BINDING_NAME = 0x8F3A;
export def GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
export def GL_IMAGE_BINDING_LEVEL = 0x8F3B;
export def GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
export def GL_IMAGE_BINDING_LAYERED = 0x8F3C;
export def GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
export def GL_IMAGE_BINDING_LAYER = 0x8F3D;
export def GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
export def GL_IMAGE_BINDING_ACCESS = 0x8F3E;
export def GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
export def GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
export def GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
export def GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
export def GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
export def GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
export def GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
export def GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
export def GL_DOUBLE_MAT2 = 0x8F46;
export def GL_DOUBLE_MAT2_EXT = 0x8F46;
export def GL_DOUBLE_MAT3 = 0x8F47;
export def GL_DOUBLE_MAT3_EXT = 0x8F47;
export def GL_DOUBLE_MAT4 = 0x8F48;
export def GL_DOUBLE_MAT4_EXT = 0x8F48;
export def GL_DOUBLE_MAT2x3 = 0x8F49;
export def GL_DOUBLE_MAT2x3_EXT = 0x8F49;
export def GL_DOUBLE_MAT2x4 = 0x8F4A;
export def GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
export def GL_DOUBLE_MAT3x2 = 0x8F4B;
export def GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
export def GL_DOUBLE_MAT3x4 = 0x8F4C;
export def GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
export def GL_DOUBLE_MAT4x2 = 0x8F4D;
export def GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
export def GL_DOUBLE_MAT4x3 = 0x8F4E;
export def GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
export def GL_VERTEX_BINDING_BUFFER = 0x8F4F;
export def GL_MALI_SHADER_BINARY_ARM = 0x8F60;
export def GL_MALI_PROGRAM_BINARY_ARM = 0x8F61;
export def GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63;
export def GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8F64;
export def GL_FETCH_PER_SAMPLE_ARM = 0x8F65;
export def GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66;
export def GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67;
export def GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x8F69;
export def GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A;
export def GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT = 0x8F6E;
export def GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 0x8F6F;
export def GL_RED_SNORM = 0x8F90;
export def GL_RG_SNORM = 0x8F91;
export def GL_RGB_SNORM = 0x8F92;
export def GL_RGBA_SNORM = 0x8F93;
export def GL_R8_SNORM = 0x8F94;
export def GL_RG8_SNORM = 0x8F95;
export def GL_RGB8_SNORM = 0x8F96;
export def GL_RGBA8_SNORM = 0x8F97;
export def GL_R16_SNORM = 0x8F98;
export def GL_R16_SNORM_EXT = 0x8F98;
export def GL_RG16_SNORM = 0x8F99;
export def GL_RG16_SNORM_EXT = 0x8F99;
export def GL_RGB16_SNORM = 0x8F9A;
export def GL_RGB16_SNORM_EXT = 0x8F9A;
export def GL_RGBA16_SNORM = 0x8F9B;
export def GL_RGBA16_SNORM_EXT = 0x8F9B;
export def GL_SIGNED_NORMALIZED = 0x8F9C;
export def GL_PRIMITIVE_RESTART = 0x8F9D;
export def GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
export def GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
export def GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;
export def GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 0x8FA1;
export def GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
export def GL_CPU_OPTIMIZED_QCOM = 0x8FB1;
export def GL_GPU_OPTIMIZED_QCOM = 0x8FB2;
export def GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3;
export def GL_GPU_DISJOINT_EXT = 0x8FBB;
export def GL_SR8_EXT = 0x8FBD;
export def GL_SRG8_EXT = 0x8FBE;
export def GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 0x8FBF;
export def GL_SHADER_BINARY_VIV = 0x8FC4;
export def GL_INT8_NV = 0x8FE0;
export def GL_INT8_VEC2_NV = 0x8FE1;
export def GL_INT8_VEC3_NV = 0x8FE2;
export def GL_INT8_VEC4_NV = 0x8FE3;
export def GL_INT16_NV = 0x8FE4;
export def GL_INT16_VEC2_NV = 0x8FE5;
export def GL_INT16_VEC3_NV = 0x8FE6;
export def GL_INT16_VEC4_NV = 0x8FE7;
export def GL_INT64_VEC2_ARB = 0x8FE9;
export def GL_INT64_VEC2_NV = 0x8FE9;
export def GL_INT64_VEC3_ARB = 0x8FEA;
export def GL_INT64_VEC3_NV = 0x8FEA;
export def GL_INT64_VEC4_ARB = 0x8FEB;
export def GL_INT64_VEC4_NV = 0x8FEB;
export def GL_UNSIGNED_INT8_NV = 0x8FEC;
export def GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
export def GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
export def GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
export def GL_UNSIGNED_INT16_NV = 0x8FF0;
export def GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
export def GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
export def GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
export def GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
export def GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
export def GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
export def GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
export def GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
export def GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
export def GL_FLOAT16_NV = 0x8FF8;
export def GL_FLOAT16_VEC2_NV = 0x8FF9;
export def GL_FLOAT16_VEC3_NV = 0x8FFA;
export def GL_FLOAT16_VEC4_NV = 0x8FFB;
export def GL_DOUBLE_VEC2 = 0x8FFC;
export def GL_DOUBLE_VEC2_EXT = 0x8FFC;
export def GL_DOUBLE_VEC3 = 0x8FFD;
export def GL_DOUBLE_VEC3_EXT = 0x8FFD;
export def GL_DOUBLE_VEC4 = 0x8FFE;
export def GL_DOUBLE_VEC4_EXT = 0x8FFE;
export def GL_SAMPLER_BUFFER_AMD = 0x9001;
export def GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
export def GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
export def GL_TESSELLATION_MODE_AMD = 0x9004;
export def GL_TESSELLATION_FACTOR_AMD = 0x9005;
export def GL_DISCRETE_AMD = 0x9006;
export def GL_CONTINUOUS_AMD = 0x9007;
export def GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
export def GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
export def GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009;
export def GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009;
export def GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
export def GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
export def GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A;
export def GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900A;
export def GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
export def GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
export def GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
export def GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
export def GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C;
export def GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900C;
export def GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
export def GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
export def GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D;
export def GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900D;
export def GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
export def GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
export def GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E;
export def GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900E;
export def GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
export def GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
export def GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F;
export def GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900F;
export def GL_ALPHA_SNORM = 0x9010;
export def GL_LUMINANCE_SNORM = 0x9011;
export def GL_LUMINANCE_ALPHA_SNORM = 0x9012;
export def GL_INTENSITY_SNORM = 0x9013;
export def GL_ALPHA8_SNORM = 0x9014;
export def GL_LUMINANCE8_SNORM = 0x9015;
export def GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
export def GL_INTENSITY8_SNORM = 0x9017;
export def GL_ALPHA16_SNORM = 0x9018;
export def GL_LUMINANCE16_SNORM = 0x9019;
export def GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
export def GL_INTENSITY16_SNORM = 0x901B;
export def GL_FACTOR_MIN_AMD = 0x901C;
export def GL_FACTOR_MAX_AMD = 0x901D;
export def GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
export def GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
export def GL_VIDEO_BUFFER_NV = 0x9020;
export def GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
export def GL_FIELD_UPPER_NV = 0x9022;
export def GL_FIELD_LOWER_NV = 0x9023;
export def GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
export def GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
export def GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
export def GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
export def GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
export def GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
export def GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
export def GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
export def GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
export def GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
export def GL_PARTIAL_SUCCESS_NV = 0x902E;
export def GL_SUCCESS_NV = 0x902F;
export def GL_FAILURE_NV = 0x9030;
export def GL_YCBYCR8_422_NV = 0x9031;
export def GL_YCBAYCR8A_4224_NV = 0x9032;
export def GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
export def GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
export def GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
export def GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
export def GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
export def GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
export def GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
export def GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
export def GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
export def GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
export def GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
export def GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
export def GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
export def GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
export def GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
export def GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
export def GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
export def GL_IMAGE_1D = 0x904C;
export def GL_IMAGE_1D_EXT = 0x904C;
export def GL_IMAGE_2D = 0x904D;
export def GL_IMAGE_2D_EXT = 0x904D;
export def GL_IMAGE_3D = 0x904E;
export def GL_IMAGE_3D_EXT = 0x904E;
export def GL_IMAGE_2D_RECT = 0x904F;
export def GL_IMAGE_2D_RECT_EXT = 0x904F;
export def GL_IMAGE_CUBE = 0x9050;
export def GL_IMAGE_CUBE_EXT = 0x9050;
export def GL_IMAGE_BUFFER = 0x9051;
export def GL_IMAGE_BUFFER_EXT = 0x9051;
export def GL_IMAGE_BUFFER_OES = 0x9051;
export def GL_IMAGE_1D_ARRAY = 0x9052;
export def GL_IMAGE_1D_ARRAY_EXT = 0x9052;
export def GL_IMAGE_2D_ARRAY = 0x9053;
export def GL_IMAGE_2D_ARRAY_EXT = 0x9053;
export def GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
export def GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
export def GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x9054;
export def GL_IMAGE_2D_MULTISAMPLE = 0x9055;
export def GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
export def GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
export def GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
export def GL_INT_IMAGE_1D = 0x9057;
export def GL_INT_IMAGE_1D_EXT = 0x9057;
export def GL_INT_IMAGE_2D = 0x9058;
export def GL_INT_IMAGE_2D_EXT = 0x9058;
export def GL_INT_IMAGE_3D = 0x9059;
export def GL_INT_IMAGE_3D_EXT = 0x9059;
export def GL_INT_IMAGE_2D_RECT = 0x905A;
export def GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
export def GL_INT_IMAGE_CUBE = 0x905B;
export def GL_INT_IMAGE_CUBE_EXT = 0x905B;
export def GL_INT_IMAGE_BUFFER = 0x905C;
export def GL_INT_IMAGE_BUFFER_EXT = 0x905C;
export def GL_INT_IMAGE_BUFFER_OES = 0x905C;
export def GL_INT_IMAGE_1D_ARRAY = 0x905D;
export def GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
export def GL_INT_IMAGE_2D_ARRAY = 0x905E;
export def GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
export def GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
export def GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
export def GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905F;
export def GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
export def GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
export def GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
export def GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
export def GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
export def GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
export def GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
export def GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
export def GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
export def GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
export def GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
export def GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
export def GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
export def GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
export def GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
export def GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
export def GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067;
export def GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
export def GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
export def GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
export def GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
export def GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
export def GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
export def GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906A;
export def GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
export def GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
export def GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
export def GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
export def GL_MAX_IMAGE_SAMPLES = 0x906D;
export def GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
export def GL_IMAGE_BINDING_FORMAT = 0x906E;
export def GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
export def GL_RGB10_A2UI = 0x906F;
export def GL_PATH_FORMAT_SVG_NV = 0x9070;
export def GL_PATH_FORMAT_PS_NV = 0x9071;
export def GL_STANDARD_FONT_NAME_NV = 0x9072;
export def GL_SYSTEM_FONT_NAME_NV = 0x9073;
export def GL_FILE_NAME_NV = 0x9074;
export def GL_PATH_STROKE_WIDTH_NV = 0x9075;
export def GL_PATH_END_CAPS_NV = 0x9076;
export def GL_PATH_INITIAL_END_CAP_NV = 0x9077;
export def GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
export def GL_PATH_JOIN_STYLE_NV = 0x9079;
export def GL_PATH_MITER_LIMIT_NV = 0x907A;
export def GL_PATH_DASH_CAPS_NV = 0x907B;
export def GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
export def GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
export def GL_PATH_DASH_OFFSET_NV = 0x907E;
export def GL_PATH_CLIENT_LENGTH_NV = 0x907F;
export def GL_PATH_FILL_MODE_NV = 0x9080;
export def GL_PATH_FILL_MASK_NV = 0x9081;
export def GL_PATH_FILL_COVER_MODE_NV = 0x9082;
export def GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
export def GL_PATH_STROKE_MASK_NV = 0x9084;
export def GL_COUNT_UP_NV = 0x9088;
export def GL_COUNT_DOWN_NV = 0x9089;
export def GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
export def GL_CONVEX_HULL_NV = 0x908B;
export def GL_BOUNDING_BOX_NV = 0x908D;
export def GL_TRANSLATE_X_NV = 0x908E;
export def GL_TRANSLATE_Y_NV = 0x908F;
export def GL_TRANSLATE_2D_NV = 0x9090;
export def GL_TRANSLATE_3D_NV = 0x9091;
export def GL_AFFINE_2D_NV = 0x9092;
export def GL_AFFINE_3D_NV = 0x9094;
export def GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
export def GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
export def GL_UTF8_NV = 0x909A;
export def GL_UTF16_NV = 0x909B;
export def GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
export def GL_PATH_COMMAND_COUNT_NV = 0x909D;
export def GL_PATH_COORD_COUNT_NV = 0x909E;
export def GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
export def GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
export def GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
export def GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
export def GL_SQUARE_NV = 0x90A3;
export def GL_ROUND_NV = 0x90A4;
export def GL_TRIANGULAR_NV = 0x90A5;
export def GL_BEVEL_NV = 0x90A6;
export def GL_MITER_REVERT_NV = 0x90A7;
export def GL_MITER_TRUNCATE_NV = 0x90A8;
export def GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
export def GL_USE_MISSING_GLYPH_NV = 0x90AA;
export def GL_PATH_ERROR_POSITION_NV = 0x90AB;
export def GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
export def GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
export def GL_ADJACENT_PAIRS_NV = 0x90AE;
export def GL_FIRST_TO_REST_NV = 0x90AF;
export def GL_PATH_GEN_MODE_NV = 0x90B0;
export def GL_PATH_GEN_COEFF_NV = 0x90B1;
export def GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
export def GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
export def GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
export def GL_MOVE_TO_RESETS_NV = 0x90B5;
export def GL_MOVE_TO_CONTINUES_NV = 0x90B6;
export def GL_PATH_STENCIL_FUNC_NV = 0x90B7;
export def GL_PATH_STENCIL_REF_NV = 0x90B8;
export def GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
export def GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
export def GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
export def GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
export def GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
export def GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
export def GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
export def GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
export def GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
export def GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
export def GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
export def GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
export def GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB;
export def GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90CB;
export def GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
export def GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC;
export def GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90CC;
export def GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
export def GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD;
export def GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90CD;
export def GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
export def GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
export def GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
export def GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
export def GL_SHADER_STORAGE_BUFFER = 0x90D2;
export def GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
export def GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
export def GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
export def GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
export def GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
export def GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7;
export def GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90D7;
export def GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
export def GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8;
export def GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90D8;
export def GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
export def GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9;
export def GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90D9;
export def GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
export def GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
export def GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
export def GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
export def GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
export def GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
export def GL_SYNC_X11_FENCE_EXT = 0x90E1;
export def GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
export def GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
export def GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
export def GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
export def GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
export def GL_COLOR_ATTACHMENT_EXT = 0x90F0;
export def GL_MULTIVIEW_EXT = 0x90F1;
export def GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2;
export def GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
export def GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3;
export def GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
export def GL_COMPUTE_PROGRAM_NV = 0x90FB;
export def GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
export def GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
export def GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
export def GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
export def GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102;
export def GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
export def GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
export def GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
export def GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105;
export def GL_TEXTURE_SAMPLES = 0x9106;
export def GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
export def GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
export def GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
export def GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
export def GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
export def GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B;
export def GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
export def GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C;
export def GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
export def GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D;
export def GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
export def GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
export def GL_MAX_INTEGER_SAMPLES = 0x9110;
export def GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
export def GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111;
export def GL_OBJECT_TYPE = 0x9112;
export def GL_OBJECT_TYPE_APPLE = 0x9112;
export def GL_SYNC_CONDITION = 0x9113;
export def GL_SYNC_CONDITION_APPLE = 0x9113;
export def GL_SYNC_STATUS = 0x9114;
export def GL_SYNC_STATUS_APPLE = 0x9114;
export def GL_SYNC_FLAGS = 0x9115;
export def GL_SYNC_FLAGS_APPLE = 0x9115;
export def GL_SYNC_FENCE = 0x9116;
export def GL_SYNC_FENCE_APPLE = 0x9116;
export def GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
export def GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117;
export def GL_UNSIGNALED = 0x9118;
export def GL_UNSIGNALED_APPLE = 0x9118;
export def GL_SIGNALED = 0x9119;
export def GL_SIGNALED_APPLE = 0x9119;
export def GL_ALREADY_SIGNALED = 0x911A;
export def GL_ALREADY_SIGNALED_APPLE = 0x911A;
export def GL_TIMEOUT_EXPIRED = 0x911B;
export def GL_TIMEOUT_EXPIRED_APPLE = 0x911B;
export def GL_CONDITION_SATISFIED = 0x911C;
export def GL_CONDITION_SATISFIED_APPLE = 0x911C;
export def GL_WAIT_FAILED = 0x911D;
export def GL_WAIT_FAILED_APPLE = 0x911D;
export def GL_BUFFER_ACCESS_FLAGS = 0x911F;
export def GL_BUFFER_MAP_LENGTH = 0x9120;
export def GL_BUFFER_MAP_OFFSET = 0x9121;
export def GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
export def GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
export def GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123;
export def GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123;
export def GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
export def GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124;
export def GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124;
export def GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
export def GL_CONTEXT_PROFILE_MASK = 0x9126;
export def GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
export def GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
export def GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
export def GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
export def GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
export def GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
export def GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
export def GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
export def GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
export def GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F;
export def GL_SGX_PROGRAM_BINARY_IMG = 0x9130;
export def GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
export def GL_MAX_SAMPLES_IMG = 0x9135;
export def GL_TEXTURE_SAMPLES_IMG = 0x9136;
export def GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137;
export def GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138;
export def GL_CUBIC_IMG = 0x9139;
export def GL_CUBIC_MIPMAP_NEAREST_IMG = 0x913A;
export def GL_CUBIC_MIPMAP_LINEAR_IMG = 0x913B;
export def GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913C;
export def GL_NUM_DOWNSAMPLE_SCALES_IMG = 0x913D;
export def GL_DOWNSAMPLE_SCALES_IMG = 0x913E;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F;
export def GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
export def GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
export def GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
export def GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
export def GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
export def GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
export def GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
export def GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
export def GL_DEBUG_LOGGED_MESSAGES = 0x9145;
export def GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
export def GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
export def GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
export def GL_DEBUG_SEVERITY_HIGH = 0x9146;
export def GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
export def GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
export def GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
export def GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
export def GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
export def GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
export def GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
export def GL_DEBUG_SEVERITY_LOW = 0x9148;
export def GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
export def GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
export def GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
export def GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
export def GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
export def GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
export def GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
export def GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
export def GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
export def GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
export def GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
export def GL_BUFFER_OBJECT_EXT = 0x9151;
export def GL_DATA_BUFFER_AMD = 0x9151;
export def GL_PERFORMANCE_MONITOR_AMD = 0x9152;
export def GL_QUERY_OBJECT_AMD = 0x9153;
export def GL_QUERY_OBJECT_EXT = 0x9153;
export def GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
export def GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
export def GL_SAMPLER_OBJECT_AMD = 0x9155;
export def GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
export def GL_QUERY_BUFFER = 0x9192;
export def GL_QUERY_BUFFER_AMD = 0x9192;
export def GL_QUERY_BUFFER_BINDING = 0x9193;
export def GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
export def GL_QUERY_RESULT_NO_WAIT = 0x9194;
export def GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
export def GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
export def GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x9195;
export def GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
export def GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
export def GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196;
export def GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
export def GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
export def GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197;
export def GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
export def GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
export def GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198;
export def GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
export def GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
export def GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199;
export def GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
export def GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
export def GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
export def GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919A;
export def GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
export def GL_MIN_LOD_WARNING_AMD = 0x919C;
export def GL_TEXTURE_BUFFER_OFFSET = 0x919D;
export def GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919D;
export def GL_TEXTURE_BUFFER_OFFSET_OES = 0x919D;
export def GL_TEXTURE_BUFFER_SIZE = 0x919E;
export def GL_TEXTURE_BUFFER_SIZE_EXT = 0x919E;
export def GL_TEXTURE_BUFFER_SIZE_OES = 0x919E;
export def GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
export def GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F;
export def GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919F;
export def GL_STREAM_RASTERIZATION_AMD = 0x91A0;
export def GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
export def GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
export def GL_TEXTURE_SPARSE_ARB = 0x91A6;
export def GL_TEXTURE_SPARSE_EXT = 0x91A6;
export def GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
export def GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91A7;
export def GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
export def GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91A8;
export def GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
export def GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91A9;
export def GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
export def GL_NUM_SPARSE_LEVELS_EXT = 0x91AA;
export def GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE;
export def GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF;
export def GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
export def GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
export def GL_COMPLETION_STATUS_KHR = 0x91B1;
export def GL_COMPLETION_STATUS_ARB = 0x91B1;
export def GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;
export def GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;
export def GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;
export def GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;
export def GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;
export def GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;
export def GL_COMPUTE_SHADER = 0x91B9;
export def GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
export def GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
export def GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
export def GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
export def GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
export def GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
export def GL_FLOAT16_MAT2_AMD = 0x91C5;
export def GL_FLOAT16_MAT3_AMD = 0x91C6;
export def GL_FLOAT16_MAT4_AMD = 0x91C7;
export def GL_FLOAT16_MAT2x3_AMD = 0x91C8;
export def GL_FLOAT16_MAT2x4_AMD = 0x91C9;
export def GL_FLOAT16_MAT3x2_AMD = 0x91CA;
export def GL_FLOAT16_MAT3x4_AMD = 0x91CB;
export def GL_FLOAT16_MAT4x2_AMD = 0x91CC;
export def GL_FLOAT16_MAT4x3_AMD = 0x91CD;
export def GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
export def GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
export def GL_CONTEXT_LOST_WEBGL = 0x9242;
export def GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
export def GL_BROWSER_DEFAULT_WEBGL = 0x9244;
export def GL_UNMASKED_VENDOR_WEBGL = 0x9245;
export def GL_UNMASKED_RENDERER_WEBGL = 0x9246;
export def GL_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247;
export def GL_TEXTURE_VIDEO_IMAGE_WEBGL = 0x9248;
export def GL_SAMPLER_VIDEO_IMAGE_WEBGL = 0x9249;
export def GL_SHADER_BINARY_DMP = 0x9250;
export def GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x9251;
export def GL_SMAPHS_PROGRAM_BINARY_DMP = 0x9252;
export def GL_DMP_PROGRAM_BINARY_DMP = 0x9253;
export def GL_GCCSO_SHADER_BINARY_FJ = 0x9260;
export def GL_COMPRESSED_R11_EAC = 0x9270;
export def GL_COMPRESSED_R11_EAC_OES = 0x9270;
export def GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
export def GL_COMPRESSED_SIGNED_R11_EAC_OES = 0x9271;
export def GL_COMPRESSED_RG11_EAC = 0x9272;
export def GL_COMPRESSED_RG11_EAC_OES = 0x9272;
export def GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
export def GL_COMPRESSED_SIGNED_RG11_EAC_OES = 0x9273;
export def GL_COMPRESSED_RGB8_ETC2 = 0x9274;
export def GL_COMPRESSED_RGB8_ETC2_OES = 0x9274;
export def GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
export def GL_COMPRESSED_SRGB8_ETC2_OES = 0x9275;
export def GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
export def GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276;
export def GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
export def GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277;
export def GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
export def GL_COMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278;
export def GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
export def GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279;
export def GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
export def GL_BLEND_OVERLAP_NV = 0x9281;
export def GL_UNCORRELATED_NV = 0x9282;
export def GL_DISJOINT_NV = 0x9283;
export def GL_CONJOINT_NV = 0x9284;
export def GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
export def GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
export def GL_SRC_NV = 0x9286;
export def GL_DST_NV = 0x9287;
export def GL_SRC_OVER_NV = 0x9288;
export def GL_DST_OVER_NV = 0x9289;
export def GL_SRC_IN_NV = 0x928A;
export def GL_DST_IN_NV = 0x928B;
export def GL_SRC_OUT_NV = 0x928C;
export def GL_DST_OUT_NV = 0x928D;
export def GL_SRC_ATOP_NV = 0x928E;
export def GL_DST_ATOP_NV = 0x928F;
export def GL_PLUS_NV = 0x9291;
export def GL_PLUS_DARKER_NV = 0x9292;
export def GL_MULTIPLY = 0x9294;
export def GL_MULTIPLY_KHR = 0x9294;
export def GL_MULTIPLY_NV = 0x9294;
export def GL_SCREEN = 0x9295;
export def GL_SCREEN_KHR = 0x9295;
export def GL_SCREEN_NV = 0x9295;
export def GL_OVERLAY = 0x9296;
export def GL_OVERLAY_KHR = 0x9296;
export def GL_OVERLAY_NV = 0x9296;
export def GL_DARKEN = 0x9297;
export def GL_DARKEN_KHR = 0x9297;
export def GL_DARKEN_NV = 0x9297;
export def GL_LIGHTEN = 0x9298;
export def GL_LIGHTEN_KHR = 0x9298;
export def GL_LIGHTEN_NV = 0x9298;
export def GL_COLORDODGE = 0x9299;
export def GL_COLORDODGE_KHR = 0x9299;
export def GL_COLORDODGE_NV = 0x9299;
export def GL_COLORBURN = 0x929A;
export def GL_COLORBURN_KHR = 0x929A;
export def GL_COLORBURN_NV = 0x929A;
export def GL_HARDLIGHT = 0x929B;
export def GL_HARDLIGHT_KHR = 0x929B;
export def GL_HARDLIGHT_NV = 0x929B;
export def GL_SOFTLIGHT = 0x929C;
export def GL_SOFTLIGHT_KHR = 0x929C;
export def GL_SOFTLIGHT_NV = 0x929C;
export def GL_DIFFERENCE = 0x929E;
export def GL_DIFFERENCE_KHR = 0x929E;
export def GL_DIFFERENCE_NV = 0x929E;
export def GL_MINUS_NV = 0x929F;
export def GL_EXCLUSION = 0x92A0;
export def GL_EXCLUSION_KHR = 0x92A0;
export def GL_EXCLUSION_NV = 0x92A0;
export def GL_CONTRAST_NV = 0x92A1;
export def GL_INVERT_RGB_NV = 0x92A3;
export def GL_LINEARDODGE_NV = 0x92A4;
export def GL_LINEARBURN_NV = 0x92A5;
export def GL_VIVIDLIGHT_NV = 0x92A6;
export def GL_LINEARLIGHT_NV = 0x92A7;
export def GL_PINLIGHT_NV = 0x92A8;
export def GL_HARDMIX_NV = 0x92A9;
export def GL_HSL_HUE = 0x92AD;
export def GL_HSL_HUE_KHR = 0x92AD;
export def GL_HSL_HUE_NV = 0x92AD;
export def GL_HSL_SATURATION = 0x92AE;
export def GL_HSL_SATURATION_KHR = 0x92AE;
export def GL_HSL_SATURATION_NV = 0x92AE;
export def GL_HSL_COLOR = 0x92AF;
export def GL_HSL_COLOR_KHR = 0x92AF;
export def GL_HSL_COLOR_NV = 0x92AF;
export def GL_HSL_LUMINOSITY = 0x92B0;
export def GL_HSL_LUMINOSITY_KHR = 0x92B0;
export def GL_HSL_LUMINOSITY_NV = 0x92B0;
export def GL_PLUS_CLAMPED_NV = 0x92B1;
export def GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
export def GL_MINUS_CLAMPED_NV = 0x92B3;
export def GL_INVERT_OVG_NV = 0x92B4;
export def GL_MAX_LGPU_GPUS_NVX = 0x92BA;
export def GL_MULTICAST_GPUS_NV = 0x92BA;
export def GL_PURGED_CONTEXT_RESET_NV = 0x92BB;
export def GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
export def GL_PRIMITIVE_BOUNDING_BOX = 0x92BE;
export def GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE;
export def GL_PRIMITIVE_BOUNDING_BOX_OES = 0x92BE;
export def GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF;
export def GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
export def GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
export def GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
export def GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
export def GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
export def GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
export def GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
export def GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
export def GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
export def GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD;
export def GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92CD;
export def GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
export def GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE;
export def GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92CE;
export def GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
export def GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF;
export def GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92CF;
export def GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
export def GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
export def GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
export def GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
export def GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3;
export def GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92D3;
export def GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
export def GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4;
export def GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92D4;
export def GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
export def GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5;
export def GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92D5;
export def GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
export def GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
export def GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
export def GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
export def GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
export def GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
export def GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
export def GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
export def GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
export def GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;
export def GL_DEBUG_OUTPUT = 0x92E0;
export def GL_DEBUG_OUTPUT_KHR = 0x92E0;
export def GL_UNIFORM = 0x92E1;
export def GL_UNIFORM_BLOCK = 0x92E2;
export def GL_PROGRAM_INPUT = 0x92E3;
export def GL_PROGRAM_OUTPUT = 0x92E4;
export def GL_BUFFER_VARIABLE = 0x92E5;
export def GL_SHADER_STORAGE_BLOCK = 0x92E6;
export def GL_IS_PER_PATCH = 0x92E7;
export def GL_IS_PER_PATCH_EXT = 0x92E7;
export def GL_IS_PER_PATCH_OES = 0x92E7;
export def GL_VERTEX_SUBROUTINE = 0x92E8;
export def GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
export def GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
export def GL_GEOMETRY_SUBROUTINE = 0x92EB;
export def GL_FRAGMENT_SUBROUTINE = 0x92EC;
export def GL_COMPUTE_SUBROUTINE = 0x92ED;
export def GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
export def GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
export def GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
export def GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
export def GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
export def GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
export def GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
export def GL_ACTIVE_RESOURCES = 0x92F5;
export def GL_MAX_NAME_LENGTH = 0x92F6;
export def GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
export def GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
export def GL_NAME_LENGTH = 0x92F9;
export def GL_TYPE = 0x92FA;
export def GL_ARRAY_SIZE = 0x92FB;
export def GL_OFFSET = 0x92FC;
export def GL_BLOCK_INDEX = 0x92FD;
export def GL_ARRAY_STRIDE = 0x92FE;
export def GL_MATRIX_STRIDE = 0x92FF;
export def GL_IS_ROW_MAJOR = 0x9300;
export def GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
export def GL_BUFFER_BINDING = 0x9302;
export def GL_BUFFER_DATA_SIZE = 0x9303;
export def GL_NUM_ACTIVE_VARIABLES = 0x9304;
export def GL_ACTIVE_VARIABLES = 0x9305;
export def GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
export def GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
export def GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307;
export def GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307;
export def GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
export def GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308;
export def GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308;
export def GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
export def GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309;
export def GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309;
export def GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
export def GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
export def GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
export def GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
export def GL_LOCATION = 0x930E;
export def GL_LOCATION_INDEX = 0x930F;
export def GL_LOCATION_INDEX_EXT = 0x930F;
export def GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
export def GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
export def GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
export def GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312;
export def GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312;
export def GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
export def GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
export def GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
export def GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
export def GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
export def GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317;
export def GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x9317;
export def GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
export def GL_RASTER_MULTISAMPLE_EXT = 0x9327;
export def GL_RASTER_SAMPLES_EXT = 0x9328;
export def GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
export def GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
export def GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
export def GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
export def GL_DEPTH_SAMPLES_NV = 0x932D;
export def GL_STENCIL_SAMPLES_NV = 0x932E;
export def GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
export def GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
export def GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
export def GL_COVERAGE_MODULATION_NV = 0x9332;
export def GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
export def GL_WARP_SIZE_NV = 0x9339;
export def GL_WARPS_PER_SM_NV = 0x933A;
export def GL_SM_COUNT_NV = 0x933B;
export def GL_FILL_RECTANGLE_NV = 0x933C;
export def GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
export def GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
export def GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
export def GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
export def GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
export def GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
export def GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
export def GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
export def GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
export def GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
export def GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
export def GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
export def GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
export def GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
export def GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
export def GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
export def GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
export def GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
export def GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
export def GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
export def GL_LOCATION_COMPONENT = 0x934A;
export def GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
export def GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
export def GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D;
export def GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E;
export def GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F;
export def GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
export def GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
export def GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
export def GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
export def GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
export def GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
export def GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
export def GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
export def GL_VIEWPORT_SWIZZLE_X_NV = 0x9358;
export def GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359;
export def GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A;
export def GL_VIEWPORT_SWIZZLE_W_NV = 0x935B;
export def GL_CLIP_ORIGIN = 0x935C;
export def GL_CLIP_ORIGIN_EXT = 0x935C;
export def GL_CLIP_DEPTH_MODE = 0x935D;
export def GL_CLIP_DEPTH_MODE_EXT = 0x935D;
export def GL_NEGATIVE_ONE_TO_ONE = 0x935E;
export def GL_NEGATIVE_ONE_TO_ONE_EXT = 0x935E;
export def GL_ZERO_TO_ONE = 0x935F;
export def GL_ZERO_TO_ONE_EXT = 0x935F;
export def GL_CLEAR_TEXTURE = 0x9365;
export def GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
export def GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366;
export def GL_WEIGHTED_AVERAGE_ARB = 0x9367;
export def GL_WEIGHTED_AVERAGE_EXT = 0x9367;
export def GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
export def GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
export def GL_FONT_UNAVAILABLE_NV = 0x936A;
export def GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
export def GL_STANDARD_FONT_FORMAT_NV = 0x936C;
export def GL_FRAGMENT_INPUT_NV = 0x936D;
export def GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
export def GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
export def GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
export def GL_MULTISAMPLES_NV = 0x9371;
export def GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
export def GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
export def GL_CONFORMANT_NV = 0x9374;
export def GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
export def GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
export def GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
export def GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
export def GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
export def GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
export def GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F;
export def GL_NUM_SAMPLE_COUNTS = 0x9380;
export def GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
export def GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381;
export def GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
export def GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382;
export def GL_VIEW_CLASS_EAC_R11 = 0x9383;
export def GL_VIEW_CLASS_EAC_RG11 = 0x9384;
export def GL_VIEW_CLASS_ETC2_RGB = 0x9385;
export def GL_VIEW_CLASS_ETC2_RGBA = 0x9386;
export def GL_VIEW_CLASS_ETC2_EAC_RGBA = 0x9387;
export def GL_VIEW_CLASS_ASTC_4x4_RGBA = 0x9388;
export def GL_VIEW_CLASS_ASTC_5x4_RGBA = 0x9389;
export def GL_VIEW_CLASS_ASTC_5x5_RGBA = 0x938A;
export def GL_VIEW_CLASS_ASTC_6x5_RGBA = 0x938B;
export def GL_VIEW_CLASS_ASTC_6x6_RGBA = 0x938C;
export def GL_VIEW_CLASS_ASTC_8x5_RGBA = 0x938D;
export def GL_VIEW_CLASS_ASTC_8x6_RGBA = 0x938E;
export def GL_VIEW_CLASS_ASTC_8x8_RGBA = 0x938F;
export def GL_VIEW_CLASS_ASTC_10x5_RGBA = 0x9390;
export def GL_VIEW_CLASS_ASTC_10x6_RGBA = 0x9391;
export def GL_VIEW_CLASS_ASTC_10x8_RGBA = 0x9392;
export def GL_VIEW_CLASS_ASTC_10x10_RGBA = 0x9393;
export def GL_VIEW_CLASS_ASTC_12x10_RGBA = 0x9394;
export def GL_VIEW_CLASS_ASTC_12x12_RGBA = 0x9395;
export def GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0;
export def GL_BGRA8_EXT = 0x93A1;
export def GL_TEXTURE_USAGE_ANGLE = 0x93A2;
export def GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3;
export def GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4;
export def GL_PROGRAM_BINARY_ANGLE = 0x93A6;
export def GL_COMPRESSED_RGBA_ASTC_4x4 = 0x93B0;
export def GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
export def GL_COMPRESSED_RGBA_ASTC_5x4 = 0x93B1;
export def GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
export def GL_COMPRESSED_RGBA_ASTC_5x5 = 0x93B2;
export def GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
export def GL_COMPRESSED_RGBA_ASTC_6x5 = 0x93B3;
export def GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
export def GL_COMPRESSED_RGBA_ASTC_6x6 = 0x93B4;
export def GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
export def GL_COMPRESSED_RGBA_ASTC_8x5 = 0x93B5;
export def GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
export def GL_COMPRESSED_RGBA_ASTC_8x6 = 0x93B6;
export def GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
export def GL_COMPRESSED_RGBA_ASTC_8x8 = 0x93B7;
export def GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
export def GL_COMPRESSED_RGBA_ASTC_10x5 = 0x93B8;
export def GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
export def GL_COMPRESSED_RGBA_ASTC_10x6 = 0x93B9;
export def GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
export def GL_COMPRESSED_RGBA_ASTC_10x8 = 0x93BA;
export def GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
export def GL_COMPRESSED_RGBA_ASTC_10x10 = 0x93BB;
export def GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
export def GL_COMPRESSED_RGBA_ASTC_12x10 = 0x93BC;
export def GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
export def GL_COMPRESSED_RGBA_ASTC_12x12 = 0x93BD;
export def GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
export def GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0;
export def GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1;
export def GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2;
export def GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3;
export def GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4;
export def GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5;
export def GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6;
export def GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7;
export def GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8;
export def GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8;
export def GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9;
export def GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0;
export def GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1;
export def GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
export def GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
export def GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
export def GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
export def GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
export def GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
export def GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
export def GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
export def GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
export def GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
export def GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
export def GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
export def GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
export def GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
export def GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
export def GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x9530;
export def GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x9531;
export def GL_SUBGROUP_SIZE_KHR = 0x9532;
export def GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533;
export def GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534;
export def GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535;
export def GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;
export def GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;
export def GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;
export def GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;
export def GL_MAX_TASK_OUTPUT_COUNT_NV = 0x953A;
export def GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;
export def GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;
export def GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;
export def GL_MESH_WORK_GROUP_SIZE_NV = 0x953E;
export def GL_TASK_WORK_GROUP_SIZE_NV = 0x953F;
export def GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540;
export def GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542;
export def GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;
export def GL_QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544;
export def GL_QUERY_RESOURCE_TEXTURE_NV = 0x9545;
export def GL_QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546;
export def GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547;
export def GL_PER_GPU_STORAGE_NV = 0x9548;
export def GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549;
export def GL_UPLOAD_GPU_MASK_NVX = 0x954A;
export def GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D;
export def GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
export def GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
export def GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550;
export def GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
export def GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
export def GL_SPIR_V_BINARY = 0x9552;
export def GL_SPIR_V_BINARY_ARB = 0x9552;
export def GL_SPIR_V_EXTENSIONS = 0x9553;
export def GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
export def GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x9555;
export def GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x9556;
export def GL_MAX_MESH_VIEWS_NV = 0x9557;
export def GL_RENDER_GPU_MASK_NV = 0x9558;
export def GL_MESH_SHADER_NV = 0x9559;
export def GL_TASK_SHADER_NV = 0x955A;
export def GL_SHADING_RATE_IMAGE_BINDING_NV = 0x955B;
export def GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;
export def GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;
export def GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;
export def GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;
export def GL_SHADING_RATE_IMAGE_NV = 0x9563;
export def GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;
export def GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;
export def GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;
export def GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;
export def GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;
export def GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;
export def GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;
export def GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;
export def GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;
export def GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;
export def GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;
export def GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;
export def GL_MESH_VERTICES_OUT_NV = 0x9579;
export def GL_MESH_PRIMITIVES_OUT_NV = 0x957A;
export def GL_MESH_OUTPUT_TYPE_NV = 0x957B;
export def GL_MESH_SUBROUTINE_NV = 0x957C;
export def GL_TASK_SUBROUTINE_NV = 0x957D;
export def GL_MESH_SUBROUTINE_UNIFORM_NV = 0x957E;
export def GL_TASK_SUBROUTINE_UNIFORM_NV = 0x957F;
export def GL_TEXTURE_TILING_EXT = 0x9580;
export def GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581;
export def GL_NUM_TILING_TYPES_EXT = 0x9582;
export def GL_TILING_TYPES_EXT = 0x9583;
export def GL_OPTIMAL_TILING_EXT = 0x9584;
export def GL_LINEAR_TILING_EXT = 0x9585;
export def GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586;
export def GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587;
export def GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588;
export def GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589;
export def GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A;
export def GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B;
export def GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C;
export def GL_LAYOUT_GENERAL_EXT = 0x958D;
export def GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E;
export def GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F;
export def GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590;
export def GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591;
export def GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592;
export def GL_LAYOUT_TRANSFER_DST_EXT = 0x9593;
export def GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594;
export def GL_D3D12_FENCE_VALUE_EXT = 0x9595;
export def GL_TIMELINE_SEMAPHORE_VALUE_NV = 0x9595;
export def GL_NUM_DEVICE_UUIDS_EXT = 0x9596;
export def GL_DEVICE_UUID_EXT = 0x9597;
export def GL_DRIVER_UUID_EXT = 0x9598;
export def GL_DEVICE_LUID_EXT = 0x9599;
export def GL_DEVICE_NODE_MASK_EXT = 0x959A;
export def GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959B;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;
export def GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;
export def GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;
export def GL_REFERENCED_BY_MESH_SHADER_NV = 0x95A0;
export def GL_REFERENCED_BY_TASK_SHADER_NV = 0x95A1;
export def GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;
export def GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;
export def GL_ATTACHED_MEMORY_OBJECT_NV = 0x95A4;
export def GL_ATTACHED_MEMORY_OFFSET_NV = 0x95A5;
export def GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6;
export def GL_MEMORY_ATTACHABLE_SIZE_NV = 0x95A7;
export def GL_MEMORY_ATTACHABLE_NV = 0x95A8;
export def GL_DETACHED_MEMORY_INCARNATION_NV = 0x95A9;
export def GL_DETACHED_TEXTURES_NV = 0x95AA;
export def GL_DETACHED_BUFFERS_NV = 0x95AB;
export def GL_MAX_DETACHED_TEXTURES_NV = 0x95AC;
export def GL_MAX_DETACHED_BUFFERS_NV = 0x95AD;
export def GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;
export def GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;
export def GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;
export def GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1;
export def GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x95B2;
export def GL_SEMAPHORE_TYPE_NV = 0x95B3;
export def GL_SEMAPHORE_TYPE_BINARY_NV = 0x95B4;
export def GL_SEMAPHORE_TYPE_TIMELINE_NV = 0x95B5;
export def GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x95B6;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
export def GL_MAX_VIEWS_OVR = 0x9631;
export def GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
export def GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
export def GL_GS_SHADER_BINARY_MTK = 0x9640;
export def GL_GS_PROGRAM_BINARY_MTK = 0x9641;
export def GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x9650;
export def GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x9651;
export def GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652;
export def GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 0x96A0;
export def GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2;
export def GL_VALIDATE_SHADER_BINARY_QCOM = 0x96A3;
export def GL_SHADING_RATE_QCOM = 0x96A4;
export def GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x96A5;
export def GL_SHADING_RATE_1X1_PIXELS_QCOM = 0x96A6;
export def GL_SHADING_RATE_1X2_PIXELS_QCOM = 0x96A7;
export def GL_SHADING_RATE_2X1_PIXELS_QCOM = 0x96A8;
export def GL_SHADING_RATE_2X2_PIXELS_QCOM = 0x96A9;
export def GL_SHADING_RATE_1X4_PIXELS_QCOM = 0x96AA;
export def GL_SHADING_RATE_4X1_PIXELS_QCOM = 0x96AB;
export def GL_SHADING_RATE_4X2_PIXELS_QCOM = 0x96AC;
export def GL_SHADING_RATE_2X4_PIXELS_QCOM = 0x96AD;
export def GL_SHADING_RATE_4X4_PIXELS_QCOM = 0x96AE;
export def GL_SHADING_RATE_1X1_PIXELS_EXT = 0x96A6;
export def GL_SHADING_RATE_1X2_PIXELS_EXT = 0x96A7;
export def GL_SHADING_RATE_2X1_PIXELS_EXT = 0x96A8;
export def GL_SHADING_RATE_2X2_PIXELS_EXT = 0x96A9;
export def GL_SHADING_RATE_1X4_PIXELS_EXT = 0x96AA;
export def GL_SHADING_RATE_4X1_PIXELS_EXT = 0x96AB;
export def GL_SHADING_RATE_4X2_PIXELS_EXT = 0x96AC;
export def GL_SHADING_RATE_2X4_PIXELS_EXT = 0x96AD;
export def GL_SHADING_RATE_4X4_PIXELS_EXT = 0x96AE;
export def GL_SURFACE_COMPRESSION_EXT = 0x96C0;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT = 0x96C1;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0x96C2;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT = 0x96C4;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT = 0x96C5;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT = 0x96C6;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT = 0x96C7;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT = 0x96C8;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT = 0x96C9;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT = 0x96CA;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT = 0x96CB;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT = 0x96CC;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT = 0x96CD;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT = 0x96CE;
export def GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT = 0x96CF;
export def GL_SHADING_RATE_EXT = 0x96D0;
export def GL_SHADING_RATE_ATTACHMENT_EXT = 0x96D1;
export def GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT = 0x96D2;
export def GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT = 0x96D3;
export def GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT = 0x96D4;
export def GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT = 0x96D5;
export def GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT = 0x96D6;
export def GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D7;
export def GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D8;
export def GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96D9;
export def GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96DA;
export def GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 0x96DB;
export def GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 0x96DC;
export def GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 0x96DD;
export def GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 0x96DE;
export def GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 0x96DF;
export def GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
export def GL_CULL_VERTEX_IBM = 103050;
export def GL_ALL_STATIC_DATA_IBM = 103060;
export def GL_STATIC_VERTEX_ARRAY_IBM = 103061;
export def GL_VERTEX_ARRAY_LIST_IBM = 103070;
export def GL_NORMAL_ARRAY_LIST_IBM = 103071;
export def GL_COLOR_ARRAY_LIST_IBM = 103072;
export def GL_INDEX_ARRAY_LIST_IBM = 103073;
export def GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
export def GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
export def GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
export def GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
export def GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
export def GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
export def GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
export def GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
export def GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
export def GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
export def GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
export def GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
export def GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
export def GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
export def GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
export def GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
export def GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
export def GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
export def GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
export def GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
export def GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
export def GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
export def GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
export def GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
export def GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
export def GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
export def GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
export def GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
export def GL_CLIP_NEAR_HINT_PGI = 0x1A220;
export def GL_CLIP_FAR_HINT_PGI = 0x1A221;
export def GL_WIDE_LINE_HINT_PGI = 0x1A222;
export def GL_BACK_NORMALS_HINT_PGI = 0x1A223;
export def GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
export def GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
export def GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
export def GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
export type GLenum = u32 ;
export type GLboolean = u8 ;
export type GLbitfield = u32 ;
export type GLvoid = void ;
export type GLbyte = i8 ;
export type GLubyte = u8 ;
export type GLshort = i16 ;
export type GLushort = u16 ;
export type GLint = i32 ;
export type GLuint = u32 ;
export type GLclampx = i32 ;
export type GLsizei = i32 ;
export type GLfloat = f32 ;
export type GLclampf = f32 ;
export type GLdouble = f64 ;
export type GLclampd = f64 ;
export type GLeglClientBufferEXT = nullable *void;
export type GLeglImageOES = nullable *void;
export type GLchar = i8 ;
export type GLcharARB = i8 ;
export type GLhalf = u16 ;
export type GLhalfARB = u16 ;
export type GLfixed = i32 ;
export type GLintptr = *i32 ;
export type GLintptrARB = *i32 ;
export type GLsizeiptr = u64 ;
export type GLsizeiptrARB = u64 ;
export type GLint64 = i64 ;
export type GLint64EXT = i64 ;
export type GLuint64 = u64 ;
export type GLuint64EXT = u64 ;
export type GLhalfNV = u16 ;
export type GLvdpauSurfaceNV = GLintptr ;
@symbol("glAccum") fn _glAccum(op: GLenum, value: GLfloat) void;
@symbol("glAccumxOES") fn _glAccumxOES(op: GLenum, value: GLfixed) void;
@symbol("glActiveProgramEXT") fn _glActiveProgramEXT(program: GLuint) void;
@symbol("glActiveShaderProgram") fn _glActiveShaderProgram(pipeline: GLuint, program: GLuint) void;
@symbol("glActiveShaderProgramEXT") fn _glActiveShaderProgramEXT(pipeline: GLuint, program: GLuint) void;
@symbol("glActiveStencilFaceEXT") fn _glActiveStencilFaceEXT(face: GLenum) void;
@symbol("glActiveTexture") fn _glActiveTexture(texture: GLenum) void;
@symbol("glActiveVaryingNV") fn _glActiveVaryingNV(program: GLuint, name: GLchar) void;
@symbol("glAlphaFragmentOp1ATI") fn _glAlphaFragmentOp1ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) void;
@symbol("glAlphaFragmentOp2ATI") fn _glAlphaFragmentOp2ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) void;
@symbol("glAlphaFragmentOp3ATI") fn _glAlphaFragmentOp3ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) void;
@symbol("glAlphaFunc") fn _glAlphaFunc(func: GLenum, ref: GLfloat) void;
@symbol("glAlphaFuncQCOM") fn _glAlphaFuncQCOM(func: GLenum, ref: GLclampf) void;
@symbol("glAlphaFuncx") fn _glAlphaFuncx(func: GLenum, ref: GLfixed) void;
@symbol("glAlphaFuncxOES") fn _glAlphaFuncxOES(func: GLenum, ref: GLfixed) void;
@symbol("glAlphaToCoverageDitherControlNV") fn _glAlphaToCoverageDitherControlNV(mode: GLenum) void;
@symbol("glApplyFramebufferAttachmentCMAAINTEL") fn _glApplyFramebufferAttachmentCMAAINTEL() void;
@symbol("glApplyTextureEXT") fn _glApplyTextureEXT(mode: GLenum) void;
@symbol("glAcquireKeyedMutexWin32EXT") fn _glAcquireKeyedMutexWin32EXT(memory: GLuint, key: GLuint64, timeout: GLuint) GLboolean;
@symbol("glAreProgramsResidentNV") fn _glAreProgramsResidentNV(n: GLsizei, programs: GLuint, residences: GLboolean) GLboolean;
@symbol("glAreTexturesResident") fn _glAreTexturesResident(n: GLsizei, textures: GLuint, residences: GLboolean) GLboolean;
@symbol("glAreTexturesResidentEXT") fn _glAreTexturesResidentEXT(n: GLsizei, textures: GLuint, residences: GLboolean) GLboolean;
@symbol("glArrayElement") fn _glArrayElement(i: GLint) void;
@symbol("glArrayElementEXT") fn _glArrayElementEXT(i: GLint) void;
@symbol("glArrayObjectATI") fn _glArrayObjectATI(array: GLenum, _size: GLint, _type: GLenum, stride: GLsizei, buffer: GLuint, _offset: GLuint) void;
@symbol("glAsyncCopyBufferSubDataNVX") fn _glAsyncCopyBufferSubDataNVX(waitSemaphoreCount: GLsizei, waitSemaphoreArray: GLuint, fenceValueArray: GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, _size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: GLuint, signalValueArray: GLuint64) GLuint;
@symbol("glAsyncCopyImageSubDataNVX") fn _glAsyncCopyImageSubDataNVX(waitSemaphoreCount: GLsizei, waitSemaphoreArray: GLuint, waitValueArray: GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: GLuint, signalValueArray: GLuint64) GLuint;
@symbol("glAsyncMarkerSGIX") fn _glAsyncMarkerSGIX(marker: GLuint) void;
@symbol("glAttachShader") fn _glAttachShader(program: GLuint, shader: GLuint) void;
@symbol("glBegin") fn _glBegin(mode: GLenum) void;
@symbol("glBeginConditionalRender") fn _glBeginConditionalRender(id: GLuint, mode: GLenum) void;
@symbol("glBeginConditionalRenderNV") fn _glBeginConditionalRenderNV(id: GLuint, mode: GLenum) void;
@symbol("glBeginConditionalRenderNVX") fn _glBeginConditionalRenderNVX(id: GLuint) void;
@symbol("glBeginFragmentShaderATI") fn _glBeginFragmentShaderATI() void;
@symbol("glBeginOcclusionQueryNV") fn _glBeginOcclusionQueryNV(id: GLuint) void;
@symbol("glBeginPerfMonitorAMD") fn _glBeginPerfMonitorAMD(monitor: GLuint) void;
@symbol("glBeginPerfQueryINTEL") fn _glBeginPerfQueryINTEL(queryHandle: GLuint) void;
@symbol("glBeginQuery") fn _glBeginQuery(target: GLenum, id: GLuint) void;
@symbol("glBeginQueryEXT") fn _glBeginQueryEXT(target: GLenum, id: GLuint) void;
@symbol("glBeginQueryIndexed") fn _glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint) void;
@symbol("glBeginTransformFeedback") fn _glBeginTransformFeedback(primitiveMode: GLenum) void;
@symbol("glBeginTransformFeedbackEXT") fn _glBeginTransformFeedbackEXT(primitiveMode: GLenum) void;
@symbol("glBeginTransformFeedbackNV") fn _glBeginTransformFeedbackNV(primitiveMode: GLenum) void;
@symbol("glBeginVertexShaderEXT") fn _glBeginVertexShaderEXT() void;
@symbol("glBeginVideoCaptureNV") fn _glBeginVideoCaptureNV(video_capture_slot: GLuint) void;
@symbol("glBindAttribLocation") fn _glBindAttribLocation(program: GLuint, index: GLuint, name: GLchar) void;
@symbol("glBindBuffer") fn _glBindBuffer(target: GLenum, buffer: GLuint) void;
@symbol("glBindBufferBase") fn _glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) void;
@symbol("glBindBufferBaseEXT") fn _glBindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint) void;
@symbol("glBindBufferBaseNV") fn _glBindBufferBaseNV(target: GLenum, index: GLuint, buffer: GLuint) void;
@symbol("glBindBufferOffsetEXT") fn _glBindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, _offset: GLintptr) void;
@symbol("glBindBufferOffsetNV") fn _glBindBufferOffsetNV(target: GLenum, index: GLuint, buffer: GLuint, _offset: GLintptr) void;
@symbol("glBindBufferRange") fn _glBindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glBindBufferRangeEXT") fn _glBindBufferRangeEXT(target: GLenum, index: GLuint, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glBindBufferRangeNV") fn _glBindBufferRangeNV(target: GLenum, index: GLuint, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glBindBuffersBase") fn _glBindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint) void;
@symbol("glBindBuffersRange") fn _glBindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint, _offsets: GLintptr, _sizes: GLsizeiptr) void;
@symbol("glBindFragDataLocation") fn _glBindFragDataLocation(program: GLuint, color: GLuint, name: GLchar) void;
@symbol("glBindFragDataLocationEXT") fn _glBindFragDataLocationEXT(program: GLuint, color: GLuint, name: GLchar) void;
@symbol("glBindFragDataLocationIndexed") fn _glBindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: GLchar) void;
@symbol("glBindFragDataLocationIndexedEXT") fn _glBindFragDataLocationIndexedEXT(program: GLuint, colorNumber: GLuint, index: GLuint, name: GLchar) void;
@symbol("glBindFragmentShaderATI") fn _glBindFragmentShaderATI(id: GLuint) void;
@symbol("glBindFramebuffer") fn _glBindFramebuffer(target: GLenum, framebuffer: GLuint) void;
@symbol("glBindFramebufferEXT") fn _glBindFramebufferEXT(target: GLenum, framebuffer: GLuint) void;
@symbol("glBindFramebufferOES") fn _glBindFramebufferOES(target: GLenum, framebuffer: GLuint) void;
@symbol("glBindImageTexture") fn _glBindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) void;
@symbol("glBindImageTextureEXT") fn _glBindImageTextureEXT(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) void;
@symbol("glBindImageTextures") fn _glBindImageTextures(first: GLuint, count: GLsizei, textures: GLuint) void;
@symbol("glBindLightParameterEXT") fn _glBindLightParameterEXT(light: GLenum, value: GLenum) GLuint;
@symbol("glBindMaterialParameterEXT") fn _glBindMaterialParameterEXT(face: GLenum, value: GLenum) GLuint;
@symbol("glBindMultiTextureEXT") fn _glBindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint) void;
@symbol("glBindParameterEXT") fn _glBindParameterEXT(value: GLenum) GLuint;
@symbol("glBindProgramNV") fn _glBindProgramNV(target: GLenum, id: GLuint) void;
@symbol("glBindProgramPipeline") fn _glBindProgramPipeline(pipeline: GLuint) void;
@symbol("glBindProgramPipelineEXT") fn _glBindProgramPipelineEXT(pipeline: GLuint) void;
@symbol("glBindRenderbuffer") fn _glBindRenderbuffer(target: GLenum, renderbuffer: GLuint) void;
@symbol("glBindRenderbufferEXT") fn _glBindRenderbufferEXT(target: GLenum, renderbuffer: GLuint) void;
@symbol("glBindRenderbufferOES") fn _glBindRenderbufferOES(target: GLenum, renderbuffer: GLuint) void;
@symbol("glBindSampler") fn _glBindSampler(unit: GLuint, sampler: GLuint) void;
@symbol("glBindSamplers") fn _glBindSamplers(first: GLuint, count: GLsizei, samplers: GLuint) void;
@symbol("glBindShadingRateImageNV") fn _glBindShadingRateImageNV(texture: GLuint) void;
@symbol("glBindTexGenParameterEXT") fn _glBindTexGenParameterEXT(unit: GLenum, coord: GLenum, value: GLenum) GLuint;
@symbol("glBindTexture") fn _glBindTexture(target: GLenum, texture: GLuint) void;
@symbol("glBindTextureEXT") fn _glBindTextureEXT(target: GLenum, texture: GLuint) void;
@symbol("glBindTextureUnit") fn _glBindTextureUnit(unit: GLuint, texture: GLuint) void;
@symbol("glBindTextureUnitParameterEXT") fn _glBindTextureUnitParameterEXT(unit: GLenum, value: GLenum) GLuint;
@symbol("glBindTextures") fn _glBindTextures(first: GLuint, count: GLsizei, textures: GLuint) void;
@symbol("glBindTransformFeedback") fn _glBindTransformFeedback(target: GLenum, id: GLuint) void;
@symbol("glBindTransformFeedbackNV") fn _glBindTransformFeedbackNV(target: GLenum, id: GLuint) void;
@symbol("glBindVertexArray") fn _glBindVertexArray(array: GLuint) void;
@symbol("glBindVertexArrayAPPLE") fn _glBindVertexArrayAPPLE(array: GLuint) void;
@symbol("glBindVertexArrayOES") fn _glBindVertexArrayOES(array: GLuint) void;
@symbol("glBindVertexBuffer") fn _glBindVertexBuffer(bindingindex: GLuint, buffer: GLuint, _offset: GLintptr, stride: GLsizei) void;
@symbol("glBindVertexBuffers") fn _glBindVertexBuffers(first: GLuint, count: GLsizei, buffers: GLuint, _offsets: GLintptr, strides: GLsizei) void;
@symbol("glBindVertexShaderEXT") fn _glBindVertexShaderEXT(id: GLuint) void;
@symbol("glBindVideoCaptureStreamBufferNV") fn _glBindVideoCaptureStreamBufferNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, _offset: GLintptrARB) void;
@symbol("glBindVideoCaptureStreamTextureNV") fn _glBindVideoCaptureStreamTextureNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) void;
@symbol("glBinormal3bEXT") fn _glBinormal3bEXT(bx: GLbyte, by: GLbyte, bz: GLbyte) void;
@symbol("glBinormal3bvEXT") fn _glBinormal3bvEXT(v: GLbyte) void;
@symbol("glBinormal3dEXT") fn _glBinormal3dEXT(bx: GLdouble, by: GLdouble, bz: GLdouble) void;
@symbol("glBinormal3dvEXT") fn _glBinormal3dvEXT(v: GLdouble) void;
@symbol("glBinormal3fEXT") fn _glBinormal3fEXT(bx: GLfloat, by: GLfloat, bz: GLfloat) void;
@symbol("glBinormal3fvEXT") fn _glBinormal3fvEXT(v: GLfloat) void;
@symbol("glBinormal3iEXT") fn _glBinormal3iEXT(bx: GLint, by: GLint, bz: GLint) void;
@symbol("glBinormal3ivEXT") fn _glBinormal3ivEXT(v: GLint) void;
@symbol("glBinormal3sEXT") fn _glBinormal3sEXT(bx: GLshort, by: GLshort, bz: GLshort) void;
@symbol("glBinormal3svEXT") fn _glBinormal3svEXT(v: GLshort) void;
@symbol("glBitmap") fn _glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: GLubyte) void;
@symbol("glBitmapxOES") fn _glBitmapxOES(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: GLubyte) void;
@symbol("glBlendBarrier") fn _glBlendBarrier() void;
@symbol("glBlendBarrierKHR") fn _glBlendBarrierKHR() void;
@symbol("glBlendBarrierNV") fn _glBlendBarrierNV() void;
@symbol("glBlendColor") fn _glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
@symbol("glBlendColorEXT") fn _glBlendColorEXT(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
@symbol("glBlendColorxOES") fn _glBlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) void;
@symbol("glBlendEquation") fn _glBlendEquation(mode: GLenum) void;
@symbol("glBlendEquationEXT") fn _glBlendEquationEXT(mode: GLenum) void;
@symbol("glBlendEquationIndexedAMD") fn _glBlendEquationIndexedAMD(buf: GLuint, mode: GLenum) void;
@symbol("glBlendEquationOES") fn _glBlendEquationOES(mode: GLenum) void;
@symbol("glBlendEquationSeparate") fn _glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationSeparateEXT") fn _glBlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationSeparateIndexedAMD") fn _glBlendEquationSeparateIndexedAMD(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationSeparateOES") fn _glBlendEquationSeparateOES(modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationSeparatei") fn _glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationSeparateiEXT") fn _glBlendEquationSeparateiEXT(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationSeparateiOES") fn _glBlendEquationSeparateiOES(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) void;
@symbol("glBlendEquationi") fn _glBlendEquationi(buf: GLuint, mode: GLenum) void;
@symbol("glBlendEquationiEXT") fn _glBlendEquationiEXT(buf: GLuint, mode: GLenum) void;
@symbol("glBlendEquationiOES") fn _glBlendEquationiOES(buf: GLuint, mode: GLenum) void;
@symbol("glBlendFunc") fn _glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
@symbol("glBlendFuncIndexedAMD") fn _glBlendFuncIndexedAMD(buf: GLuint, src: GLenum, dst: GLenum) void;
@symbol("glBlendFuncSeparate") fn _glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) void;
@symbol("glBlendFuncSeparateEXT") fn _glBlendFuncSeparateEXT(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) void;
@symbol("glBlendFuncSeparateINGR") fn _glBlendFuncSeparateINGR(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) void;
@symbol("glBlendFuncSeparateIndexedAMD") fn _glBlendFuncSeparateIndexedAMD(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void;
@symbol("glBlendFuncSeparateOES") fn _glBlendFuncSeparateOES(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void;
@symbol("glBlendFuncSeparatei") fn _glBlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void;
@symbol("glBlendFuncSeparateiEXT") fn _glBlendFuncSeparateiEXT(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void;
@symbol("glBlendFuncSeparateiOES") fn _glBlendFuncSeparateiOES(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void;
@symbol("glBlendFunci") fn _glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum) void;
@symbol("glBlendFunciEXT") fn _glBlendFunciEXT(buf: GLuint, src: GLenum, dst: GLenum) void;
@symbol("glBlendFunciOES") fn _glBlendFunciOES(buf: GLuint, src: GLenum, dst: GLenum) void;
@symbol("glBlendParameteriNV") fn _glBlendParameteriNV(pname: GLenum, value: GLint) void;
@symbol("glBlitFramebuffer") fn _glBlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBlitFramebufferANGLE") fn _glBlitFramebufferANGLE(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBlitFramebufferEXT") fn _glBlitFramebufferEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBlitFramebufferLayerEXT") fn _glBlitFramebufferLayerEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, srcLayer: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, dstLayer: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBlitFramebufferLayersEXT") fn _glBlitFramebufferLayersEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBlitFramebufferNV") fn _glBlitFramebufferNV(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBlitNamedFramebuffer") fn _glBlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glBufferAddressRangeNV") fn _glBufferAddressRangeNV(pname: GLenum, index: GLuint, address: GLuint64EXT, _length: GLsizeiptr) void;
@symbol("glBufferAttachMemoryNV") fn _glBufferAttachMemoryNV(target: GLenum, memory: GLuint, _offset: GLuint64) void;
@symbol("glBufferData") fn _glBufferData(target: GLenum, _size: GLsizeiptr, data: nullable *void, usage: GLenum) void;
@symbol("glBufferPageCommitmentMemNV") fn _glBufferPageCommitmentMemNV(target: GLenum, _offset: GLintptr, _size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) void;
@symbol("glBufferParameteriAPPLE") fn _glBufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glBufferStorage") fn _glBufferStorage(target: GLenum, _size: GLsizeiptr, data: nullable *void, flags: GLbitfield) void;
@symbol("glBufferStorageEXT") fn _glBufferStorageEXT(target: GLenum, _size: GLsizeiptr, data: nullable *void, flags: GLbitfield) void;
@symbol("glBufferStorageExternalEXT") fn _glBufferStorageExternalEXT(target: GLenum, _offset: GLintptr, _size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) void;
@symbol("glBufferStorageMemEXT") fn _glBufferStorageMemEXT(target: GLenum, _size: GLsizeiptr, memory: GLuint, _offset: GLuint64) void;
@symbol("glBufferSubData") fn _glBufferSubData(target: GLenum, _offset: GLintptr, _size: GLsizeiptr, data: nullable *void) void;
@symbol("glCallCommandListNV") fn _glCallCommandListNV(list: GLuint) void;
@symbol("glCallList") fn _glCallList(list: GLuint) void;
@symbol("glCallLists") fn _glCallLists(n: GLsizei, _type: GLenum, lists: nullable *void) void;
@symbol("glCheckFramebufferStatus") fn _glCheckFramebufferStatus(target: GLenum) GLenum;
@symbol("glCheckFramebufferStatusEXT") fn _glCheckFramebufferStatusEXT(target: GLenum) GLenum;
@symbol("glCheckFramebufferStatusOES") fn _glCheckFramebufferStatusOES(target: GLenum) GLenum;
@symbol("glCheckNamedFramebufferStatus") fn _glCheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum) GLenum;
@symbol("glCheckNamedFramebufferStatusEXT") fn _glCheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum) GLenum;
@symbol("glClampColor") fn _glClampColor(target: GLenum, clamp: GLenum) void;
@symbol("glClear") fn _glClear(mask: GLbitfield) void;
@symbol("glClearAccum") fn _glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
@symbol("glClearAccumxOES") fn _glClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) void;
@symbol("glClearBufferData") fn _glClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearBufferSubData") fn _glClearBufferSubData(target: GLenum, internalformat: GLenum, _offset: GLintptr, _size: GLsizeiptr, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearBufferfi") fn _glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) void;
@symbol("glClearBufferfv") fn _glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: GLfloat) void;
@symbol("glClearBufferiv") fn _glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: GLint) void;
@symbol("glClearBufferuiv") fn _glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: GLuint) void;
@symbol("glClearColor") fn _glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
@symbol("glClearColorIiEXT") fn _glClearColorIiEXT(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
@symbol("glClearColorIuiEXT") fn _glClearColorIuiEXT(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
@symbol("glClearColorx") fn _glClearColorx(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) void;
@symbol("glClearColorxOES") fn _glClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) void;
@symbol("glClearDepth") fn _glClearDepth(depth: GLdouble) void;
@symbol("glClearDepthdNV") fn _glClearDepthdNV(depth: GLdouble) void;
@symbol("glClearDepthf") fn _glClearDepthf(d: GLfloat) void;
@symbol("glClearDepthfOES") fn _glClearDepthfOES(depth: GLclampf) void;
@symbol("glClearDepthx") fn _glClearDepthx(depth: GLfixed) void;
@symbol("glClearDepthxOES") fn _glClearDepthxOES(depth: GLfixed) void;
@symbol("glClearIndex") fn _glClearIndex(c: GLfloat) void;
@symbol("glClearNamedBufferData") fn _glClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearNamedBufferDataEXT") fn _glClearNamedBufferDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearNamedBufferSubData") fn _glClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, _offset: GLintptr, _size: GLsizeiptr, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearNamedBufferSubDataEXT") fn _glClearNamedBufferSubDataEXT(buffer: GLuint, internalformat: GLenum, _offset: GLsizeiptr, _size: GLsizeiptr, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearNamedFramebufferfi") fn _glClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) void;
@symbol("glClearNamedFramebufferfv") fn _glClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLfloat) void;
@symbol("glClearNamedFramebufferiv") fn _glClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLint) void;
@symbol("glClearNamedFramebufferuiv") fn _glClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLuint) void;
@symbol("glClearPixelLocalStorageuiEXT") fn _glClearPixelLocalStorageuiEXT(_offset: GLsizei, n: GLsizei, values: GLuint) void;
@symbol("glClearStencil") fn _glClearStencil(s: GLint) void;
@symbol("glClearTexImage") fn _glClearTexImage(texture: GLuint, level: GLint, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearTexImageEXT") fn _glClearTexImageEXT(texture: GLuint, level: GLint, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearTexSubImage") fn _glClearTexSubImage(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClearTexSubImageEXT") fn _glClearTexSubImageEXT(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glClientActiveTexture") fn _glClientActiveTexture(texture: GLenum) void;
@symbol("glClientActiveVertexStreamATI") fn _glClientActiveVertexStreamATI(stream: GLenum) void;
@symbol("glClientAttribDefaultEXT") fn _glClientAttribDefaultEXT(mask: GLbitfield) void;
@symbol("glClientWaitSemaphoreui64NVX") fn _glClientWaitSemaphoreui64NVX(fenceObjectCount: GLsizei, semaphoreArray: GLuint, fenceValueArray: GLuint64) void;
@symbol("glClipControl") fn _glClipControl(origin: GLenum, depth: GLenum) void;
@symbol("glClipControlEXT") fn _glClipControlEXT(origin: GLenum, depth: GLenum) void;
@symbol("glClipPlane") fn _glClipPlane(plane: GLenum, equation: GLdouble) void;
@symbol("glClipPlanef") fn _glClipPlanef(p: GLenum, eqn: GLfloat) void;
@symbol("glClipPlanefIMG") fn _glClipPlanefIMG(p: GLenum, eqn: GLfloat) void;
@symbol("glClipPlanefOES") fn _glClipPlanefOES(plane: GLenum, equation: GLfloat) void;
@symbol("glClipPlanex") fn _glClipPlanex(plane: GLenum, equation: GLfixed) void;
@symbol("glClipPlanexIMG") fn _glClipPlanexIMG(p: GLenum, eqn: GLfixed) void;
@symbol("glClipPlanexOES") fn _glClipPlanexOES(plane: GLenum, equation: GLfixed) void;
@symbol("glColor3b") fn _glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
@symbol("glColor3bv") fn _glColor3bv(v: GLbyte) void;
@symbol("glColor3d") fn _glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
@symbol("glColor3dv") fn _glColor3dv(v: GLdouble) void;
@symbol("glColor3f") fn _glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
@symbol("glColor3fVertex3fSUN") fn _glColor3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glColor3fVertex3fvSUN") fn _glColor3fVertex3fvSUN(c: GLfloat, v: GLfloat) void;
@symbol("glColor3fv") fn _glColor3fv(v: GLfloat) void;
@symbol("glColor3hNV") fn _glColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) void;
@symbol("glColor3hvNV") fn _glColor3hvNV(v: GLhalfNV) void;
@symbol("glColor3i") fn _glColor3i(red: GLint, green: GLint, blue: GLint) void;
@symbol("glColor3iv") fn _glColor3iv(v: GLint) void;
@symbol("glColor3s") fn _glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
@symbol("glColor3sv") fn _glColor3sv(v: GLshort) void;
@symbol("glColor3ub") fn _glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
@symbol("glColor3ubv") fn _glColor3ubv(v: GLubyte) void;
@symbol("glColor3ui") fn _glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
@symbol("glColor3uiv") fn _glColor3uiv(v: GLuint) void;
@symbol("glColor3us") fn _glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
@symbol("glColor3usv") fn _glColor3usv(v: GLushort) void;
@symbol("glColor3xOES") fn _glColor3xOES(red: GLfixed, green: GLfixed, blue: GLfixed) void;
@symbol("glColor3xvOES") fn _glColor3xvOES(components: GLfixed) void;
@symbol("glColor4b") fn _glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
@symbol("glColor4bv") fn _glColor4bv(v: GLbyte) void;
@symbol("glColor4d") fn _glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
@symbol("glColor4dv") fn _glColor4dv(v: GLdouble) void;
@symbol("glColor4f") fn _glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
@symbol("glColor4fNormal3fVertex3fSUN") fn _glColor4fNormal3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glColor4fNormal3fVertex3fvSUN") fn _glColor4fNormal3fVertex3fvSUN(c: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glColor4fv") fn _glColor4fv(v: GLfloat) void;
@symbol("glColor4hNV") fn _glColor4hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) void;
@symbol("glColor4hvNV") fn _glColor4hvNV(v: GLhalfNV) void;
@symbol("glColor4i") fn _glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
@symbol("glColor4iv") fn _glColor4iv(v: GLint) void;
@symbol("glColor4s") fn _glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
@symbol("glColor4sv") fn _glColor4sv(v: GLshort) void;
@symbol("glColor4ub") fn _glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
@symbol("glColor4ubVertex2fSUN") fn _glColor4ubVertex2fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) void;
@symbol("glColor4ubVertex2fvSUN") fn _glColor4ubVertex2fvSUN(c: GLubyte, v: GLfloat) void;
@symbol("glColor4ubVertex3fSUN") fn _glColor4ubVertex3fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glColor4ubVertex3fvSUN") fn _glColor4ubVertex3fvSUN(c: GLubyte, v: GLfloat) void;
@symbol("glColor4ubv") fn _glColor4ubv(v: GLubyte) void;
@symbol("glColor4ui") fn _glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
@symbol("glColor4uiv") fn _glColor4uiv(v: GLuint) void;
@symbol("glColor4us") fn _glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
@symbol("glColor4usv") fn _glColor4usv(v: GLushort) void;
@symbol("glColor4x") fn _glColor4x(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) void;
@symbol("glColor4xOES") fn _glColor4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) void;
@symbol("glColor4xvOES") fn _glColor4xvOES(components: GLfixed) void;
@symbol("glColorFormatNV") fn _glColorFormatNV(_size: GLint, _type: GLenum, stride: GLsizei) void;
@symbol("glColorFragmentOp1ATI") fn _glColorFragmentOp1ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) void;
@symbol("glColorFragmentOp2ATI") fn _glColorFragmentOp2ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) void;
@symbol("glColorFragmentOp3ATI") fn _glColorFragmentOp3ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) void;
@symbol("glColorMask") fn _glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
@symbol("glColorMaskIndexedEXT") fn _glColorMaskIndexedEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) void;
@symbol("glColorMaski") fn _glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) void;
@symbol("glColorMaskiEXT") fn _glColorMaskiEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) void;
@symbol("glColorMaskiOES") fn _glColorMaskiOES(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) void;
@symbol("glColorMaterial") fn _glColorMaterial(face: GLenum, mode: GLenum) void;
@symbol("glColorP3ui") fn _glColorP3ui(_type: GLenum, color: GLuint) void;
@symbol("glColorP3uiv") fn _glColorP3uiv(_type: GLenum, color: GLuint) void;
@symbol("glColorP4ui") fn _glColorP4ui(_type: GLenum, color: GLuint) void;
@symbol("glColorP4uiv") fn _glColorP4uiv(_type: GLenum, color: GLuint) void;
@symbol("glColorPointer") fn _glColorPointer(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glColorPointerEXT") fn _glColorPointerEXT(_size: GLint, _type: GLenum, stride: GLsizei, count: GLsizei, pointer: nullable *void) void;
@symbol("glColorPointerListIBM") fn _glColorPointerListIBM(_size: GLint, _type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glColorPointervINTEL") fn _glColorPointervINTEL(_size: GLint, _type: GLenum, pointer: nullable *void) void;
@symbol("glColorSubTable") fn _glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glColorSubTableEXT") fn _glColorSubTableEXT(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, _type: GLenum, data: nullable *void) void;
@symbol("glColorTable") fn _glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, _type: GLenum, table: nullable *void) void;
@symbol("glColorTableEXT") fn _glColorTableEXT(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, _type: GLenum, table: nullable *void) void;
@symbol("glColorTableParameterfv") fn _glColorTableParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glColorTableParameterfvSGI") fn _glColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glColorTableParameteriv") fn _glColorTableParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glColorTableParameterivSGI") fn _glColorTableParameterivSGI(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glColorTableSGI") fn _glColorTableSGI(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, _type: GLenum, table: nullable *void) void;
@symbol("glCombinerInputNV") fn _glCombinerInputNV(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) void;
@symbol("glCombinerOutputNV") fn _glCombinerOutputNV(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) void;
@symbol("glCombinerParameterfNV") fn _glCombinerParameterfNV(pname: GLenum, param: GLfloat) void;
@symbol("glCombinerParameterfvNV") fn _glCombinerParameterfvNV(pname: GLenum, params: GLfloat) void;
@symbol("glCombinerParameteriNV") fn _glCombinerParameteriNV(pname: GLenum, param: GLint) void;
@symbol("glCombinerParameterivNV") fn _glCombinerParameterivNV(pname: GLenum, params: GLint) void;
@symbol("glCombinerStageParameterfvNV") fn _glCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glCommandListSegmentsNV") fn _glCommandListSegmentsNV(list: GLuint, segments: GLuint) void;
@symbol("glCompileCommandListNV") fn _glCompileCommandListNV(list: GLuint) void;
@symbol("glCompileShader") fn _glCompileShader(shader: GLuint) void;
@symbol("glCompressedMultiTexImage1DEXT") fn _glCompressedMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedMultiTexImage2DEXT") fn _glCompressedMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedMultiTexImage3DEXT") fn _glCompressedMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedMultiTexSubImage1DEXT") fn _glCompressedMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedMultiTexSubImage2DEXT") fn _glCompressedMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedMultiTexSubImage3DEXT") fn _glCompressedMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedTexImage1D") fn _glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexImage2D") fn _glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexImage3D") fn _glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexImage3DOES") fn _glCompressedTexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexSubImage1D") fn _glCompressedTexSubImage1D(target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexSubImage2D") fn _glCompressedTexSubImage2D(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexSubImage3D") fn _glCompressedTexSubImage3D(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTexSubImage3DOES") fn _glCompressedTexSubImage3DOES(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTextureImage1DEXT") fn _glCompressedTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedTextureImage2DEXT") fn _glCompressedTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedTextureImage3DEXT") fn _glCompressedTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedTextureSubImage1D") fn _glCompressedTextureSubImage1D(texture: GLuint, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTextureSubImage1DEXT") fn _glCompressedTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedTextureSubImage2D") fn _glCompressedTextureSubImage2D(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTextureSubImage2DEXT") fn _glCompressedTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glCompressedTextureSubImage3D") fn _glCompressedTextureSubImage3D(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: nullable *void) void;
@symbol("glCompressedTextureSubImage3DEXT") fn _glCompressedTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: nullable *void) void;
@symbol("glConservativeRasterParameterfNV") fn _glConservativeRasterParameterfNV(pname: GLenum, value: GLfloat) void;
@symbol("glConservativeRasterParameteriNV") fn _glConservativeRasterParameteriNV(pname: GLenum, param: GLint) void;
@symbol("glConvolutionFilter1D") fn _glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, _type: GLenum, image: nullable *void) void;
@symbol("glConvolutionFilter1DEXT") fn _glConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, _type: GLenum, image: nullable *void) void;
@symbol("glConvolutionFilter2D") fn _glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, image: nullable *void) void;
@symbol("glConvolutionFilter2DEXT") fn _glConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, image: nullable *void) void;
@symbol("glConvolutionParameterf") fn _glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glConvolutionParameterfEXT") fn _glConvolutionParameterfEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glConvolutionParameterfv") fn _glConvolutionParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glConvolutionParameterfvEXT") fn _glConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glConvolutionParameteri") fn _glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glConvolutionParameteriEXT") fn _glConvolutionParameteriEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glConvolutionParameteriv") fn _glConvolutionParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glConvolutionParameterivEXT") fn _glConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glConvolutionParameterxOES") fn _glConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glConvolutionParameterxvOES") fn _glConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glCopyBufferSubData") fn _glCopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, _size: GLsizeiptr) void;
@symbol("glCopyBufferSubDataNV") fn _glCopyBufferSubDataNV(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, _size: GLsizeiptr) void;
@symbol("glCopyColorSubTable") fn _glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyColorSubTableEXT") fn _glCopyColorSubTableEXT(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyColorTable") fn _glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyColorTableSGI") fn _glCopyColorTableSGI(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyConvolutionFilter1D") fn _glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyConvolutionFilter1DEXT") fn _glCopyConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyConvolutionFilter2D") fn _glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyConvolutionFilter2DEXT") fn _glCopyConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyImageSubData") fn _glCopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) void;
@symbol("glCopyImageSubDataEXT") fn _glCopyImageSubDataEXT(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) void;
@symbol("glCopyImageSubDataNV") fn _glCopyImageSubDataNV(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glCopyImageSubDataOES") fn _glCopyImageSubDataOES(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) void;
@symbol("glCopyMultiTexImage1DEXT") fn _glCopyMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
@symbol("glCopyMultiTexImage2DEXT") fn _glCopyMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
@symbol("glCopyMultiTexSubImage1DEXT") fn _glCopyMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyMultiTexSubImage2DEXT") fn _glCopyMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyMultiTexSubImage3DEXT") fn _glCopyMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyNamedBufferSubData") fn _glCopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, _size: GLsizeiptr) void;
@symbol("glCopyPathNV") fn _glCopyPathNV(resultPath: GLuint, srcPath: GLuint) void;
@symbol("glCopyPixels") fn _glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, _type: GLenum) void;
@symbol("glCopyTexImage1D") fn _glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
@symbol("glCopyTexImage1DEXT") fn _glCopyTexImage1DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
@symbol("glCopyTexImage2D") fn _glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
@symbol("glCopyTexImage2DEXT") fn _glCopyTexImage2DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
@symbol("glCopyTexSubImage1D") fn _glCopyTexSubImage1D(target: GLenum, level: GLint, x_offset: GLint, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyTexSubImage1DEXT") fn _glCopyTexSubImage1DEXT(target: GLenum, level: GLint, x_offset: GLint, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyTexSubImage2D") fn _glCopyTexSubImage2D(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTexSubImage2DEXT") fn _glCopyTexSubImage2DEXT(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTexSubImage3D") fn _glCopyTexSubImage3D(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTexSubImage3DEXT") fn _glCopyTexSubImage3DEXT(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTexSubImage3DOES") fn _glCopyTexSubImage3DOES(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTextureImage1DEXT") fn _glCopyTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
@symbol("glCopyTextureImage2DEXT") fn _glCopyTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
@symbol("glCopyTextureLevelsAPPLE") fn _glCopyTextureLevelsAPPLE(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) void;
@symbol("glCopyTextureSubImage1D") fn _glCopyTextureSubImage1D(texture: GLuint, level: GLint, x_offset: GLint, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyTextureSubImage1DEXT") fn _glCopyTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, x: GLint, y: GLint, width: GLsizei) void;
@symbol("glCopyTextureSubImage2D") fn _glCopyTextureSubImage2D(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTextureSubImage2DEXT") fn _glCopyTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTextureSubImage3D") fn _glCopyTextureSubImage3D(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCopyTextureSubImage3DEXT") fn _glCopyTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glCoverFillPathInstancedNV") fn _glCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glCoverFillPathNV") fn _glCoverFillPathNV(path: GLuint, coverMode: GLenum) void;
@symbol("glCoverStrokePathInstancedNV") fn _glCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glCoverStrokePathNV") fn _glCoverStrokePathNV(path: GLuint, coverMode: GLenum) void;
@symbol("glCoverageMaskNV") fn _glCoverageMaskNV(mask: GLboolean) void;
@symbol("glCoverageModulationNV") fn _glCoverageModulationNV(components: GLenum) void;
@symbol("glCoverageModulationTableNV") fn _glCoverageModulationTableNV(n: GLsizei, v: GLfloat) void;
@symbol("glCoverageOperationNV") fn _glCoverageOperationNV(operation: GLenum) void;
@symbol("glCreateBuffers") fn _glCreateBuffers(n: GLsizei, buffers: GLuint) void;
@symbol("glCreateCommandListsNV") fn _glCreateCommandListsNV(n: GLsizei, lists: GLuint) void;
@symbol("glCreateFramebuffers") fn _glCreateFramebuffers(n: GLsizei, framebuffers: GLuint) void;
@symbol("glCreateMemoryObjectsEXT") fn _glCreateMemoryObjectsEXT(n: GLsizei, memoryObjects: GLuint) void;
@symbol("glCreatePerfQueryINTEL") fn _glCreatePerfQueryINTEL(queryId: GLuint, queryHandle: GLuint) void;
@symbol("glCreateProgram") fn _glCreateProgram() GLuint;
@symbol("glCreateProgramPipelines") fn _glCreateProgramPipelines(n: GLsizei, pipelines: GLuint) void;
@symbol("glCreateProgressFenceNVX") fn _glCreateProgressFenceNVX() GLuint;
@symbol("glCreateQueries") fn _glCreateQueries(target: GLenum, n: GLsizei, ids: GLuint) void;
@symbol("glCreateRenderbuffers") fn _glCreateRenderbuffers(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glCreateSamplers") fn _glCreateSamplers(n: GLsizei, samplers: GLuint) void;
@symbol("glCreateSemaphoresNV") fn _glCreateSemaphoresNV(n: GLsizei, semaphores: GLuint) void;
@symbol("glCreateShader") fn _glCreateShader(_type: GLenum) GLuint;
@symbol("glCreateShaderProgramEXT") fn _glCreateShaderProgramEXT(_type: GLenum, string: GLchar) GLuint;
@symbol("glCreateShaderProgramv") fn _glCreateShaderProgramv(_type: GLenum, count: GLsizei, strings: GLchar) GLuint;
@symbol("glCreateShaderProgramvEXT") fn _glCreateShaderProgramvEXT(_type: GLenum, count: GLsizei, strings: GLchar) GLuint;
@symbol("glCreateStatesNV") fn _glCreateStatesNV(n: GLsizei, states: GLuint) void;
@symbol("glCreateTextures") fn _glCreateTextures(target: GLenum, n: GLsizei, textures: GLuint) void;
@symbol("glCreateTransformFeedbacks") fn _glCreateTransformFeedbacks(n: GLsizei, ids: GLuint) void;
@symbol("glCreateVertexArrays") fn _glCreateVertexArrays(n: GLsizei, arrays: GLuint) void;
@symbol("glCullFace") fn _glCullFace(mode: GLenum) void;
@symbol("glCullParameterdvEXT") fn _glCullParameterdvEXT(pname: GLenum, params: GLdouble) void;
@symbol("glCullParameterfvEXT") fn _glCullParameterfvEXT(pname: GLenum, params: GLfloat) void;
@symbol("glCurrentPaletteMatrixOES") fn _glCurrentPaletteMatrixOES(matrixpaletteindex: GLuint) void;
@symbol("glDeformSGIX") fn _glDeformSGIX(mask: GLbitfield) void;
@symbol("glDeformationMap3dSGIX") fn _glDeformationMap3dSGIX(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: GLdouble) void;
@symbol("glDeformationMap3fSGIX") fn _glDeformationMap3fSGIX(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: GLfloat) void;
@symbol("glDeleteAsyncMarkersSGIX") fn _glDeleteAsyncMarkersSGIX(marker: GLuint, range: GLsizei) void;
@symbol("glDeleteBuffers") fn _glDeleteBuffers(n: GLsizei, buffers: GLuint) void;
@symbol("glDeleteCommandListsNV") fn _glDeleteCommandListsNV(n: GLsizei, lists: GLuint) void;
@symbol("glDeleteFencesAPPLE") fn _glDeleteFencesAPPLE(n: GLsizei, fences: GLuint) void;
@symbol("glDeleteFencesNV") fn _glDeleteFencesNV(n: GLsizei, fences: GLuint) void;
@symbol("glDeleteFragmentShaderATI") fn _glDeleteFragmentShaderATI(id: GLuint) void;
@symbol("glDeleteFramebuffers") fn _glDeleteFramebuffers(n: GLsizei, framebuffers: GLuint) void;
@symbol("glDeleteFramebuffersEXT") fn _glDeleteFramebuffersEXT(n: GLsizei, framebuffers: GLuint) void;
@symbol("glDeleteFramebuffersOES") fn _glDeleteFramebuffersOES(n: GLsizei, framebuffers: GLuint) void;
@symbol("glDeleteLists") fn _glDeleteLists(list: GLuint, range: GLsizei) void;
@symbol("glDeleteMemoryObjectsEXT") fn _glDeleteMemoryObjectsEXT(n: GLsizei, memoryObjects: GLuint) void;
@symbol("glDeleteNamesAMD") fn _glDeleteNamesAMD(identifier: GLenum, num: GLuint, names: GLuint) void;
@symbol("glDeleteOcclusionQueriesNV") fn _glDeleteOcclusionQueriesNV(n: GLsizei, ids: GLuint) void;
@symbol("glDeletePathsNV") fn _glDeletePathsNV(path: GLuint, range: GLsizei) void;
@symbol("glDeletePerfMonitorsAMD") fn _glDeletePerfMonitorsAMD(n: GLsizei, monitors: GLuint) void;
@symbol("glDeletePerfQueryINTEL") fn _glDeletePerfQueryINTEL(queryHandle: GLuint) void;
@symbol("glDeleteProgram") fn _glDeleteProgram(program: GLuint) void;
@symbol("glDeleteProgramPipelines") fn _glDeleteProgramPipelines(n: GLsizei, pipelines: GLuint) void;
@symbol("glDeleteProgramPipelinesEXT") fn _glDeleteProgramPipelinesEXT(n: GLsizei, pipelines: GLuint) void;
@symbol("glDeleteProgramsNV") fn _glDeleteProgramsNV(n: GLsizei, programs: GLuint) void;
@symbol("glDeleteQueries") fn _glDeleteQueries(n: GLsizei, ids: GLuint) void;
@symbol("glDeleteQueriesEXT") fn _glDeleteQueriesEXT(n: GLsizei, ids: GLuint) void;
@symbol("glDeleteQueryResourceTagNV") fn _glDeleteQueryResourceTagNV(n: GLsizei, tagIds: GLint) void;
@symbol("glDeleteRenderbuffers") fn _glDeleteRenderbuffers(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glDeleteRenderbuffersEXT") fn _glDeleteRenderbuffersEXT(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glDeleteRenderbuffersOES") fn _glDeleteRenderbuffersOES(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glDeleteSamplers") fn _glDeleteSamplers(count: GLsizei, samplers: GLuint) void;
@symbol("glDeleteSemaphoresEXT") fn _glDeleteSemaphoresEXT(n: GLsizei, semaphores: GLuint) void;
@symbol("glDeleteShader") fn _glDeleteShader(shader: GLuint) void;
@symbol("glDeleteStatesNV") fn _glDeleteStatesNV(n: GLsizei, states: GLuint) void;
@symbol("glDeleteTextures") fn _glDeleteTextures(n: GLsizei, textures: GLuint) void;
@symbol("glDeleteTexturesEXT") fn _glDeleteTexturesEXT(n: GLsizei, textures: GLuint) void;
@symbol("glDeleteTransformFeedbacks") fn _glDeleteTransformFeedbacks(n: GLsizei, ids: GLuint) void;
@symbol("glDeleteTransformFeedbacksNV") fn _glDeleteTransformFeedbacksNV(n: GLsizei, ids: GLuint) void;
@symbol("glDeleteVertexArrays") fn _glDeleteVertexArrays(n: GLsizei, arrays: GLuint) void;
@symbol("glDeleteVertexArraysAPPLE") fn _glDeleteVertexArraysAPPLE(n: GLsizei, arrays: GLuint) void;
@symbol("glDeleteVertexArraysOES") fn _glDeleteVertexArraysOES(n: GLsizei, arrays: GLuint) void;
@symbol("glDeleteVertexShaderEXT") fn _glDeleteVertexShaderEXT(id: GLuint) void;
@symbol("glDepthBoundsEXT") fn _glDepthBoundsEXT(zmin: GLclampd, zmax: GLclampd) void;
@symbol("glDepthBoundsdNV") fn _glDepthBoundsdNV(zmin: GLdouble, zmax: GLdouble) void;
@symbol("glDepthFunc") fn _glDepthFunc(func: GLenum) void;
@symbol("glDepthMask") fn _glDepthMask(flag: GLboolean) void;
@symbol("glDepthRange") fn _glDepthRange(n: GLdouble, f: GLdouble) void;
@symbol("glDepthRangeArraydvNV") fn _glDepthRangeArraydvNV(first: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glDepthRangeArrayfvNV") fn _glDepthRangeArrayfvNV(first: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glDepthRangeArrayfvOES") fn _glDepthRangeArrayfvOES(first: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glDepthRangeArrayv") fn _glDepthRangeArrayv(first: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glDepthRangeIndexed") fn _glDepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble) void;
@symbol("glDepthRangeIndexeddNV") fn _glDepthRangeIndexeddNV(index: GLuint, n: GLdouble, f: GLdouble) void;
@symbol("glDepthRangeIndexedfNV") fn _glDepthRangeIndexedfNV(index: GLuint, n: GLfloat, f: GLfloat) void;
@symbol("glDepthRangeIndexedfOES") fn _glDepthRangeIndexedfOES(index: GLuint, n: GLfloat, f: GLfloat) void;
@symbol("glDepthRangedNV") fn _glDepthRangedNV(zNear: GLdouble, zFar: GLdouble) void;
@symbol("glDepthRangef") fn _glDepthRangef(n: GLfloat, f: GLfloat) void;
@symbol("glDepthRangefOES") fn _glDepthRangefOES(n: GLclampf, f: GLclampf) void;
@symbol("glDepthRangex") fn _glDepthRangex(n: GLfixed, f: GLfixed) void;
@symbol("glDepthRangexOES") fn _glDepthRangexOES(n: GLfixed, f: GLfixed) void;
@symbol("glDetachShader") fn _glDetachShader(program: GLuint, shader: GLuint) void;
@symbol("glDetailTexFuncSGIS") fn _glDetailTexFuncSGIS(target: GLenum, n: GLsizei, points: GLfloat) void;
@symbol("glDisable") fn _glDisable(cap: GLenum) void;
@symbol("glDisableClientState") fn _glDisableClientState(array: GLenum) void;
@symbol("glDisableClientStateIndexedEXT") fn _glDisableClientStateIndexedEXT(array: GLenum, index: GLuint) void;
@symbol("glDisableClientStateiEXT") fn _glDisableClientStateiEXT(array: GLenum, index: GLuint) void;
@symbol("glDisableDriverControlQCOM") fn _glDisableDriverControlQCOM(driverControl: GLuint) void;
@symbol("glDisableIndexedEXT") fn _glDisableIndexedEXT(target: GLenum, index: GLuint) void;
@symbol("glDisableVariantClientStateEXT") fn _glDisableVariantClientStateEXT(id: GLuint) void;
@symbol("glDisableVertexArrayAttrib") fn _glDisableVertexArrayAttrib(vaobj: GLuint, index: GLuint) void;
@symbol("glDisableVertexArrayAttribEXT") fn _glDisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) void;
@symbol("glDisableVertexArrayEXT") fn _glDisableVertexArrayEXT(vaobj: GLuint, array: GLenum) void;
@symbol("glDisableVertexAttribAPPLE") fn _glDisableVertexAttribAPPLE(index: GLuint, pname: GLenum) void;
@symbol("glDisableVertexAttribArray") fn _glDisableVertexAttribArray(index: GLuint) void;
@symbol("glDisablei") fn _glDisablei(target: GLenum, index: GLuint) void;
@symbol("glDisableiEXT") fn _glDisableiEXT(target: GLenum, index: GLuint) void;
@symbol("glDisableiNV") fn _glDisableiNV(target: GLenum, index: GLuint) void;
@symbol("glDisableiOES") fn _glDisableiOES(target: GLenum, index: GLuint) void;
@symbol("glDiscardFramebufferEXT") fn _glDiscardFramebufferEXT(target: GLenum, numAttachments: GLsizei, attachments: GLenum) void;
@symbol("glDispatchCompute") fn _glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) void;
@symbol("glDispatchComputeIndirect") fn _glDispatchComputeIndirect(indirect: GLintptr) void;
@symbol("glDrawArrays") fn _glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
@symbol("glDrawArraysEXT") fn _glDrawArraysEXT(mode: GLenum, first: GLint, count: GLsizei) void;
@symbol("glDrawArraysIndirect") fn _glDrawArraysIndirect(mode: GLenum, indirect: nullable *void) void;
@symbol("glDrawArraysInstanced") fn _glDrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) void;
@symbol("glDrawArraysInstancedANGLE") fn _glDrawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) void;
@symbol("glDrawArraysInstancedBaseInstance") fn _glDrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) void;
@symbol("glDrawArraysInstancedBaseInstanceEXT") fn _glDrawArraysInstancedBaseInstanceEXT(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) void;
@symbol("glDrawArraysInstancedEXT") fn _glDrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) void;
@symbol("glDrawArraysInstancedNV") fn _glDrawArraysInstancedNV(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) void;
@symbol("glDrawBuffer") fn _glDrawBuffer(buf: GLenum) void;
@symbol("glDrawBuffers") fn _glDrawBuffers(n: GLsizei, bufs: GLenum) void;
@symbol("glDrawBuffersATI") fn _glDrawBuffersATI(n: GLsizei, bufs: GLenum) void;
@symbol("glDrawBuffersEXT") fn _glDrawBuffersEXT(n: GLsizei, bufs: GLenum) void;
@symbol("glDrawBuffersIndexedEXT") fn _glDrawBuffersIndexedEXT(n: GLint, location: GLenum, indices: GLint) void;
@symbol("glDrawBuffersNV") fn _glDrawBuffersNV(n: GLsizei, bufs: GLenum) void;
@symbol("glDrawCommandsAddressNV") fn _glDrawCommandsAddressNV(primitiveMode: GLenum, indirects: GLuint64, _sizes: GLsizei, count: GLuint) void;
@symbol("glDrawCommandsNV") fn _glDrawCommandsNV(primitiveMode: GLenum, buffer: GLuint, indirects: GLintptr, _sizes: GLsizei, count: GLuint) void;
@symbol("glDrawCommandsStatesAddressNV") fn _glDrawCommandsStatesAddressNV(indirects: GLuint64, _sizes: GLsizei, states: GLuint, fbos: GLuint, count: GLuint) void;
@symbol("glDrawCommandsStatesNV") fn _glDrawCommandsStatesNV(buffer: GLuint, indirects: GLintptr, _sizes: GLsizei, states: GLuint, fbos: GLuint, count: GLuint) void;
@symbol("glDrawElementArrayAPPLE") fn _glDrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei) void;
@symbol("glDrawElementArrayATI") fn _glDrawElementArrayATI(mode: GLenum, count: GLsizei) void;
@symbol("glDrawElements") fn _glDrawElements(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void) void;
@symbol("glDrawElementsBaseVertex") fn _glDrawElementsBaseVertex(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, basevertex: GLint) void;
@symbol("glDrawElementsBaseVertexEXT") fn _glDrawElementsBaseVertexEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, basevertex: GLint) void;
@symbol("glDrawElementsBaseVertexOES") fn _glDrawElementsBaseVertexOES(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, basevertex: GLint) void;
@symbol("glDrawElementsIndirect") fn _glDrawElementsIndirect(mode: GLenum, _type: GLenum, indirect: nullable *void) void;
@symbol("glDrawElementsInstanced") fn _glDrawElementsInstanced(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei) void;
@symbol("glDrawElementsInstancedANGLE") fn _glDrawElementsInstancedANGLE(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, primcount: GLsizei) void;
@symbol("glDrawElementsInstancedBaseInstance") fn _glDrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, baseinstance: GLuint) void;
@symbol("glDrawElementsInstancedBaseInstanceEXT") fn _glDrawElementsInstancedBaseInstanceEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, baseinstance: GLuint) void;
@symbol("glDrawElementsInstancedBaseVertex") fn _glDrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, basevertex: GLint) void;
@symbol("glDrawElementsInstancedBaseVertexBaseInstance") fn _glDrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) void;
@symbol("glDrawElementsInstancedBaseVertexBaseInstanceEXT") fn _glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) void;
@symbol("glDrawElementsInstancedBaseVertexEXT") fn _glDrawElementsInstancedBaseVertexEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, basevertex: GLint) void;
@symbol("glDrawElementsInstancedBaseVertexOES") fn _glDrawElementsInstancedBaseVertexOES(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, instancecount: GLsizei, basevertex: GLint) void;
@symbol("glDrawElementsInstancedEXT") fn _glDrawElementsInstancedEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, primcount: GLsizei) void;
@symbol("glDrawElementsInstancedNV") fn _glDrawElementsInstancedNV(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, primcount: GLsizei) void;
@symbol("glDrawMeshArraysSUN") fn _glDrawMeshArraysSUN(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) void;
@symbol("glDrawMeshTasksNV") fn _glDrawMeshTasksNV(first: GLuint, count: GLuint) void;
@symbol("glDrawMeshTasksIndirectNV") fn _glDrawMeshTasksIndirectNV(indirect: GLintptr) void;
@symbol("glDrawPixels") fn _glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glDrawRangeElementArrayAPPLE") fn _glDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) void;
@symbol("glDrawRangeElementArrayATI") fn _glDrawRangeElementArrayATI(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) void;
@symbol("glDrawRangeElements") fn _glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, _type: GLenum, indices: nullable *void) void;
@symbol("glDrawRangeElementsBaseVertex") fn _glDrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, _type: GLenum, indices: nullable *void, basevertex: GLint) void;
@symbol("glDrawRangeElementsBaseVertexEXT") fn _glDrawRangeElementsBaseVertexEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, _type: GLenum, indices: nullable *void, basevertex: GLint) void;
@symbol("glDrawRangeElementsBaseVertexOES") fn _glDrawRangeElementsBaseVertexOES(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, _type: GLenum, indices: nullable *void, basevertex: GLint) void;
@symbol("glDrawRangeElementsEXT") fn _glDrawRangeElementsEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, _type: GLenum, indices: nullable *void) void;
@symbol("glDrawTexfOES") fn _glDrawTexfOES(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) void;
@symbol("glDrawTexfvOES") fn _glDrawTexfvOES(coords: GLfloat) void;
@symbol("glDrawTexiOES") fn _glDrawTexiOES(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) void;
@symbol("glDrawTexivOES") fn _glDrawTexivOES(coords: GLint) void;
@symbol("glDrawTexsOES") fn _glDrawTexsOES(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) void;
@symbol("glDrawTexsvOES") fn _glDrawTexsvOES(coords: GLshort) void;
@symbol("glDrawTextureNV") fn _glDrawTextureNV(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) void;
@symbol("glDrawTexxOES") fn _glDrawTexxOES(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) void;
@symbol("glDrawTexxvOES") fn _glDrawTexxvOES(coords: GLfixed) void;
@symbol("glDrawTransformFeedback") fn _glDrawTransformFeedback(mode: GLenum, id: GLuint) void;
@symbol("glDrawTransformFeedbackEXT") fn _glDrawTransformFeedbackEXT(mode: GLenum, id: GLuint) void;
@symbol("glDrawTransformFeedbackInstanced") fn _glDrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei) void;
@symbol("glDrawTransformFeedbackInstancedEXT") fn _glDrawTransformFeedbackInstancedEXT(mode: GLenum, id: GLuint, instancecount: GLsizei) void;
@symbol("glDrawTransformFeedbackNV") fn _glDrawTransformFeedbackNV(mode: GLenum, id: GLuint) void;
@symbol("glDrawTransformFeedbackStream") fn _glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint) void;
@symbol("glDrawTransformFeedbackStreamInstanced") fn _glDrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) void;
@symbol("glEGLImageTargetRenderbufferStorageOES") fn _glEGLImageTargetRenderbufferStorageOES(target: GLenum, image: GLeglImageOES) void;
@symbol("glEGLImageTargetTexStorageEXT") fn _glEGLImageTargetTexStorageEXT(target: GLenum, image: GLeglImageOES, attrib_list: GLint) void;
@symbol("glEGLImageTargetTexture2DOES") fn _glEGLImageTargetTexture2DOES(target: GLenum, image: GLeglImageOES) void;
@symbol("glEGLImageTargetTextureStorageEXT") fn _glEGLImageTargetTextureStorageEXT(texture: GLuint, image: GLeglImageOES, attrib_list: GLint) void;
@symbol("glEdgeFlag") fn _glEdgeFlag(flag: GLboolean) void;
@symbol("glEdgeFlagFormatNV") fn _glEdgeFlagFormatNV(stride: GLsizei) void;
@symbol("glEdgeFlagPointer") fn _glEdgeFlagPointer(stride: GLsizei, pointer: nullable *void) void;
@symbol("glEdgeFlagPointerEXT") fn _glEdgeFlagPointerEXT(stride: GLsizei, count: GLsizei, pointer: GLboolean) void;
@symbol("glEdgeFlagPointerListIBM") fn _glEdgeFlagPointerListIBM(stride: GLint, pointer: GLboolean, ptrstride: GLint) void;
@symbol("glEdgeFlagv") fn _glEdgeFlagv(flag: GLboolean) void;
@symbol("glElementPointerAPPLE") fn _glElementPointerAPPLE(_type: GLenum, pointer: nullable *void) void;
@symbol("glElementPointerATI") fn _glElementPointerATI(_type: GLenum, pointer: nullable *void) void;
@symbol("glEnable") fn _glEnable(cap: GLenum) void;
@symbol("glEnableClientState") fn _glEnableClientState(array: GLenum) void;
@symbol("glEnableClientStateIndexedEXT") fn _glEnableClientStateIndexedEXT(array: GLenum, index: GLuint) void;
@symbol("glEnableClientStateiEXT") fn _glEnableClientStateiEXT(array: GLenum, index: GLuint) void;
@symbol("glEnableDriverControlQCOM") fn _glEnableDriverControlQCOM(driverControl: GLuint) void;
@symbol("glEnableIndexedEXT") fn _glEnableIndexedEXT(target: GLenum, index: GLuint) void;
@symbol("glEnableVariantClientStateEXT") fn _glEnableVariantClientStateEXT(id: GLuint) void;
@symbol("glEnableVertexArrayAttrib") fn _glEnableVertexArrayAttrib(vaobj: GLuint, index: GLuint) void;
@symbol("glEnableVertexArrayAttribEXT") fn _glEnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) void;
@symbol("glEnableVertexArrayEXT") fn _glEnableVertexArrayEXT(vaobj: GLuint, array: GLenum) void;
@symbol("glEnableVertexAttribAPPLE") fn _glEnableVertexAttribAPPLE(index: GLuint, pname: GLenum) void;
@symbol("glEnableVertexAttribArray") fn _glEnableVertexAttribArray(index: GLuint) void;
@symbol("glEnablei") fn _glEnablei(target: GLenum, index: GLuint) void;
@symbol("glEnableiEXT") fn _glEnableiEXT(target: GLenum, index: GLuint) void;
@symbol("glEnableiNV") fn _glEnableiNV(target: GLenum, index: GLuint) void;
@symbol("glEnableiOES") fn _glEnableiOES(target: GLenum, index: GLuint) void;
@symbol("glEnd") fn _glEnd() void;
@symbol("glEndConditionalRender") fn _glEndConditionalRender() void;
@symbol("glEndConditionalRenderNV") fn _glEndConditionalRenderNV() void;
@symbol("glEndConditionalRenderNVX") fn _glEndConditionalRenderNVX() void;
@symbol("glEndFragmentShaderATI") fn _glEndFragmentShaderATI() void;
@symbol("glEndList") fn _glEndList() void;
@symbol("glEndOcclusionQueryNV") fn _glEndOcclusionQueryNV() void;
@symbol("glEndPerfMonitorAMD") fn _glEndPerfMonitorAMD(monitor: GLuint) void;
@symbol("glEndPerfQueryINTEL") fn _glEndPerfQueryINTEL(queryHandle: GLuint) void;
@symbol("glEndQuery") fn _glEndQuery(target: GLenum) void;
@symbol("glEndQueryEXT") fn _glEndQueryEXT(target: GLenum) void;
@symbol("glEndQueryIndexed") fn _glEndQueryIndexed(target: GLenum, index: GLuint) void;
@symbol("glEndTilingQCOM") fn _glEndTilingQCOM(preserveMask: GLbitfield) void;
@symbol("glEndTransformFeedback") fn _glEndTransformFeedback() void;
@symbol("glEndTransformFeedbackEXT") fn _glEndTransformFeedbackEXT() void;
@symbol("glEndTransformFeedbackNV") fn _glEndTransformFeedbackNV() void;
@symbol("glEndVertexShaderEXT") fn _glEndVertexShaderEXT() void;
@symbol("glEndVideoCaptureNV") fn _glEndVideoCaptureNV(video_capture_slot: GLuint) void;
@symbol("glEvalCoord1d") fn _glEvalCoord1d(u: GLdouble) void;
@symbol("glEvalCoord1dv") fn _glEvalCoord1dv(u: GLdouble) void;
@symbol("glEvalCoord1f") fn _glEvalCoord1f(u: GLfloat) void;
@symbol("glEvalCoord1fv") fn _glEvalCoord1fv(u: GLfloat) void;
@symbol("glEvalCoord1xOES") fn _glEvalCoord1xOES(u: GLfixed) void;
@symbol("glEvalCoord1xvOES") fn _glEvalCoord1xvOES(coords: GLfixed) void;
@symbol("glEvalCoord2d") fn _glEvalCoord2d(u: GLdouble, v: GLdouble) void;
@symbol("glEvalCoord2dv") fn _glEvalCoord2dv(u: GLdouble) void;
@symbol("glEvalCoord2f") fn _glEvalCoord2f(u: GLfloat, v: GLfloat) void;
@symbol("glEvalCoord2fv") fn _glEvalCoord2fv(u: GLfloat) void;
@symbol("glEvalCoord2xOES") fn _glEvalCoord2xOES(u: GLfixed, v: GLfixed) void;
@symbol("glEvalCoord2xvOES") fn _glEvalCoord2xvOES(coords: GLfixed) void;
@symbol("glEvalMapsNV") fn _glEvalMapsNV(target: GLenum, mode: GLenum) void;
@symbol("glEvalMesh1") fn _glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint) void;
@symbol("glEvalMesh2") fn _glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) void;
@symbol("glEvalPoint1") fn _glEvalPoint1(i: GLint) void;
@symbol("glEvalPoint2") fn _glEvalPoint2(i: GLint, j: GLint) void;
@symbol("glExecuteProgramNV") fn _glExecuteProgramNV(target: GLenum, id: GLuint, params: GLfloat) void;
@symbol("glExtGetBufferPointervQCOM") fn _glExtGetBufferPointervQCOM(target: GLenum, params: *void) void;
@symbol("glExtGetBuffersQCOM") fn _glExtGetBuffersQCOM(buffers: GLuint, maxBuffers: GLint, numBuffers: GLint) void;
@symbol("glExtGetFramebuffersQCOM") fn _glExtGetFramebuffersQCOM(framebuffers: GLuint, maxFramebuffers: GLint, numFramebuffers: GLint) void;
@symbol("glExtGetProgramBinarySourceQCOM") fn _glExtGetProgramBinarySourceQCOM(program: GLuint, shader_type: GLenum, source: GLchar, _length: GLint) void;
@symbol("glExtGetProgramsQCOM") fn _glExtGetProgramsQCOM(programs: GLuint, maxPrograms: GLint, numPrograms: GLint) void;
@symbol("glExtGetRenderbuffersQCOM") fn _glExtGetRenderbuffersQCOM(renderbuffers: GLuint, maxRenderbuffers: GLint, numRenderbuffers: GLint) void;
@symbol("glExtGetShadersQCOM") fn _glExtGetShadersQCOM(shaders: GLuint, maxShaders: GLint, numShaders: GLint) void;
@symbol("glExtGetTexLevelParameterivQCOM") fn _glExtGetTexLevelParameterivQCOM(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: GLint) void;
@symbol("glExtGetTexSubImageQCOM") fn _glExtGetTexSubImageQCOM(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, texels: *void) void;
@symbol("glExtGetTexturesQCOM") fn _glExtGetTexturesQCOM(textures: GLuint, maxTextures: GLint, numTextures: GLint) void;
@symbol("glExtIsProgramBinaryQCOM") fn _glExtIsProgramBinaryQCOM(program: GLuint) GLboolean;
@symbol("glExtTexObjectStateOverrideiQCOM") fn _glExtTexObjectStateOverrideiQCOM(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glExtractComponentEXT") fn _glExtractComponentEXT(res: GLuint, src: GLuint, num: GLuint) void;
@symbol("glFeedbackBuffer") fn _glFeedbackBuffer(_size: GLsizei, _type: GLenum, buffer: GLfloat) void;
@symbol("glFeedbackBufferxOES") fn _glFeedbackBufferxOES(n: GLsizei, _type: GLenum, buffer: GLfixed) void;
@symbol("glFinalCombinerInputNV") fn _glFinalCombinerInputNV(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) void;
@symbol("glFinish") fn _glFinish() void;
@symbol("glFinishAsyncSGIX") fn _glFinishAsyncSGIX(markerp: GLuint) GLint;
@symbol("glFinishFenceAPPLE") fn _glFinishFenceAPPLE(fence: GLuint) void;
@symbol("glFinishFenceNV") fn _glFinishFenceNV(fence: GLuint) void;
@symbol("glFinishObjectAPPLE") fn _glFinishObjectAPPLE(object: GLenum, name: GLint) void;
@symbol("glFinishTextureSUNX") fn _glFinishTextureSUNX() void;
@symbol("glFlush") fn _glFlush() void;
@symbol("glFlushMappedBufferRange") fn _glFlushMappedBufferRange(target: GLenum, _offset: GLintptr, _length: GLsizeiptr) void;
@symbol("glFlushMappedBufferRangeAPPLE") fn _glFlushMappedBufferRangeAPPLE(target: GLenum, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glFlushMappedBufferRangeEXT") fn _glFlushMappedBufferRangeEXT(target: GLenum, _offset: GLintptr, _length: GLsizeiptr) void;
@symbol("glFlushMappedNamedBufferRange") fn _glFlushMappedNamedBufferRange(buffer: GLuint, _offset: GLintptr, _length: GLsizeiptr) void;
@symbol("glFlushMappedNamedBufferRangeEXT") fn _glFlushMappedNamedBufferRangeEXT(buffer: GLuint, _offset: GLintptr, _length: GLsizeiptr) void;
@symbol("glFlushPixelDataRangeNV") fn _glFlushPixelDataRangeNV(target: GLenum) void;
@symbol("glFlushRasterSGIX") fn _glFlushRasterSGIX() void;
@symbol("glFlushStaticDataIBM") fn _glFlushStaticDataIBM(target: GLenum) void;
@symbol("glFlushVertexArrayRangeAPPLE") fn _glFlushVertexArrayRangeAPPLE(_length: GLsizei, pointer: *void) void;
@symbol("glFlushVertexArrayRangeNV") fn _glFlushVertexArrayRangeNV() void;
@symbol("glFogCoordFormatNV") fn _glFogCoordFormatNV(_type: GLenum, stride: GLsizei) void;
@symbol("glFogCoordPointer") fn _glFogCoordPointer(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glFogCoordPointerEXT") fn _glFogCoordPointerEXT(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glFogCoordPointerListIBM") fn _glFogCoordPointerListIBM(_type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glFogCoordd") fn _glFogCoordd(coord: GLdouble) void;
@symbol("glFogCoorddEXT") fn _glFogCoorddEXT(coord: GLdouble) void;
@symbol("glFogCoorddv") fn _glFogCoorddv(coord: GLdouble) void;
@symbol("glFogCoorddvEXT") fn _glFogCoorddvEXT(coord: GLdouble) void;
@symbol("glFogCoordf") fn _glFogCoordf(coord: GLfloat) void;
@symbol("glFogCoordfEXT") fn _glFogCoordfEXT(coord: GLfloat) void;
@symbol("glFogCoordfv") fn _glFogCoordfv(coord: GLfloat) void;
@symbol("glFogCoordfvEXT") fn _glFogCoordfvEXT(coord: GLfloat) void;
@symbol("glFogCoordhNV") fn _glFogCoordhNV(fog: GLhalfNV) void;
@symbol("glFogCoordhvNV") fn _glFogCoordhvNV(fog: GLhalfNV) void;
@symbol("glFogFuncSGIS") fn _glFogFuncSGIS(n: GLsizei, points: GLfloat) void;
@symbol("glFogf") fn _glFogf(pname: GLenum, param: GLfloat) void;
@symbol("glFogfv") fn _glFogfv(pname: GLenum, params: GLfloat) void;
@symbol("glFogi") fn _glFogi(pname: GLenum, param: GLint) void;
@symbol("glFogiv") fn _glFogiv(pname: GLenum, params: GLint) void;
@symbol("glFogx") fn _glFogx(pname: GLenum, param: GLfixed) void;
@symbol("glFogxOES") fn _glFogxOES(pname: GLenum, param: GLfixed) void;
@symbol("glFogxv") fn _glFogxv(pname: GLenum, param: GLfixed) void;
@symbol("glFogxvOES") fn _glFogxvOES(pname: GLenum, param: GLfixed) void;
@symbol("glFragmentColorMaterialSGIX") fn _glFragmentColorMaterialSGIX(face: GLenum, mode: GLenum) void;
@symbol("glFragmentCoverageColorNV") fn _glFragmentCoverageColorNV(color: GLuint) void;
@symbol("glFragmentLightModelfSGIX") fn _glFragmentLightModelfSGIX(pname: GLenum, param: GLfloat) void;
@symbol("glFragmentLightModelfvSGIX") fn _glFragmentLightModelfvSGIX(pname: GLenum, params: GLfloat) void;
@symbol("glFragmentLightModeliSGIX") fn _glFragmentLightModeliSGIX(pname: GLenum, param: GLint) void;
@symbol("glFragmentLightModelivSGIX") fn _glFragmentLightModelivSGIX(pname: GLenum, params: GLint) void;
@symbol("glFragmentLightfSGIX") fn _glFragmentLightfSGIX(light: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glFragmentLightfvSGIX") fn _glFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glFragmentLightiSGIX") fn _glFragmentLightiSGIX(light: GLenum, pname: GLenum, param: GLint) void;
@symbol("glFragmentLightivSGIX") fn _glFragmentLightivSGIX(light: GLenum, pname: GLenum, params: GLint) void;
@symbol("glFragmentMaterialfSGIX") fn _glFragmentMaterialfSGIX(face: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glFragmentMaterialfvSGIX") fn _glFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glFragmentMaterialiSGIX") fn _glFragmentMaterialiSGIX(face: GLenum, pname: GLenum, param: GLint) void;
@symbol("glFragmentMaterialivSGIX") fn _glFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: GLint) void;
@symbol("glFrameTerminatorGREMEDY") fn _glFrameTerminatorGREMEDY() void;
@symbol("glFrameZoomSGIX") fn _glFrameZoomSGIX(factor: GLint) void;
@symbol("glFramebufferDrawBufferEXT") fn _glFramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum) void;
@symbol("glFramebufferDrawBuffersEXT") fn _glFramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: GLenum) void;
@symbol("glFramebufferFetchBarrierEXT") fn _glFramebufferFetchBarrierEXT() void;
@symbol("glFramebufferFetchBarrierQCOM") fn _glFramebufferFetchBarrierQCOM() void;
@symbol("glFramebufferFoveationConfigQCOM") fn _glFramebufferFoveationConfigQCOM(framebuffer: GLuint, numLayers: GLuint, focalPointsPerLayer: GLuint, requestedFeatures: GLuint, providedFeatures: GLuint) void;
@symbol("glFramebufferFoveationParametersQCOM") fn _glFramebufferFoveationParametersQCOM(framebuffer: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat) void;
@symbol("glFramebufferParameteri") fn _glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glFramebufferPixelLocalStorageSizeEXT") fn _glFramebufferPixelLocalStorageSizeEXT(target: GLuint, _size: GLsizei) void;
@symbol("glFramebufferReadBufferEXT") fn _glFramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum) void;
@symbol("glFramebufferRenderbuffer") fn _glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
@symbol("glFramebufferRenderbufferEXT") fn _glFramebufferRenderbufferEXT(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
@symbol("glFramebufferRenderbufferOES") fn _glFramebufferRenderbufferOES(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
@symbol("glFramebufferSampleLocationsfvNV") fn _glFramebufferSampleLocationsfvNV(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glFramebufferSamplePositionsfvAMD") fn _glFramebufferSamplePositionsfvAMD(target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: GLfloat) void;
@symbol("glFramebufferShadingRateEXT") fn _glFramebufferShadingRateEXT(target: GLenum, attachment: GLenum, texture: GLuint, baseLayer: GLint, numLayers: GLsizei, texelWidth: GLsizei, texelHeight: GLsizei) void;
@symbol("glFramebufferTexture") fn _glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTexture1D") fn _glFramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTexture1DEXT") fn _glFramebufferTexture1DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTexture2D") fn _glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTexture2DEXT") fn _glFramebufferTexture2DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTexture2DDownsampleIMG") fn _glFramebufferTexture2DDownsampleIMG(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, xscale: GLint, yscale: GLint) void;
@symbol("glFramebufferTexture2DMultisampleEXT") fn _glFramebufferTexture2DMultisampleEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) void;
@symbol("glFramebufferTexture2DMultisampleIMG") fn _glFramebufferTexture2DMultisampleIMG(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) void;
@symbol("glFramebufferTexture2DOES") fn _glFramebufferTexture2DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTexture3D") fn _glFramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, z_offset: GLint) void;
@symbol("glFramebufferTexture3DEXT") fn _glFramebufferTexture3DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, z_offset: GLint) void;
@symbol("glFramebufferTexture3DOES") fn _glFramebufferTexture3DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, z_offset: GLint) void;
@symbol("glFramebufferTextureEXT") fn _glFramebufferTextureEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFramebufferTextureFaceEXT") fn _glFramebufferTextureFaceEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) void;
@symbol("glFramebufferTextureLayer") fn _glFramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) void;
@symbol("glFramebufferTextureLayerEXT") fn _glFramebufferTextureLayerEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) void;
@symbol("glFramebufferTextureLayerDownsampleIMG") fn _glFramebufferTextureLayerDownsampleIMG(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint, xscale: GLint, yscale: GLint) void;
@symbol("glFramebufferTextureMultisampleMultiviewOVR") fn _glFramebufferTextureMultisampleMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, samples: GLsizei, baseViewIndex: GLint, numViews: GLsizei) void;
@symbol("glFramebufferTextureMultiviewOVR") fn _glFramebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) void;
@symbol("glFramebufferTextureOES") fn _glFramebufferTextureOES(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) void;
@symbol("glFreeObjectBufferATI") fn _glFreeObjectBufferATI(buffer: GLuint) void;
@symbol("glFrontFace") fn _glFrontFace(mode: GLenum) void;
@symbol("glFrustum") fn _glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
@symbol("glFrustumf") fn _glFrustumf(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) void;
@symbol("glFrustumfOES") fn _glFrustumfOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) void;
@symbol("glFrustumx") fn _glFrustumx(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) void;
@symbol("glFrustumxOES") fn _glFrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) void;
@symbol("glGenAsyncMarkersSGIX") fn _glGenAsyncMarkersSGIX(range: GLsizei) GLuint;
@symbol("glGenBuffers") fn _glGenBuffers(n: GLsizei, buffers: GLuint) void;
@symbol("glGenFencesAPPLE") fn _glGenFencesAPPLE(n: GLsizei, fences: GLuint) void;
@symbol("glGenFencesNV") fn _glGenFencesNV(n: GLsizei, fences: GLuint) void;
@symbol("glGenFragmentShadersATI") fn _glGenFragmentShadersATI(range: GLuint) GLuint;
@symbol("glGenFramebuffers") fn _glGenFramebuffers(n: GLsizei, framebuffers: GLuint) void;
@symbol("glGenFramebuffersEXT") fn _glGenFramebuffersEXT(n: GLsizei, framebuffers: GLuint) void;
@symbol("glGenFramebuffersOES") fn _glGenFramebuffersOES(n: GLsizei, framebuffers: GLuint) void;
@symbol("glGenLists") fn _glGenLists(range: GLsizei) GLuint;
@symbol("glGenNamesAMD") fn _glGenNamesAMD(identifier: GLenum, num: GLuint, names: GLuint) void;
@symbol("glGenOcclusionQueriesNV") fn _glGenOcclusionQueriesNV(n: GLsizei, ids: GLuint) void;
@symbol("glGenPathsNV") fn _glGenPathsNV(range: GLsizei) GLuint;
@symbol("glGenPerfMonitorsAMD") fn _glGenPerfMonitorsAMD(n: GLsizei, monitors: GLuint) void;
@symbol("glGenProgramPipelines") fn _glGenProgramPipelines(n: GLsizei, pipelines: GLuint) void;
@symbol("glGenProgramPipelinesEXT") fn _glGenProgramPipelinesEXT(n: GLsizei, pipelines: GLuint) void;
@symbol("glGenProgramsNV") fn _glGenProgramsNV(n: GLsizei, programs: GLuint) void;
@symbol("glGenQueries") fn _glGenQueries(n: GLsizei, ids: GLuint) void;
@symbol("glGenQueriesEXT") fn _glGenQueriesEXT(n: GLsizei, ids: GLuint) void;
@symbol("glGenQueryResourceTagNV") fn _glGenQueryResourceTagNV(n: GLsizei, tagIds: GLint) void;
@symbol("glGenRenderbuffers") fn _glGenRenderbuffers(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glGenRenderbuffersEXT") fn _glGenRenderbuffersEXT(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glGenRenderbuffersOES") fn _glGenRenderbuffersOES(n: GLsizei, renderbuffers: GLuint) void;
@symbol("glGenSamplers") fn _glGenSamplers(count: GLsizei, samplers: GLuint) void;
@symbol("glGenSemaphoresEXT") fn _glGenSemaphoresEXT(n: GLsizei, semaphores: GLuint) void;
@symbol("glGenSymbolsEXT") fn _glGenSymbolsEXT(data_type: GLenum, storage_type: GLenum, range: GLenum, components: GLuint) GLuint;
@symbol("glGenTextures") fn _glGenTextures(n: GLsizei, textures: GLuint) void;
@symbol("glGenTexturesEXT") fn _glGenTexturesEXT(n: GLsizei, textures: GLuint) void;
@symbol("glGenTransformFeedbacks") fn _glGenTransformFeedbacks(n: GLsizei, ids: GLuint) void;
@symbol("glGenTransformFeedbacksNV") fn _glGenTransformFeedbacksNV(n: GLsizei, ids: GLuint) void;
@symbol("glGenVertexArrays") fn _glGenVertexArrays(n: GLsizei, arrays: GLuint) void;
@symbol("glGenVertexArraysAPPLE") fn _glGenVertexArraysAPPLE(n: GLsizei, arrays: GLuint) void;
@symbol("glGenVertexArraysOES") fn _glGenVertexArraysOES(n: GLsizei, arrays: GLuint) void;
@symbol("glGenVertexShadersEXT") fn _glGenVertexShadersEXT(range: GLuint) GLuint;
@symbol("glGenerateMipmap") fn _glGenerateMipmap(target: GLenum) void;
@symbol("glGenerateMipmapEXT") fn _glGenerateMipmapEXT(target: GLenum) void;
@symbol("glGenerateMipmapOES") fn _glGenerateMipmapOES(target: GLenum) void;
@symbol("glGenerateMultiTexMipmapEXT") fn _glGenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum) void;
@symbol("glGenerateTextureMipmap") fn _glGenerateTextureMipmap(texture: GLuint) void;
@symbol("glGenerateTextureMipmapEXT") fn _glGenerateTextureMipmapEXT(texture: GLuint, target: GLenum) void;
@symbol("glGetActiveAtomicCounterBufferiv") fn _glGetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetActiveAttrib") fn _glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, _length: GLsizei, _size: GLint, _type: GLenum, name: GLchar) void;
@symbol("glGetActiveSubroutineName") fn _glGetActiveSubroutineName(program: GLuint, shader_type: GLenum, index: GLuint, bufSize: GLsizei, _length: GLsizei, name: GLchar) void;
@symbol("glGetActiveSubroutineUniformName") fn _glGetActiveSubroutineUniformName(program: GLuint, shader_type: GLenum, index: GLuint, bufSize: GLsizei, _length: GLsizei, name: GLchar) void;
@symbol("glGetActiveSubroutineUniformiv") fn _glGetActiveSubroutineUniformiv(program: GLuint, shader_type: GLenum, index: GLuint, pname: GLenum, values: GLint) void;
@symbol("glGetActiveUniform") fn _glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, _length: GLsizei, _size: GLint, _type: GLenum, name: GLchar) void;
@symbol("glGetActiveUniformBlockName") fn _glGetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, _length: GLsizei, uniformBlockName: GLchar) void;
@symbol("glGetActiveUniformBlockiv") fn _glGetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetActiveUniformName") fn _glGetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, _length: GLsizei, uniformName: GLchar) void;
@symbol("glGetActiveUniformsiv") fn _glGetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetActiveVaryingNV") fn _glGetActiveVaryingNV(program: GLuint, index: GLuint, bufSize: GLsizei, _length: GLsizei, _size: GLsizei, _type: GLenum, name: GLchar) void;
@symbol("glGetArrayObjectfvATI") fn _glGetArrayObjectfvATI(array: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetArrayObjectivATI") fn _glGetArrayObjectivATI(array: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetAttachedShaders") fn _glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: GLsizei, shaders: GLuint) void;
@symbol("glGetAttribLocation") fn _glGetAttribLocation(program: GLuint, name: GLchar) GLint;
@symbol("glGetBooleanIndexedvEXT") fn _glGetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: GLboolean) void;
@symbol("glGetBooleani_v") fn _glGetBooleani_v(target: GLenum, index: GLuint, data: GLboolean) void;
@symbol("glGetBooleanv") fn _glGetBooleanv(pname: GLenum, data: GLboolean) void;
@symbol("glGetBufferParameteri64v") fn _glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: GLint64) void;
@symbol("glGetBufferParameteriv") fn _glGetBufferParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetBufferParameterui64vNV") fn _glGetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: GLuint64EXT) void;
@symbol("glGetBufferPointerv") fn _glGetBufferPointerv(target: GLenum, pname: GLenum, params: *void) void;
@symbol("glGetBufferPointervOES") fn _glGetBufferPointervOES(target: GLenum, pname: GLenum, params: *void) void;
@symbol("glGetBufferSubData") fn _glGetBufferSubData(target: GLenum, _offset: GLintptr, _size: GLsizeiptr, data: *void) void;
@symbol("glGetClipPlane") fn _glGetClipPlane(plane: GLenum, equation: GLdouble) void;
@symbol("glGetClipPlanef") fn _glGetClipPlanef(plane: GLenum, equation: GLfloat) void;
@symbol("glGetClipPlanefOES") fn _glGetClipPlanefOES(plane: GLenum, equation: GLfloat) void;
@symbol("glGetClipPlanex") fn _glGetClipPlanex(plane: GLenum, equation: GLfixed) void;
@symbol("glGetClipPlanexOES") fn _glGetClipPlanexOES(plane: GLenum, equation: GLfixed) void;
@symbol("glGetColorTable") fn _glGetColorTable(target: GLenum, format: GLenum, _type: GLenum, table: *void) void;
@symbol("glGetColorTableEXT") fn _glGetColorTableEXT(target: GLenum, format: GLenum, _type: GLenum, data: *void) void;
@symbol("glGetColorTableParameterfv") fn _glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetColorTableParameterfvEXT") fn _glGetColorTableParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetColorTableParameterfvSGI") fn _glGetColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetColorTableParameteriv") fn _glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetColorTableParameterivEXT") fn _glGetColorTableParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetColorTableParameterivSGI") fn _glGetColorTableParameterivSGI(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetColorTableSGI") fn _glGetColorTableSGI(target: GLenum, format: GLenum, _type: GLenum, table: *void) void;
@symbol("glGetCombinerInputParameterfvNV") fn _glGetCombinerInputParameterfvNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetCombinerInputParameterivNV") fn _glGetCombinerInputParameterivNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetCombinerOutputParameterfvNV") fn _glGetCombinerOutputParameterfvNV(stage: GLenum, portion: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetCombinerOutputParameterivNV") fn _glGetCombinerOutputParameterivNV(stage: GLenum, portion: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetCombinerStageParameterfvNV") fn _glGetCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetCommandHeaderNV") fn _glGetCommandHeaderNV(tokenID: GLenum, _size: GLuint) GLuint;
@symbol("glGetCompressedMultiTexImageEXT") fn _glGetCompressedMultiTexImageEXT(texunit: GLenum, target: GLenum, lod: GLint, img: *void) void;
@symbol("glGetCompressedTexImage") fn _glGetCompressedTexImage(target: GLenum, level: GLint, img: *void) void;
@symbol("glGetCompressedTextureImage") fn _glGetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) void;
@symbol("glGetCompressedTextureImageEXT") fn _glGetCompressedTextureImageEXT(texture: GLuint, target: GLenum, lod: GLint, img: *void) void;
@symbol("glGetCompressedTextureSubImage") fn _glGetCompressedTextureSubImage(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) void;
@symbol("glGetConvolutionFilter") fn _glGetConvolutionFilter(target: GLenum, format: GLenum, _type: GLenum, image: *void) void;
@symbol("glGetConvolutionFilterEXT") fn _glGetConvolutionFilterEXT(target: GLenum, format: GLenum, _type: GLenum, image: *void) void;
@symbol("glGetConvolutionParameterfv") fn _glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetConvolutionParameterfvEXT") fn _glGetConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetConvolutionParameteriv") fn _glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetConvolutionParameterivEXT") fn _glGetConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetConvolutionParameterxvOES") fn _glGetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetCoverageModulationTableNV") fn _glGetCoverageModulationTableNV(bufSize: GLsizei, v: GLfloat) void;
@symbol("glGetDetailTexFuncSGIS") fn _glGetDetailTexFuncSGIS(target: GLenum, points: GLfloat) void;
@symbol("glGetDoubleIndexedvEXT") fn _glGetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: GLdouble) void;
@symbol("glGetDoublei_v") fn _glGetDoublei_v(target: GLenum, index: GLuint, data: GLdouble) void;
@symbol("glGetDoublei_vEXT") fn _glGetDoublei_vEXT(pname: GLenum, index: GLuint, params: GLdouble) void;
@symbol("glGetDoublev") fn _glGetDoublev(pname: GLenum, data: GLdouble) void;
@symbol("glGetDriverControlStringQCOM") fn _glGetDriverControlStringQCOM(driverControl: GLuint, bufSize: GLsizei, _length: GLsizei, driverControlString: GLchar) void;
@symbol("glGetDriverControlsQCOM") fn _glGetDriverControlsQCOM(num: GLint, _size: GLsizei, driverControls: GLuint) void;
@symbol("glGetError") fn _glGetError() GLenum;
@symbol("glGetFenceivNV") fn _glGetFenceivNV(fence: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetFinalCombinerInputParameterfvNV") fn _glGetFinalCombinerInputParameterfvNV(variable: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetFinalCombinerInputParameterivNV") fn _glGetFinalCombinerInputParameterivNV(variable: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFirstPerfQueryIdINTEL") fn _glGetFirstPerfQueryIdINTEL(queryId: GLuint) void;
@symbol("glGetFixedv") fn _glGetFixedv(pname: GLenum, params: GLfixed) void;
@symbol("glGetFixedvOES") fn _glGetFixedvOES(pname: GLenum, params: GLfixed) void;
@symbol("glGetFloatIndexedvEXT") fn _glGetFloatIndexedvEXT(target: GLenum, index: GLuint, data: GLfloat) void;
@symbol("glGetFloati_v") fn _glGetFloati_v(target: GLenum, index: GLuint, data: GLfloat) void;
@symbol("glGetFloati_vEXT") fn _glGetFloati_vEXT(pname: GLenum, index: GLuint, params: GLfloat) void;
@symbol("glGetFloati_vNV") fn _glGetFloati_vNV(target: GLenum, index: GLuint, data: GLfloat) void;
@symbol("glGetFloati_vOES") fn _glGetFloati_vOES(target: GLenum, index: GLuint, data: GLfloat) void;
@symbol("glGetFloatv") fn _glGetFloatv(pname: GLenum, data: GLfloat) void;
@symbol("glGetFogFuncSGIS") fn _glGetFogFuncSGIS(points: GLfloat) void;
@symbol("glGetFragDataIndex") fn _glGetFragDataIndex(program: GLuint, name: GLchar) GLint;
@symbol("glGetFragDataIndexEXT") fn _glGetFragDataIndexEXT(program: GLuint, name: GLchar) GLint;
@symbol("glGetFragDataLocation") fn _glGetFragDataLocation(program: GLuint, name: GLchar) GLint;
@symbol("glGetFragDataLocationEXT") fn _glGetFragDataLocationEXT(program: GLuint, name: GLchar) GLint;
@symbol("glGetFragmentLightfvSGIX") fn _glGetFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetFragmentLightivSGIX") fn _glGetFragmentLightivSGIX(light: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFragmentMaterialfvSGIX") fn _glGetFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetFragmentMaterialivSGIX") fn _glGetFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFragmentShadingRatesEXT") fn _glGetFragmentShadingRatesEXT(samples: GLsizei, maxCount: GLsizei, count: GLsizei, shadingRates: GLenum) void;
@symbol("glGetFramebufferAttachmentParameteriv") fn _glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFramebufferAttachmentParameterivEXT") fn _glGetFramebufferAttachmentParameterivEXT(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFramebufferAttachmentParameterivOES") fn _glGetFramebufferAttachmentParameterivOES(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFramebufferParameterfvAMD") fn _glGetFramebufferParameterfvAMD(target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, _size: GLsizei, values: GLfloat) void;
@symbol("glGetFramebufferParameteriv") fn _glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetFramebufferParameterivEXT") fn _glGetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetFramebufferPixelLocalStorageSizeEXT") fn _glGetFramebufferPixelLocalStorageSizeEXT(target: GLuint) GLsizei;
@symbol("glGetGraphicsResetStatus") fn _glGetGraphicsResetStatus() GLenum;
@symbol("glGetGraphicsResetStatusEXT") fn _glGetGraphicsResetStatusEXT() GLenum;
@symbol("glGetGraphicsResetStatusKHR") fn _glGetGraphicsResetStatusKHR() GLenum;
@symbol("glGetHistogram") fn _glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, _type: GLenum, values: *void) void;
@symbol("glGetHistogramEXT") fn _glGetHistogramEXT(target: GLenum, reset: GLboolean, format: GLenum, _type: GLenum, values: *void) void;
@symbol("glGetHistogramParameterfv") fn _glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetHistogramParameterfvEXT") fn _glGetHistogramParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetHistogramParameteriv") fn _glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetHistogramParameterivEXT") fn _glGetHistogramParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetHistogramParameterxvOES") fn _glGetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetImageHandleNV") fn _glGetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) GLuint64;
@symbol("glGetImageTransformParameterfvHP") fn _glGetImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetImageTransformParameterivHP") fn _glGetImageTransformParameterivHP(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetInstrumentsSGIX") fn _glGetInstrumentsSGIX() GLint;
@symbol("glGetInteger64i_v") fn _glGetInteger64i_v(target: GLenum, index: GLuint, data: GLint64) void;
@symbol("glGetInteger64v") fn _glGetInteger64v(pname: GLenum, data: GLint64) void;
@symbol("glGetInteger64vAPPLE") fn _glGetInteger64vAPPLE(pname: GLenum, params: GLint64) void;
@symbol("glGetInteger64vEXT") fn _glGetInteger64vEXT(pname: GLenum, data: GLint64) void;
@symbol("glGetIntegerIndexedvEXT") fn _glGetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: GLint) void;
@symbol("glGetIntegeri_v") fn _glGetIntegeri_v(target: GLenum, index: GLuint, data: GLint) void;
@symbol("glGetIntegeri_vEXT") fn _glGetIntegeri_vEXT(target: GLenum, index: GLuint, data: GLint) void;
@symbol("glGetIntegerui64i_vNV") fn _glGetIntegerui64i_vNV(value: GLenum, index: GLuint, result: GLuint64EXT) void;
@symbol("glGetIntegerui64vNV") fn _glGetIntegerui64vNV(value: GLenum, result: GLuint64EXT) void;
@symbol("glGetIntegerv") fn _glGetIntegerv(pname: GLenum, data: GLint) void;
@symbol("glGetInternalformatSampleivNV") fn _glGetInternalformatSampleivNV(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: GLint) void;
@symbol("glGetInternalformati64v") fn _glGetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: GLint64) void;
@symbol("glGetInternalformativ") fn _glGetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: GLint) void;
@symbol("glGetInvariantBooleanvEXT") fn _glGetInvariantBooleanvEXT(id: GLuint, value: GLenum, data: GLboolean) void;
@symbol("glGetInvariantFloatvEXT") fn _glGetInvariantFloatvEXT(id: GLuint, value: GLenum, data: GLfloat) void;
@symbol("glGetInvariantIntegervEXT") fn _glGetInvariantIntegervEXT(id: GLuint, value: GLenum, data: GLint) void;
@symbol("glGetLightfv") fn _glGetLightfv(light: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetLightiv") fn _glGetLightiv(light: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetLightxOES") fn _glGetLightxOES(light: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetLightxv") fn _glGetLightxv(light: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetLightxvOES") fn _glGetLightxvOES(light: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetListParameterfvSGIX") fn _glGetListParameterfvSGIX(list: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetListParameterivSGIX") fn _glGetListParameterivSGIX(list: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetLocalConstantBooleanvEXT") fn _glGetLocalConstantBooleanvEXT(id: GLuint, value: GLenum, data: GLboolean) void;
@symbol("glGetLocalConstantFloatvEXT") fn _glGetLocalConstantFloatvEXT(id: GLuint, value: GLenum, data: GLfloat) void;
@symbol("glGetLocalConstantIntegervEXT") fn _glGetLocalConstantIntegervEXT(id: GLuint, value: GLenum, data: GLint) void;
@symbol("glGetMapAttribParameterfvNV") fn _glGetMapAttribParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetMapAttribParameterivNV") fn _glGetMapAttribParameterivNV(target: GLenum, index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetMapControlPointsNV") fn _glGetMapControlPointsNV(target: GLenum, index: GLuint, _type: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *void) void;
@symbol("glGetMapParameterfvNV") fn _glGetMapParameterfvNV(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMapParameterivNV") fn _glGetMapParameterivNV(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMapdv") fn _glGetMapdv(target: GLenum, query: GLenum, v: GLdouble) void;
@symbol("glGetMapfv") fn _glGetMapfv(target: GLenum, query: GLenum, v: GLfloat) void;
@symbol("glGetMapiv") fn _glGetMapiv(target: GLenum, query: GLenum, v: GLint) void;
@symbol("glGetMapxvOES") fn _glGetMapxvOES(target: GLenum, query: GLenum, v: GLfixed) void;
@symbol("glGetMaterialfv") fn _glGetMaterialfv(face: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMaterialiv") fn _glGetMaterialiv(face: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMaterialxOES") fn _glGetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glGetMaterialxv") fn _glGetMaterialxv(face: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetMaterialxvOES") fn _glGetMaterialxvOES(face: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetMemoryObjectDetachedResourcesuivNV") fn _glGetMemoryObjectDetachedResourcesuivNV(memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: GLuint) void;
@symbol("glGetMemoryObjectParameterivEXT") fn _glGetMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetMinmax") fn _glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, _type: GLenum, values: *void) void;
@symbol("glGetMinmaxEXT") fn _glGetMinmaxEXT(target: GLenum, reset: GLboolean, format: GLenum, _type: GLenum, values: *void) void;
@symbol("glGetMinmaxParameterfv") fn _glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMinmaxParameterfvEXT") fn _glGetMinmaxParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMinmaxParameteriv") fn _glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMinmaxParameterivEXT") fn _glGetMinmaxParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMultiTexEnvfvEXT") fn _glGetMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMultiTexEnvivEXT") fn _glGetMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMultiTexGendvEXT") fn _glGetMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble) void;
@symbol("glGetMultiTexGenfvEXT") fn _glGetMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMultiTexGenivEXT") fn _glGetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMultiTexImageEXT") fn _glGetMultiTexImageEXT(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, _type: GLenum, pixels: *void) void;
@symbol("glGetMultiTexLevelParameterfvEXT") fn _glGetMultiTexLevelParameterfvEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLfloat) void;
@symbol("glGetMultiTexLevelParameterivEXT") fn _glGetMultiTexLevelParameterivEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLint) void;
@symbol("glGetMultiTexParameterIivEXT") fn _glGetMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMultiTexParameterIuivEXT") fn _glGetMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glGetMultiTexParameterfvEXT") fn _glGetMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetMultiTexParameterivEXT") fn _glGetMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetMultisamplefv") fn _glGetMultisamplefv(pname: GLenum, index: GLuint, val: GLfloat) void;
@symbol("glGetMultisamplefvNV") fn _glGetMultisamplefvNV(pname: GLenum, index: GLuint, val: GLfloat) void;
@symbol("glGetNamedBufferParameteri64v") fn _glGetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: GLint64) void;
@symbol("glGetNamedBufferParameteriv") fn _glGetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetNamedBufferParameterivEXT") fn _glGetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetNamedBufferParameterui64vNV") fn _glGetNamedBufferParameterui64vNV(buffer: GLuint, pname: GLenum, params: GLuint64EXT) void;
@symbol("glGetNamedBufferPointerv") fn _glGetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: *void) void;
@symbol("glGetNamedBufferPointervEXT") fn _glGetNamedBufferPointervEXT(buffer: GLuint, pname: GLenum, params: *void) void;
@symbol("glGetNamedBufferSubData") fn _glGetNamedBufferSubData(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, data: *void) void;
@symbol("glGetNamedBufferSubDataEXT") fn _glGetNamedBufferSubDataEXT(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, data: *void) void;
@symbol("glGetNamedFramebufferParameterfvAMD") fn _glGetNamedFramebufferParameterfvAMD(framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, _size: GLsizei, values: GLfloat) void;
@symbol("glGetNamedFramebufferAttachmentParameteriv") fn _glGetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetNamedFramebufferAttachmentParameterivEXT") fn _glGetNamedFramebufferAttachmentParameterivEXT(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetNamedFramebufferParameteriv") fn _glGetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: GLint) void;
@symbol("glGetNamedFramebufferParameterivEXT") fn _glGetNamedFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetNamedProgramLocalParameterIivEXT") fn _glGetNamedProgramLocalParameterIivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLint) void;
@symbol("glGetNamedProgramLocalParameterIuivEXT") fn _glGetNamedProgramLocalParameterIuivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLuint) void;
@symbol("glGetNamedProgramLocalParameterdvEXT") fn _glGetNamedProgramLocalParameterdvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLdouble) void;
@symbol("glGetNamedProgramLocalParameterfvEXT") fn _glGetNamedProgramLocalParameterfvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLfloat) void;
@symbol("glGetNamedProgramStringEXT") fn _glGetNamedProgramStringEXT(program: GLuint, target: GLenum, pname: GLenum, string: *void) void;
@symbol("glGetNamedProgramivEXT") fn _glGetNamedProgramivEXT(program: GLuint, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetNamedRenderbufferParameteriv") fn _glGetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetNamedRenderbufferParameterivEXT") fn _glGetNamedRenderbufferParameterivEXT(renderbuffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetNextPerfQueryIdINTEL") fn _glGetNextPerfQueryIdINTEL(queryId: GLuint, nextQueryId: GLuint) void;
@symbol("glGetObjectBufferfvATI") fn _glGetObjectBufferfvATI(buffer: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetObjectBufferivATI") fn _glGetObjectBufferivATI(buffer: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetObjectLabel") fn _glGetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, _length: GLsizei, label: GLchar) void;
@symbol("glGetObjectLabelEXT") fn _glGetObjectLabelEXT(_type: GLenum, object: GLuint, bufSize: GLsizei, _length: GLsizei, label: GLchar) void;
@symbol("glGetObjectLabelKHR") fn _glGetObjectLabelKHR(identifier: GLenum, name: GLuint, bufSize: GLsizei, _length: GLsizei, label: GLchar) void;
@symbol("glGetObjectParameterivAPPLE") fn _glGetObjectParameterivAPPLE(objectType: GLenum, name: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetObjectPtrLabel") fn _glGetObjectPtrLabel(ptr: nullable *void, bufSize: GLsizei, _length: GLsizei, label: GLchar) void;
@symbol("glGetObjectPtrLabelKHR") fn _glGetObjectPtrLabelKHR(ptr: nullable *void, bufSize: GLsizei, _length: GLsizei, label: GLchar) void;
@symbol("glGetOcclusionQueryivNV") fn _glGetOcclusionQueryivNV(id: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetOcclusionQueryuivNV") fn _glGetOcclusionQueryuivNV(id: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetPathColorGenfvNV") fn _glGetPathColorGenfvNV(color: GLenum, pname: GLenum, value: GLfloat) void;
@symbol("glGetPathColorGenivNV") fn _glGetPathColorGenivNV(color: GLenum, pname: GLenum, value: GLint) void;
@symbol("glGetPathCommandsNV") fn _glGetPathCommandsNV(path: GLuint, commands: GLubyte) void;
@symbol("glGetPathCoordsNV") fn _glGetPathCoordsNV(path: GLuint, coords: GLfloat) void;
@symbol("glGetPathDashArrayNV") fn _glGetPathDashArrayNV(path: GLuint, dashArray: GLfloat) void;
@symbol("glGetPathLengthNV") fn _glGetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) GLfloat;
@symbol("glGetPathMetricRangeNV") fn _glGetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: GLfloat) void;
@symbol("glGetPathMetricsNV") fn _glGetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, stride: GLsizei, metrics: GLfloat) void;
@symbol("glGetPathParameterfvNV") fn _glGetPathParameterfvNV(path: GLuint, pname: GLenum, value: GLfloat) void;
@symbol("glGetPathParameterivNV") fn _glGetPathParameterivNV(path: GLuint, pname: GLenum, value: GLint) void;
@symbol("glGetPathSpacingNV") fn _glGetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: GLfloat) void;
@symbol("glGetPathTexGenfvNV") fn _glGetPathTexGenfvNV(texCoordSet: GLenum, pname: GLenum, value: GLfloat) void;
@symbol("glGetPathTexGenivNV") fn _glGetPathTexGenivNV(texCoordSet: GLenum, pname: GLenum, value: GLint) void;
@symbol("glGetPerfCounterInfoINTEL") fn _glGetPerfCounterInfoINTEL(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: GLchar, counterDescLength: GLuint, counterDesc: GLchar, counterOffset: GLuint, counterDataSize: GLuint, counterTypeEnum: GLuint, counterDataTypeEnum: GLuint, rawCounterMaxValue: GLuint64) void;
@symbol("glGetPerfMonitorCounterDataAMD") fn _glGetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: GLuint, bytesWritten: GLint) void;
@symbol("glGetPerfMonitorCounterInfoAMD") fn _glGetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: *void) void;
@symbol("glGetPerfMonitorCounterStringAMD") fn _glGetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, _length: GLsizei, counterString: GLchar) void;
@symbol("glGetPerfMonitorCountersAMD") fn _glGetPerfMonitorCountersAMD(group: GLuint, numCounters: GLint, maxActiveCounters: GLint, counterSize: GLsizei, counters: GLuint) void;
@symbol("glGetPerfMonitorGroupStringAMD") fn _glGetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, _length: GLsizei, groupString: GLchar) void;
@symbol("glGetPerfMonitorGroupsAMD") fn _glGetPerfMonitorGroupsAMD(numGroups: GLint, groupsSize: GLsizei, groups: GLuint) void;
@symbol("glGetPerfQueryDataINTEL") fn _glGetPerfQueryDataINTEL(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *void, bytesWritten: GLuint) void;
@symbol("glGetPerfQueryIdByNameINTEL") fn _glGetPerfQueryIdByNameINTEL(queryName: GLchar, queryId: GLuint) void;
@symbol("glGetPerfQueryInfoINTEL") fn _glGetPerfQueryInfoINTEL(queryId: GLuint, queryNameLength: GLuint, queryName: GLchar, dataSize: GLuint, noCounters: GLuint, noInstances: GLuint, capsMask: GLuint) void;
@symbol("glGetPixelMapfv") fn _glGetPixelMapfv(map: GLenum, values: GLfloat) void;
@symbol("glGetPixelMapuiv") fn _glGetPixelMapuiv(map: GLenum, values: GLuint) void;
@symbol("glGetPixelMapusv") fn _glGetPixelMapusv(map: GLenum, values: GLushort) void;
@symbol("glGetPixelMapxv") fn _glGetPixelMapxv(map: GLenum, _size: GLint, values: GLfixed) void;
@symbol("glGetPixelTexGenParameterfvSGIS") fn _glGetPixelTexGenParameterfvSGIS(pname: GLenum, params: GLfloat) void;
@symbol("glGetPixelTexGenParameterivSGIS") fn _glGetPixelTexGenParameterivSGIS(pname: GLenum, params: GLint) void;
@symbol("glGetPixelTransformParameterfvEXT") fn _glGetPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetPixelTransformParameterivEXT") fn _glGetPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetPointerIndexedvEXT") fn _glGetPointerIndexedvEXT(target: GLenum, index: GLuint, data: *void) void;
@symbol("glGetPointeri_vEXT") fn _glGetPointeri_vEXT(pname: GLenum, index: GLuint, params: *void) void;
@symbol("glGetPointerv") fn _glGetPointerv(pname: GLenum, params: *void) void;
@symbol("glGetPointervEXT") fn _glGetPointervEXT(pname: GLenum, params: *void) void;
@symbol("glGetPointervKHR") fn _glGetPointervKHR(pname: GLenum, params: *void) void;
@symbol("glGetPolygonStipple") fn _glGetPolygonStipple(mask: GLubyte) void;
@symbol("glGetProgramBinary") fn _glGetProgramBinary(program: GLuint, bufSize: GLsizei, _length: GLsizei, binaryFormat: GLenum, binary: *void) void;
@symbol("glGetProgramBinaryOES") fn _glGetProgramBinaryOES(program: GLuint, bufSize: GLsizei, _length: GLsizei, binaryFormat: GLenum, binary: *void) void;
@symbol("glGetProgramEnvParameterIivNV") fn _glGetProgramEnvParameterIivNV(target: GLenum, index: GLuint, params: GLint) void;
@symbol("glGetProgramEnvParameterIuivNV") fn _glGetProgramEnvParameterIuivNV(target: GLenum, index: GLuint, params: GLuint) void;
@symbol("glGetProgramInfoLog") fn _glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, _length: GLsizei, infoLog: GLchar) void;
@symbol("glGetProgramInterfaceiv") fn _glGetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetProgramLocalParameterIivNV") fn _glGetProgramLocalParameterIivNV(target: GLenum, index: GLuint, params: GLint) void;
@symbol("glGetProgramLocalParameterIuivNV") fn _glGetProgramLocalParameterIuivNV(target: GLenum, index: GLuint, params: GLuint) void;
@symbol("glGetProgramNamedParameterdvNV") fn _glGetProgramNamedParameterdvNV(id: GLuint, _len: GLsizei, name: GLubyte, params: GLdouble) void;
@symbol("glGetProgramNamedParameterfvNV") fn _glGetProgramNamedParameterfvNV(id: GLuint, _len: GLsizei, name: GLubyte, params: GLfloat) void;
@symbol("glGetProgramParameterdvNV") fn _glGetProgramParameterdvNV(target: GLenum, index: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glGetProgramParameterfvNV") fn _glGetProgramParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetProgramPipelineInfoLog") fn _glGetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, _length: GLsizei, infoLog: GLchar) void;
@symbol("glGetProgramPipelineInfoLogEXT") fn _glGetProgramPipelineInfoLogEXT(pipeline: GLuint, bufSize: GLsizei, _length: GLsizei, infoLog: GLchar) void;
@symbol("glGetProgramPipelineiv") fn _glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetProgramPipelineivEXT") fn _glGetProgramPipelineivEXT(pipeline: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetProgramResourceIndex") fn _glGetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: GLchar) GLuint;
@symbol("glGetProgramResourceLocation") fn _glGetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: GLchar) GLint;
@symbol("glGetProgramResourceLocationIndex") fn _glGetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: GLchar) GLint;
@symbol("glGetProgramResourceLocationIndexEXT") fn _glGetProgramResourceLocationIndexEXT(program: GLuint, programInterface: GLenum, name: GLchar) GLint;
@symbol("glGetProgramResourceName") fn _glGetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, _length: GLsizei, name: GLchar) void;
@symbol("glGetProgramResourcefvNV") fn _glGetProgramResourcefvNV(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum, count: GLsizei, _length: GLsizei, params: GLfloat) void;
@symbol("glGetProgramResourceiv") fn _glGetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum, count: GLsizei, _length: GLsizei, params: GLint) void;
@symbol("glGetProgramStageiv") fn _glGetProgramStageiv(program: GLuint, shader_type: GLenum, pname: GLenum, values: GLint) void;
@symbol("glGetProgramStringNV") fn _glGetProgramStringNV(id: GLuint, pname: GLenum, program: GLubyte) void;
@symbol("glGetProgramSubroutineParameteruivNV") fn _glGetProgramSubroutineParameteruivNV(target: GLenum, index: GLuint, param: GLuint) void;
@symbol("glGetProgramiv") fn _glGetProgramiv(program: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetProgramivNV") fn _glGetProgramivNV(id: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetQueryBufferObjecti64v") fn _glGetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, _offset: GLintptr) void;
@symbol("glGetQueryBufferObjectiv") fn _glGetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, _offset: GLintptr) void;
@symbol("glGetQueryBufferObjectui64v") fn _glGetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, _offset: GLintptr) void;
@symbol("glGetQueryBufferObjectuiv") fn _glGetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, _offset: GLintptr) void;
@symbol("glGetQueryIndexediv") fn _glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetQueryObjecti64v") fn _glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: GLint64) void;
@symbol("glGetQueryObjecti64vEXT") fn _glGetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: GLint64) void;
@symbol("glGetQueryObjectiv") fn _glGetQueryObjectiv(id: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetQueryObjectivEXT") fn _glGetQueryObjectivEXT(id: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetQueryObjectui64v") fn _glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: GLuint64) void;
@symbol("glGetQueryObjectui64vEXT") fn _glGetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: GLuint64) void;
@symbol("glGetQueryObjectuiv") fn _glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetQueryObjectuivEXT") fn _glGetQueryObjectuivEXT(id: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetQueryiv") fn _glGetQueryiv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetQueryivEXT") fn _glGetQueryivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetRenderbufferParameteriv") fn _glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetRenderbufferParameterivEXT") fn _glGetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetRenderbufferParameterivOES") fn _glGetRenderbufferParameterivOES(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetSamplerParameterIiv") fn _glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetSamplerParameterIivEXT") fn _glGetSamplerParameterIivEXT(sampler: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetSamplerParameterIivOES") fn _glGetSamplerParameterIivOES(sampler: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetSamplerParameterIuiv") fn _glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetSamplerParameterIuivEXT") fn _glGetSamplerParameterIuivEXT(sampler: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetSamplerParameterIuivOES") fn _glGetSamplerParameterIuivOES(sampler: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetSamplerParameterfv") fn _glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetSamplerParameteriv") fn _glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetSemaphoreParameterivNV") fn _glGetSemaphoreParameterivNV(semaphore: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetSemaphoreParameterui64vEXT") fn _glGetSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: GLuint64) void;
@symbol("glGetSeparableFilter") fn _glGetSeparableFilter(target: GLenum, format: GLenum, _type: GLenum, row: *void, column: *void, span: *void) void;
@symbol("glGetSeparableFilterEXT") fn _glGetSeparableFilterEXT(target: GLenum, format: GLenum, _type: GLenum, row: *void, column: *void, span: *void) void;
@symbol("glGetShaderInfoLog") fn _glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, _length: GLsizei, infoLog: GLchar) void;
@symbol("glGetShaderPrecisionFormat") fn _glGetShaderPrecisionFormat(shader_type: GLenum, precision_type: GLenum, range: GLint, precision: GLint) void;
@symbol("glGetShaderSource") fn _glGetShaderSource(shader: GLuint, bufSize: GLsizei, _length: GLsizei, source: GLchar) void;
@symbol("glGetShaderiv") fn _glGetShaderiv(shader: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetShadingRateImagePaletteNV") fn _glGetShadingRateImagePaletteNV(viewport: GLuint, entry: GLuint, rate: GLenum) void;
@symbol("glGetShadingRateSampleLocationivNV") fn _glGetShadingRateSampleLocationivNV(rate: GLenum, samples: GLuint, index: GLuint, location: GLint) void;
@symbol("glGetSharpenTexFuncSGIS") fn _glGetSharpenTexFuncSGIS(target: GLenum, points: GLfloat) void;
@symbol("glGetStageIndexNV") fn _glGetStageIndexNV(shader_type: GLenum) GLushort;
@symbol("glGetString") fn _glGetString(name: GLenum) const GLubyte;
@symbol("glGetStringi") fn _glGetStringi(name: GLenum, index: GLuint) const GLubyte;
@symbol("glGetSubroutineIndex") fn _glGetSubroutineIndex(program: GLuint, shader_type: GLenum, name: GLchar) GLuint;
@symbol("glGetSubroutineUniformLocation") fn _glGetSubroutineUniformLocation(program: GLuint, shader_type: GLenum, name: GLchar) GLint;
@symbol("glGetTexBumpParameterfvATI") fn _glGetTexBumpParameterfvATI(pname: GLenum, param: GLfloat) void;
@symbol("glGetTexBumpParameterivATI") fn _glGetTexBumpParameterivATI(pname: GLenum, param: GLint) void;
@symbol("glGetTexEnvfv") fn _glGetTexEnvfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetTexEnviv") fn _glGetTexEnviv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexEnvxv") fn _glGetTexEnvxv(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetTexEnvxvOES") fn _glGetTexEnvxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetTexFilterFuncSGIS") fn _glGetTexFilterFuncSGIS(target: GLenum, filter: GLenum, weights: GLfloat) void;
@symbol("glGetTexGendv") fn _glGetTexGendv(coord: GLenum, pname: GLenum, params: GLdouble) void;
@symbol("glGetTexGenfv") fn _glGetTexGenfv(coord: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetTexGenfvOES") fn _glGetTexGenfvOES(coord: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetTexGeniv") fn _glGetTexGeniv(coord: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexGenivOES") fn _glGetTexGenivOES(coord: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexGenxvOES") fn _glGetTexGenxvOES(coord: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetTexImage") fn _glGetTexImage(target: GLenum, level: GLint, format: GLenum, _type: GLenum, pixels: *void) void;
@symbol("glGetTexLevelParameterfv") fn _glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: GLfloat) void;
@symbol("glGetTexLevelParameteriv") fn _glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: GLint) void;
@symbol("glGetTexLevelParameterxvOES") fn _glGetTexLevelParameterxvOES(target: GLenum, level: GLint, pname: GLenum, params: GLfixed) void;
@symbol("glGetTexParameterIiv") fn _glGetTexParameterIiv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexParameterIivEXT") fn _glGetTexParameterIivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexParameterIivOES") fn _glGetTexParameterIivOES(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexParameterIuiv") fn _glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glGetTexParameterIuivEXT") fn _glGetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glGetTexParameterIuivOES") fn _glGetTexParameterIuivOES(target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glGetTexParameterPointervAPPLE") fn _glGetTexParameterPointervAPPLE(target: GLenum, pname: GLenum, params: *void) void;
@symbol("glGetTexParameterfv") fn _glGetTexParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetTexParameteriv") fn _glGetTexParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTexParameterxv") fn _glGetTexParameterxv(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetTexParameterxvOES") fn _glGetTexParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glGetTextureHandleIMG") fn _glGetTextureHandleIMG(texture: GLuint) GLuint64;
@symbol("glGetTextureHandleNV") fn _glGetTextureHandleNV(texture: GLuint) GLuint64;
@symbol("glGetTextureImage") fn _glGetTextureImage(texture: GLuint, level: GLint, format: GLenum, _type: GLenum, bufSize: GLsizei, pixels: *void) void;
@symbol("glGetTextureImageEXT") fn _glGetTextureImageEXT(texture: GLuint, target: GLenum, level: GLint, format: GLenum, _type: GLenum, pixels: *void) void;
@symbol("glGetTextureLevelParameterfv") fn _glGetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: GLfloat) void;
@symbol("glGetTextureLevelParameterfvEXT") fn _glGetTextureLevelParameterfvEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLfloat) void;
@symbol("glGetTextureLevelParameteriv") fn _glGetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: GLint) void;
@symbol("glGetTextureLevelParameterivEXT") fn _glGetTextureLevelParameterivEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLint) void;
@symbol("glGetTextureParameterIiv") fn _glGetTextureParameterIiv(texture: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetTextureParameterIivEXT") fn _glGetTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTextureParameterIuiv") fn _glGetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetTextureParameterIuivEXT") fn _glGetTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glGetTextureParameterfv") fn _glGetTextureParameterfv(texture: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetTextureParameterfvEXT") fn _glGetTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glGetTextureParameteriv") fn _glGetTextureParameteriv(texture: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetTextureParameterivEXT") fn _glGetTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glGetTextureSamplerHandleIMG") fn _glGetTextureSamplerHandleIMG(texture: GLuint, sampler: GLuint) GLuint64;
@symbol("glGetTextureSamplerHandleNV") fn _glGetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint) GLuint64;
@symbol("glGetTextureSubImage") fn _glGetTextureSubImage(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, bufSize: GLsizei, pixels: *void) void;
@symbol("glGetTrackMatrixivNV") fn _glGetTrackMatrixivNV(target: GLenum, address: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetTransformFeedbackVarying") fn _glGetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, _length: GLsizei, _size: GLsizei, _type: GLenum, name: GLchar) void;
@symbol("glGetTransformFeedbackVaryingEXT") fn _glGetTransformFeedbackVaryingEXT(program: GLuint, index: GLuint, bufSize: GLsizei, _length: GLsizei, _size: GLsizei, _type: GLenum, name: GLchar) void;
@symbol("glGetTransformFeedbackVaryingNV") fn _glGetTransformFeedbackVaryingNV(program: GLuint, index: GLuint, location: GLint) void;
@symbol("glGetTransformFeedbacki64_v") fn _glGetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint64) void;
@symbol("glGetTransformFeedbacki_v") fn _glGetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint) void;
@symbol("glGetTransformFeedbackiv") fn _glGetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: GLint) void;
@symbol("glGetTranslatedShaderSourceANGLE") fn _glGetTranslatedShaderSourceANGLE(shader: GLuint, bufSize: GLsizei, _length: GLsizei, source: GLchar) void;
@symbol("glGetUniformBlockIndex") fn _glGetUniformBlockIndex(program: GLuint, uniformBlockName: GLchar) GLuint;
@symbol("glGetUniformBufferSizeEXT") fn _glGetUniformBufferSizeEXT(program: GLuint, location: GLint) GLint;
@symbol("glGetUniformIndices") fn _glGetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: GLchar, uniformIndices: GLuint) void;
@symbol("glGetUniformLocation") fn _glGetUniformLocation(program: GLuint, name: GLchar) GLint;
@symbol("glGetUniformOffsetEXT") fn _glGetUniformOffsetEXT(program: GLuint, location: GLint) GLintptr;
@symbol("glGetUniformSubroutineuiv") fn _glGetUniformSubroutineuiv(shader_type: GLenum, location: GLint, params: GLuint) void;
@symbol("glGetUniformdv") fn _glGetUniformdv(program: GLuint, location: GLint, params: GLdouble) void;
@symbol("glGetUniformfv") fn _glGetUniformfv(program: GLuint, location: GLint, params: GLfloat) void;
@symbol("glGetUniformi64vNV") fn _glGetUniformi64vNV(program: GLuint, location: GLint, params: GLint64EXT) void;
@symbol("glGetUniformiv") fn _glGetUniformiv(program: GLuint, location: GLint, params: GLint) void;
@symbol("glGetUniformui64vNV") fn _glGetUniformui64vNV(program: GLuint, location: GLint, params: GLuint64EXT) void;
@symbol("glGetUniformuiv") fn _glGetUniformuiv(program: GLuint, location: GLint, params: GLuint) void;
@symbol("glGetUniformuivEXT") fn _glGetUniformuivEXT(program: GLuint, location: GLint, params: GLuint) void;
@symbol("glGetUnsignedBytevEXT") fn _glGetUnsignedBytevEXT(pname: GLenum, data: GLubyte) void;
@symbol("glGetUnsignedBytei_vEXT") fn _glGetUnsignedBytei_vEXT(target: GLenum, index: GLuint, data: GLubyte) void;
@symbol("glGetVariantArrayObjectfvATI") fn _glGetVariantArrayObjectfvATI(id: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetVariantArrayObjectivATI") fn _glGetVariantArrayObjectivATI(id: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVariantBooleanvEXT") fn _glGetVariantBooleanvEXT(id: GLuint, value: GLenum, data: GLboolean) void;
@symbol("glGetVariantFloatvEXT") fn _glGetVariantFloatvEXT(id: GLuint, value: GLenum, data: GLfloat) void;
@symbol("glGetVariantIntegervEXT") fn _glGetVariantIntegervEXT(id: GLuint, value: GLenum, data: GLint) void;
@symbol("glGetVariantPointervEXT") fn _glGetVariantPointervEXT(id: GLuint, value: GLenum, data: *void) void;
@symbol("glGetVaryingLocationNV") fn _glGetVaryingLocationNV(program: GLuint, name: GLchar) GLint;
@symbol("glGetVertexArrayIndexed64iv") fn _glGetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint64) void;
@symbol("glGetVertexArrayIndexediv") fn _glGetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint) void;
@symbol("glGetVertexArrayIntegeri_vEXT") fn _glGetVertexArrayIntegeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint) void;
@symbol("glGetVertexArrayIntegervEXT") fn _glGetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: GLint) void;
@symbol("glGetVertexArrayPointeri_vEXT") fn _glGetVertexArrayPointeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: *void) void;
@symbol("glGetVertexArrayPointervEXT") fn _glGetVertexArrayPointervEXT(vaobj: GLuint, pname: GLenum, param: *void) void;
@symbol("glGetVertexArrayiv") fn _glGetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: GLint) void;
@symbol("glGetVertexAttribArrayObjectfvATI") fn _glGetVertexAttribArrayObjectfvATI(index: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetVertexAttribArrayObjectivATI") fn _glGetVertexAttribArrayObjectivATI(index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVertexAttribIiv") fn _glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVertexAttribIivEXT") fn _glGetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVertexAttribIuiv") fn _glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetVertexAttribIuivEXT") fn _glGetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetVertexAttribLdv") fn _glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glGetVertexAttribLdvEXT") fn _glGetVertexAttribLdvEXT(index: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glGetVertexAttribLi64vNV") fn _glGetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: GLint64EXT) void;
@symbol("glGetVertexAttribLui64vNV") fn _glGetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: GLuint64EXT) void;
@symbol("glGetVertexAttribPointerv") fn _glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: *void) void;
@symbol("glGetVertexAttribPointervNV") fn _glGetVertexAttribPointervNV(index: GLuint, pname: GLenum, pointer: *void) void;
@symbol("glGetVertexAttribdv") fn _glGetVertexAttribdv(index: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glGetVertexAttribdvNV") fn _glGetVertexAttribdvNV(index: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glGetVertexAttribfv") fn _glGetVertexAttribfv(index: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetVertexAttribfvNV") fn _glGetVertexAttribfvNV(index: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetVertexAttribiv") fn _glGetVertexAttribiv(index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVertexAttribivNV") fn _glGetVertexAttribivNV(index: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVideoCaptureStreamdvNV") fn _glGetVideoCaptureStreamdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glGetVideoCaptureStreamfvNV") fn _glGetVideoCaptureStreamfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glGetVideoCaptureStreamivNV") fn _glGetVideoCaptureStreamivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVideoCaptureivNV") fn _glGetVideoCaptureivNV(video_capture_slot: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVideoi64vNV") fn _glGetVideoi64vNV(video_slot: GLuint, pname: GLenum, params: GLint64EXT) void;
@symbol("glGetVideoivNV") fn _glGetVideoivNV(video_slot: GLuint, pname: GLenum, params: GLint) void;
@symbol("glGetVideoui64vNV") fn _glGetVideoui64vNV(video_slot: GLuint, pname: GLenum, params: GLuint64EXT) void;
@symbol("glGetVideouivNV") fn _glGetVideouivNV(video_slot: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glGetnColorTable") fn _glGetnColorTable(target: GLenum, format: GLenum, _type: GLenum, bufSize: GLsizei, table: *void) void;
@symbol("glGetnCompressedTexImage") fn _glGetnCompressedTexImage(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *void) void;
@symbol("glGetnConvolutionFilter") fn _glGetnConvolutionFilter(target: GLenum, format: GLenum, _type: GLenum, bufSize: GLsizei, image: *void) void;
@symbol("glGetnHistogram") fn _glGetnHistogram(target: GLenum, reset: GLboolean, format: GLenum, _type: GLenum, bufSize: GLsizei, values: *void) void;
@symbol("glGetnMapdv") fn _glGetnMapdv(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLdouble) void;
@symbol("glGetnMapfv") fn _glGetnMapfv(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLfloat) void;
@symbol("glGetnMapiv") fn _glGetnMapiv(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLint) void;
@symbol("glGetnMinmax") fn _glGetnMinmax(target: GLenum, reset: GLboolean, format: GLenum, _type: GLenum, bufSize: GLsizei, values: *void) void;
@symbol("glGetnPixelMapfv") fn _glGetnPixelMapfv(map: GLenum, bufSize: GLsizei, values: GLfloat) void;
@symbol("glGetnPixelMapuiv") fn _glGetnPixelMapuiv(map: GLenum, bufSize: GLsizei, values: GLuint) void;
@symbol("glGetnPixelMapusv") fn _glGetnPixelMapusv(map: GLenum, bufSize: GLsizei, values: GLushort) void;
@symbol("glGetnPolygonStipple") fn _glGetnPolygonStipple(bufSize: GLsizei, pattern: GLubyte) void;
@symbol("glGetnSeparableFilter") fn _glGetnSeparableFilter(target: GLenum, format: GLenum, _type: GLenum, rowBufSize: GLsizei, row: *void, columnBufSize: GLsizei, column: *void, span: *void) void;
@symbol("glGetnTexImage") fn _glGetnTexImage(target: GLenum, level: GLint, format: GLenum, _type: GLenum, bufSize: GLsizei, pixels: *void) void;
@symbol("glGetnUniformdv") fn _glGetnUniformdv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble) void;
@symbol("glGetnUniformfv") fn _glGetnUniformfv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat) void;
@symbol("glGetnUniformfvEXT") fn _glGetnUniformfvEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat) void;
@symbol("glGetnUniformfvKHR") fn _glGetnUniformfvKHR(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat) void;
@symbol("glGetnUniformiv") fn _glGetnUniformiv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint) void;
@symbol("glGetnUniformivEXT") fn _glGetnUniformivEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint) void;
@symbol("glGetnUniformivKHR") fn _glGetnUniformivKHR(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint) void;
@symbol("glGetnUniformuiv") fn _glGetnUniformuiv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint) void;
@symbol("glGetnUniformuivKHR") fn _glGetnUniformuivKHR(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint) void;
@symbol("glGlobalAlphaFactorbSUN") fn _glGlobalAlphaFactorbSUN(factor: GLbyte) void;
@symbol("glGlobalAlphaFactordSUN") fn _glGlobalAlphaFactordSUN(factor: GLdouble) void;
@symbol("glGlobalAlphaFactorfSUN") fn _glGlobalAlphaFactorfSUN(factor: GLfloat) void;
@symbol("glGlobalAlphaFactoriSUN") fn _glGlobalAlphaFactoriSUN(factor: GLint) void;
@symbol("glGlobalAlphaFactorsSUN") fn _glGlobalAlphaFactorsSUN(factor: GLshort) void;
@symbol("glGlobalAlphaFactorubSUN") fn _glGlobalAlphaFactorubSUN(factor: GLubyte) void;
@symbol("glGlobalAlphaFactoruiSUN") fn _glGlobalAlphaFactoruiSUN(factor: GLuint) void;
@symbol("glGlobalAlphaFactorusSUN") fn _glGlobalAlphaFactorusSUN(factor: GLushort) void;
@symbol("glHint") fn _glHint(target: GLenum, mode: GLenum) void;
@symbol("glHintPGI") fn _glHintPGI(target: GLenum, mode: GLint) void;
@symbol("glHistogram") fn _glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) void;
@symbol("glHistogramEXT") fn _glHistogramEXT(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) void;
@symbol("glIglooInterfaceSGIX") fn _glIglooInterfaceSGIX(pname: GLenum, params: nullable *void) void;
@symbol("glImageTransformParameterfHP") fn _glImageTransformParameterfHP(target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glImageTransformParameterfvHP") fn _glImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glImageTransformParameteriHP") fn _glImageTransformParameteriHP(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glImageTransformParameterivHP") fn _glImageTransformParameterivHP(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glImportMemoryFdEXT") fn _glImportMemoryFdEXT(memory: GLuint, _size: GLuint64, handleType: GLenum, fd: GLint) void;
@symbol("glImportMemoryWin32HandleEXT") fn _glImportMemoryWin32HandleEXT(memory: GLuint, _size: GLuint64, handleType: GLenum, handle: *void) void;
@symbol("glImportMemoryWin32NameEXT") fn _glImportMemoryWin32NameEXT(memory: GLuint, _size: GLuint64, handleType: GLenum, name: nullable *void) void;
@symbol("glImportSemaphoreFdEXT") fn _glImportSemaphoreFdEXT(semaphore: GLuint, handleType: GLenum, fd: GLint) void;
@symbol("glImportSemaphoreWin32HandleEXT") fn _glImportSemaphoreWin32HandleEXT(semaphore: GLuint, handleType: GLenum, handle: *void) void;
@symbol("glImportSemaphoreWin32NameEXT") fn _glImportSemaphoreWin32NameEXT(semaphore: GLuint, handleType: GLenum, name: nullable *void) void;
@symbol("glIndexFormatNV") fn _glIndexFormatNV(_type: GLenum, stride: GLsizei) void;
@symbol("glIndexFuncEXT") fn _glIndexFuncEXT(func: GLenum, ref: GLclampf) void;
@symbol("glIndexMask") fn _glIndexMask(mask: GLuint) void;
@symbol("glIndexMaterialEXT") fn _glIndexMaterialEXT(face: GLenum, mode: GLenum) void;
@symbol("glIndexPointer") fn _glIndexPointer(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glIndexPointerEXT") fn _glIndexPointerEXT(_type: GLenum, stride: GLsizei, count: GLsizei, pointer: nullable *void) void;
@symbol("glIndexPointerListIBM") fn _glIndexPointerListIBM(_type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glIndexd") fn _glIndexd(c: GLdouble) void;
@symbol("glIndexdv") fn _glIndexdv(c: GLdouble) void;
@symbol("glIndexf") fn _glIndexf(c: GLfloat) void;
@symbol("glIndexfv") fn _glIndexfv(c: GLfloat) void;
@symbol("glIndexi") fn _glIndexi(c: GLint) void;
@symbol("glIndexiv") fn _glIndexiv(c: GLint) void;
@symbol("glIndexs") fn _glIndexs(c: GLshort) void;
@symbol("glIndexsv") fn _glIndexsv(c: GLshort) void;
@symbol("glIndexub") fn _glIndexub(c: GLubyte) void;
@symbol("glIndexubv") fn _glIndexubv(c: GLubyte) void;
@symbol("glIndexxOES") fn _glIndexxOES(component: GLfixed) void;
@symbol("glIndexxvOES") fn _glIndexxvOES(component: GLfixed) void;
@symbol("glInitNames") fn _glInitNames() void;
@symbol("glInsertComponentEXT") fn _glInsertComponentEXT(res: GLuint, src: GLuint, num: GLuint) void;
@symbol("glInsertEventMarkerEXT") fn _glInsertEventMarkerEXT(_length: GLsizei, marker: GLchar) void;
@symbol("glInstrumentsBufferSGIX") fn _glInstrumentsBufferSGIX(_size: GLsizei, buffer: GLint) void;
@symbol("glInterleavedArrays") fn _glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glInterpolatePathsNV") fn _glInterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) void;
@symbol("glInvalidateBufferData") fn _glInvalidateBufferData(buffer: GLuint) void;
@symbol("glInvalidateBufferSubData") fn _glInvalidateBufferSubData(buffer: GLuint, _offset: GLintptr, _length: GLsizeiptr) void;
@symbol("glInvalidateFramebuffer") fn _glInvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: GLenum) void;
@symbol("glInvalidateNamedFramebufferData") fn _glInvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum) void;
@symbol("glInvalidateNamedFramebufferSubData") fn _glInvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glInvalidateSubFramebuffer") fn _glInvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glInvalidateTexImage") fn _glInvalidateTexImage(texture: GLuint, level: GLint) void;
@symbol("glInvalidateTexSubImage") fn _glInvalidateTexSubImage(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glIsAsyncMarkerSGIX") fn _glIsAsyncMarkerSGIX(marker: GLuint) GLboolean;
@symbol("glIsBuffer") fn _glIsBuffer(buffer: GLuint) GLboolean;
@symbol("glIsBufferResidentNV") fn _glIsBufferResidentNV(target: GLenum) GLboolean;
@symbol("glIsCommandListNV") fn _glIsCommandListNV(list: GLuint) GLboolean;
@symbol("glIsEnabled") fn _glIsEnabled(cap: GLenum) GLboolean;
@symbol("glIsEnabledIndexedEXT") fn _glIsEnabledIndexedEXT(target: GLenum, index: GLuint) GLboolean;
@symbol("glIsEnabledi") fn _glIsEnabledi(target: GLenum, index: GLuint) GLboolean;
@symbol("glIsEnablediEXT") fn _glIsEnablediEXT(target: GLenum, index: GLuint) GLboolean;
@symbol("glIsEnablediNV") fn _glIsEnablediNV(target: GLenum, index: GLuint) GLboolean;
@symbol("glIsEnablediOES") fn _glIsEnablediOES(target: GLenum, index: GLuint) GLboolean;
@symbol("glIsFenceAPPLE") fn _glIsFenceAPPLE(fence: GLuint) GLboolean;
@symbol("glIsFenceNV") fn _glIsFenceNV(fence: GLuint) GLboolean;
@symbol("glIsFramebuffer") fn _glIsFramebuffer(framebuffer: GLuint) GLboolean;
@symbol("glIsFramebufferEXT") fn _glIsFramebufferEXT(framebuffer: GLuint) GLboolean;
@symbol("glIsFramebufferOES") fn _glIsFramebufferOES(framebuffer: GLuint) GLboolean;
@symbol("glIsImageHandleResidentNV") fn _glIsImageHandleResidentNV(handle: GLuint64) GLboolean;
@symbol("glIsList") fn _glIsList(list: GLuint) GLboolean;
@symbol("glIsMemoryObjectEXT") fn _glIsMemoryObjectEXT(memoryObject: GLuint) GLboolean;
@symbol("glIsNameAMD") fn _glIsNameAMD(identifier: GLenum, name: GLuint) GLboolean;
@symbol("glIsNamedBufferResidentNV") fn _glIsNamedBufferResidentNV(buffer: GLuint) GLboolean;
@symbol("glIsObjectBufferATI") fn _glIsObjectBufferATI(buffer: GLuint) GLboolean;
@symbol("glIsOcclusionQueryNV") fn _glIsOcclusionQueryNV(id: GLuint) GLboolean;
@symbol("glIsPathNV") fn _glIsPathNV(path: GLuint) GLboolean;
@symbol("glIsPointInFillPathNV") fn _glIsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) GLboolean;
@symbol("glIsPointInStrokePathNV") fn _glIsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat) GLboolean;
@symbol("glIsProgram") fn _glIsProgram(program: GLuint) GLboolean;
@symbol("glIsProgramNV") fn _glIsProgramNV(id: GLuint) GLboolean;
@symbol("glIsProgramPipeline") fn _glIsProgramPipeline(pipeline: GLuint) GLboolean;
@symbol("glIsProgramPipelineEXT") fn _glIsProgramPipelineEXT(pipeline: GLuint) GLboolean;
@symbol("glIsQuery") fn _glIsQuery(id: GLuint) GLboolean;
@symbol("glIsQueryEXT") fn _glIsQueryEXT(id: GLuint) GLboolean;
@symbol("glIsRenderbuffer") fn _glIsRenderbuffer(renderbuffer: GLuint) GLboolean;
@symbol("glIsRenderbufferEXT") fn _glIsRenderbufferEXT(renderbuffer: GLuint) GLboolean;
@symbol("glIsRenderbufferOES") fn _glIsRenderbufferOES(renderbuffer: GLuint) GLboolean;
@symbol("glIsSemaphoreEXT") fn _glIsSemaphoreEXT(semaphore: GLuint) GLboolean;
@symbol("glIsSampler") fn _glIsSampler(sampler: GLuint) GLboolean;
@symbol("glIsShader") fn _glIsShader(shader: GLuint) GLboolean;
@symbol("glIsStateNV") fn _glIsStateNV(state: GLuint) GLboolean;
@symbol("glIsTexture") fn _glIsTexture(texture: GLuint) GLboolean;
@symbol("glIsTextureEXT") fn _glIsTextureEXT(texture: GLuint) GLboolean;
@symbol("glIsTextureHandleResidentNV") fn _glIsTextureHandleResidentNV(handle: GLuint64) GLboolean;
@symbol("glIsTransformFeedback") fn _glIsTransformFeedback(id: GLuint) GLboolean;
@symbol("glIsTransformFeedbackNV") fn _glIsTransformFeedbackNV(id: GLuint) GLboolean;
@symbol("glIsVariantEnabledEXT") fn _glIsVariantEnabledEXT(id: GLuint, cap: GLenum) GLboolean;
@symbol("glIsVertexArray") fn _glIsVertexArray(array: GLuint) GLboolean;
@symbol("glIsVertexArrayAPPLE") fn _glIsVertexArrayAPPLE(array: GLuint) GLboolean;
@symbol("glIsVertexArrayOES") fn _glIsVertexArrayOES(array: GLuint) GLboolean;
@symbol("glIsVertexAttribEnabledAPPLE") fn _glIsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum) GLboolean;
@symbol("glLGPUCopyImageSubDataNVX") fn _glLGPUCopyImageSubDataNVX(sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glLGPUInterlockNVX") fn _glLGPUInterlockNVX() void;
@symbol("glLGPUNamedBufferSubDataNVX") fn _glLGPUNamedBufferSubDataNVX(gpuMask: GLbitfield, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, data: nullable *void) void;
@symbol("glLabelObjectEXT") fn _glLabelObjectEXT(_type: GLenum, object: GLuint, _length: GLsizei, label: GLchar) void;
@symbol("glLightEnviSGIX") fn _glLightEnviSGIX(pname: GLenum, param: GLint) void;
@symbol("glLightModelf") fn _glLightModelf(pname: GLenum, param: GLfloat) void;
@symbol("glLightModelfv") fn _glLightModelfv(pname: GLenum, params: GLfloat) void;
@symbol("glLightModeli") fn _glLightModeli(pname: GLenum, param: GLint) void;
@symbol("glLightModeliv") fn _glLightModeliv(pname: GLenum, params: GLint) void;
@symbol("glLightModelx") fn _glLightModelx(pname: GLenum, param: GLfixed) void;
@symbol("glLightModelxOES") fn _glLightModelxOES(pname: GLenum, param: GLfixed) void;
@symbol("glLightModelxv") fn _glLightModelxv(pname: GLenum, param: GLfixed) void;
@symbol("glLightModelxvOES") fn _glLightModelxvOES(pname: GLenum, param: GLfixed) void;
@symbol("glLightf") fn _glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glLightfv") fn _glLightfv(light: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glLighti") fn _glLighti(light: GLenum, pname: GLenum, param: GLint) void;
@symbol("glLightiv") fn _glLightiv(light: GLenum, pname: GLenum, params: GLint) void;
@symbol("glLightx") fn _glLightx(light: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glLightxOES") fn _glLightxOES(light: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glLightxv") fn _glLightxv(light: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glLightxvOES") fn _glLightxvOES(light: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glLineStipple") fn _glLineStipple(factor: GLint, pattern: GLushort) void;
@symbol("glLineWidth") fn _glLineWidth(width: GLfloat) void;
@symbol("glLineWidthx") fn _glLineWidthx(width: GLfixed) void;
@symbol("glLineWidthxOES") fn _glLineWidthxOES(width: GLfixed) void;
@symbol("glLinkProgram") fn _glLinkProgram(program: GLuint) void;
@symbol("glListBase") fn _glListBase(base: GLuint) void;
@symbol("glListDrawCommandsStatesClientNV") fn _glListDrawCommandsStatesClientNV(list: GLuint, segment: GLuint, indirects: nullable *void, _sizes: GLsizei, states: GLuint, fbos: GLuint, count: GLuint) void;
@symbol("glListParameterfSGIX") fn _glListParameterfSGIX(list: GLuint, pname: GLenum, param: GLfloat) void;
@symbol("glListParameterfvSGIX") fn _glListParameterfvSGIX(list: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glListParameteriSGIX") fn _glListParameteriSGIX(list: GLuint, pname: GLenum, param: GLint) void;
@symbol("glListParameterivSGIX") fn _glListParameterivSGIX(list: GLuint, pname: GLenum, params: GLint) void;
@symbol("glLoadIdentity") fn _glLoadIdentity() void;
@symbol("glLoadIdentityDeformationMapSGIX") fn _glLoadIdentityDeformationMapSGIX(mask: GLbitfield) void;
@symbol("glLoadMatrixd") fn _glLoadMatrixd(m: GLdouble) void;
@symbol("glLoadMatrixf") fn _glLoadMatrixf(m: GLfloat) void;
@symbol("glLoadMatrixx") fn _glLoadMatrixx(m: GLfixed) void;
@symbol("glLoadMatrixxOES") fn _glLoadMatrixxOES(m: GLfixed) void;
@symbol("glLoadName") fn _glLoadName(name: GLuint) void;
@symbol("glLoadPaletteFromModelViewMatrixOES") fn _glLoadPaletteFromModelViewMatrixOES() void;
@symbol("glLoadProgramNV") fn _glLoadProgramNV(target: GLenum, id: GLuint, _len: GLsizei, program: GLubyte) void;
@symbol("glLoadTransposeMatrixd") fn _glLoadTransposeMatrixd(m: GLdouble) void;
@symbol("glLoadTransposeMatrixf") fn _glLoadTransposeMatrixf(m: GLfloat) void;
@symbol("glLoadTransposeMatrixxOES") fn _glLoadTransposeMatrixxOES(m: GLfixed) void;
@symbol("glLockArraysEXT") fn _glLockArraysEXT(first: GLint, count: GLsizei) void;
@symbol("glLogicOp") fn _glLogicOp(opcode: GLenum) void;
@symbol("glMakeBufferNonResidentNV") fn _glMakeBufferNonResidentNV(target: GLenum) void;
@symbol("glMakeBufferResidentNV") fn _glMakeBufferResidentNV(target: GLenum, access: GLenum) void;
@symbol("glMakeImageHandleNonResidentNV") fn _glMakeImageHandleNonResidentNV(handle: GLuint64) void;
@symbol("glMakeImageHandleResidentNV") fn _glMakeImageHandleResidentNV(handle: GLuint64, access: GLenum) void;
@symbol("glMakeNamedBufferNonResidentNV") fn _glMakeNamedBufferNonResidentNV(buffer: GLuint) void;
@symbol("glMakeNamedBufferResidentNV") fn _glMakeNamedBufferResidentNV(buffer: GLuint, access: GLenum) void;
@symbol("glMakeTextureHandleNonResidentNV") fn _glMakeTextureHandleNonResidentNV(handle: GLuint64) void;
@symbol("glMakeTextureHandleResidentNV") fn _glMakeTextureHandleResidentNV(handle: GLuint64) void;
@symbol("glMap1d") fn _glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: GLdouble) void;
@symbol("glMap1f") fn _glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: GLfloat) void;
@symbol("glMap1xOES") fn _glMap1xOES(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) void;
@symbol("glMap2d") fn _glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: GLdouble) void;
@symbol("glMap2f") fn _glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: GLfloat) void;
@symbol("glMap2xOES") fn _glMap2xOES(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) void;
@symbol("glMapBuffer") fn _glMapBuffer(target: GLenum, access: GLenum) void;
@symbol("glMapBufferOES") fn _glMapBufferOES(target: GLenum, access: GLenum) void;
@symbol("glMapBufferRange") fn _glMapBufferRange(target: GLenum, _offset: GLintptr, _length: GLsizeiptr, access: GLbitfield) void;
@symbol("glMapBufferRangeEXT") fn _glMapBufferRangeEXT(target: GLenum, _offset: GLintptr, _length: GLsizeiptr, access: GLbitfield) void;
@symbol("glMapControlPointsNV") fn _glMapControlPointsNV(target: GLenum, index: GLuint, _type: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: nullable *void) void;
@symbol("glMapGrid1d") fn _glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) void;
@symbol("glMapGrid1f") fn _glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) void;
@symbol("glMapGrid1xOES") fn _glMapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed) void;
@symbol("glMapGrid2d") fn _glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
@symbol("glMapGrid2f") fn _glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
@symbol("glMapGrid2xOES") fn _glMapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) void;
@symbol("glMapNamedBuffer") fn _glMapNamedBuffer(buffer: GLuint, access: GLenum) void;
@symbol("glMapNamedBufferEXT") fn _glMapNamedBufferEXT(buffer: GLuint, access: GLenum) void;
@symbol("glMapNamedBufferRange") fn _glMapNamedBufferRange(buffer: GLuint, _offset: GLintptr, _length: GLsizeiptr, access: GLbitfield) void;
@symbol("glMapNamedBufferRangeEXT") fn _glMapNamedBufferRangeEXT(buffer: GLuint, _offset: GLintptr, _length: GLsizeiptr, access: GLbitfield) void;
@symbol("glMapObjectBufferATI") fn _glMapObjectBufferATI(buffer: GLuint) void;
@symbol("glMapParameterfvNV") fn _glMapParameterfvNV(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glMapParameterivNV") fn _glMapParameterivNV(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glMapTexture2DINTEL") fn _glMapTexture2DINTEL(texture: GLuint, level: GLint, access: GLbitfield, stride: GLint, layout: GLenum) void;
@symbol("glMapVertexAttrib1dAPPLE") fn _glMapVertexAttrib1dAPPLE(index: GLuint, _size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: GLdouble) void;
@symbol("glMapVertexAttrib1fAPPLE") fn _glMapVertexAttrib1fAPPLE(index: GLuint, _size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: GLfloat) void;
@symbol("glMapVertexAttrib2dAPPLE") fn _glMapVertexAttrib2dAPPLE(index: GLuint, _size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: GLdouble) void;
@symbol("glMapVertexAttrib2fAPPLE") fn _glMapVertexAttrib2fAPPLE(index: GLuint, _size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: GLfloat) void;
@symbol("glMaterialf") fn _glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glMaterialfv") fn _glMaterialfv(face: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glMateriali") fn _glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
@symbol("glMaterialiv") fn _glMaterialiv(face: GLenum, pname: GLenum, params: GLint) void;
@symbol("glMaterialx") fn _glMaterialx(face: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glMaterialxOES") fn _glMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glMaterialxv") fn _glMaterialxv(face: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glMaterialxvOES") fn _glMaterialxvOES(face: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glMatrixFrustumEXT") fn _glMatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
@symbol("glMatrixIndexPointerOES") fn _glMatrixIndexPointerOES(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glMatrixLoad3x2fNV") fn _glMatrixLoad3x2fNV(matrixMode: GLenum, m: GLfloat) void;
@symbol("glMatrixLoad3x3fNV") fn _glMatrixLoad3x3fNV(matrixMode: GLenum, m: GLfloat) void;
@symbol("glMatrixLoadIdentityEXT") fn _glMatrixLoadIdentityEXT(mode: GLenum) void;
@symbol("glMatrixLoadTranspose3x3fNV") fn _glMatrixLoadTranspose3x3fNV(matrixMode: GLenum, m: GLfloat) void;
@symbol("glMatrixLoadTransposedEXT") fn _glMatrixLoadTransposedEXT(mode: GLenum, m: GLdouble) void;
@symbol("glMatrixLoadTransposefEXT") fn _glMatrixLoadTransposefEXT(mode: GLenum, m: GLfloat) void;
@symbol("glMatrixLoaddEXT") fn _glMatrixLoaddEXT(mode: GLenum, m: GLdouble) void;
@symbol("glMatrixLoadfEXT") fn _glMatrixLoadfEXT(mode: GLenum, m: GLfloat) void;
@symbol("glMatrixMode") fn _glMatrixMode(mode: GLenum) void;
@symbol("glMatrixMult3x2fNV") fn _glMatrixMult3x2fNV(matrixMode: GLenum, m: GLfloat) void;
@symbol("glMatrixMult3x3fNV") fn _glMatrixMult3x3fNV(matrixMode: GLenum, m: GLfloat) void;
@symbol("glMatrixMultTranspose3x3fNV") fn _glMatrixMultTranspose3x3fNV(matrixMode: GLenum, m: GLfloat) void;
@symbol("glMatrixMultTransposedEXT") fn _glMatrixMultTransposedEXT(mode: GLenum, m: GLdouble) void;
@symbol("glMatrixMultTransposefEXT") fn _glMatrixMultTransposefEXT(mode: GLenum, m: GLfloat) void;
@symbol("glMatrixMultdEXT") fn _glMatrixMultdEXT(mode: GLenum, m: GLdouble) void;
@symbol("glMatrixMultfEXT") fn _glMatrixMultfEXT(mode: GLenum, m: GLfloat) void;
@symbol("glMatrixOrthoEXT") fn _glMatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
@symbol("glMatrixPopEXT") fn _glMatrixPopEXT(mode: GLenum) void;
@symbol("glMatrixPushEXT") fn _glMatrixPushEXT(mode: GLenum) void;
@symbol("glMatrixRotatedEXT") fn _glMatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glMatrixRotatefEXT") fn _glMatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glMatrixScaledEXT") fn _glMatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glMatrixScalefEXT") fn _glMatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glMatrixTranslatedEXT") fn _glMatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glMatrixTranslatefEXT") fn _glMatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glMaxShaderCompilerThreadsKHR") fn _glMaxShaderCompilerThreadsKHR(count: GLuint) void;
@symbol("glMemoryBarrier") fn _glMemoryBarrier(barriers: GLbitfield) void;
@symbol("glMemoryBarrierByRegion") fn _glMemoryBarrierByRegion(barriers: GLbitfield) void;
@symbol("glMemoryBarrierEXT") fn _glMemoryBarrierEXT(barriers: GLbitfield) void;
@symbol("glMemoryObjectParameterivEXT") fn _glMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: GLint) void;
@symbol("glMinSampleShading") fn _glMinSampleShading(value: GLfloat) void;
@symbol("glMinSampleShadingOES") fn _glMinSampleShadingOES(value: GLfloat) void;
@symbol("glMinmax") fn _glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) void;
@symbol("glMinmaxEXT") fn _glMinmaxEXT(target: GLenum, internalformat: GLenum, sink: GLboolean) void;
@symbol("glMultMatrixd") fn _glMultMatrixd(m: GLdouble) void;
@symbol("glMultMatrixf") fn _glMultMatrixf(m: GLfloat) void;
@symbol("glMultMatrixx") fn _glMultMatrixx(m: GLfixed) void;
@symbol("glMultMatrixxOES") fn _glMultMatrixxOES(m: GLfixed) void;
@symbol("glMultTransposeMatrixd") fn _glMultTransposeMatrixd(m: GLdouble) void;
@symbol("glMultTransposeMatrixf") fn _glMultTransposeMatrixf(m: GLfloat) void;
@symbol("glMultTransposeMatrixxOES") fn _glMultTransposeMatrixxOES(m: GLfixed) void;
@symbol("glMultiDrawArrays") fn _glMultiDrawArrays(mode: GLenum, first: GLint, count: GLsizei, drawcount: GLsizei) void;
@symbol("glMultiDrawArraysEXT") fn _glMultiDrawArraysEXT(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) void;
@symbol("glMultiDrawArraysIndirect") fn _glMultiDrawArraysIndirect(mode: GLenum, indirect: nullable *void, drawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawArraysIndirectAMD") fn _glMultiDrawArraysIndirectAMD(mode: GLenum, indirect: nullable *void, primcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawArraysIndirectBindlessCountNV") fn _glMultiDrawArraysIndirectBindlessCountNV(mode: GLenum, indirect: nullable *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) void;
@symbol("glMultiDrawArraysIndirectBindlessNV") fn _glMultiDrawArraysIndirectBindlessNV(mode: GLenum, indirect: nullable *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) void;
@symbol("glMultiDrawArraysIndirectCount") fn _glMultiDrawArraysIndirectCount(mode: GLenum, indirect: nullable *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawArraysIndirectEXT") fn _glMultiDrawArraysIndirectEXT(mode: GLenum, indirect: nullable *void, drawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawElementArrayAPPLE") fn _glMultiDrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) void;
@symbol("glMultiDrawElements") fn _glMultiDrawElements(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, drawcount: GLsizei) void;
@symbol("glMultiDrawElementsBaseVertex") fn _glMultiDrawElementsBaseVertex(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, drawcount: GLsizei, basevertex: GLint) void;
@symbol("glMultiDrawElementsBaseVertexEXT") fn _glMultiDrawElementsBaseVertexEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, drawcount: GLsizei, basevertex: GLint) void;
@symbol("glMultiDrawElementsEXT") fn _glMultiDrawElementsEXT(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, primcount: GLsizei) void;
@symbol("glMultiDrawElementsIndirect") fn _glMultiDrawElementsIndirect(mode: GLenum, _type: GLenum, indirect: nullable *void, drawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawElementsIndirectAMD") fn _glMultiDrawElementsIndirectAMD(mode: GLenum, _type: GLenum, indirect: nullable *void, primcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawElementsIndirectBindlessCountNV") fn _glMultiDrawElementsIndirectBindlessCountNV(mode: GLenum, _type: GLenum, indirect: nullable *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) void;
@symbol("glMultiDrawElementsIndirectBindlessNV") fn _glMultiDrawElementsIndirectBindlessNV(mode: GLenum, _type: GLenum, indirect: nullable *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) void;
@symbol("glMultiDrawElementsIndirectCount") fn _glMultiDrawElementsIndirectCount(mode: GLenum, _type: GLenum, indirect: nullable *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawElementsIndirectEXT") fn _glMultiDrawElementsIndirectEXT(mode: GLenum, _type: GLenum, indirect: nullable *void, drawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawMeshTasksIndirectNV") fn _glMultiDrawMeshTasksIndirectNV(indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawMeshTasksIndirectCountNV") fn _glMultiDrawMeshTasksIndirectCountNV(indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) void;
@symbol("glMultiDrawRangeElementArrayAPPLE") fn _glMultiDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei, primcount: GLsizei) void;
@symbol("glMultiModeDrawArraysIBM") fn _glMultiModeDrawArraysIBM(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei, modestride: GLint) void;
@symbol("glMultiModeDrawElementsIBM") fn _glMultiModeDrawElementsIBM(mode: GLenum, count: GLsizei, _type: GLenum, indices: nullable *void, primcount: GLsizei, modestride: GLint) void;
@symbol("glMultiTexBufferEXT") fn _glMultiTexBufferEXT(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) void;
@symbol("glMultiTexCoord1bOES") fn _glMultiTexCoord1bOES(texture: GLenum, s: GLbyte) void;
@symbol("glMultiTexCoord1bvOES") fn _glMultiTexCoord1bvOES(texture: GLenum, coords: GLbyte) void;
@symbol("glMultiTexCoord1d") fn _glMultiTexCoord1d(target: GLenum, s: GLdouble) void;
@symbol("glMultiTexCoord1dv") fn _glMultiTexCoord1dv(target: GLenum, v: GLdouble) void;
@symbol("glMultiTexCoord1f") fn _glMultiTexCoord1f(target: GLenum, s: GLfloat) void;
@symbol("glMultiTexCoord1fv") fn _glMultiTexCoord1fv(target: GLenum, v: GLfloat) void;
@symbol("glMultiTexCoord1hNV") fn _glMultiTexCoord1hNV(target: GLenum, s: GLhalfNV) void;
@symbol("glMultiTexCoord1hvNV") fn _glMultiTexCoord1hvNV(target: GLenum, v: GLhalfNV) void;
@symbol("glMultiTexCoord1i") fn _glMultiTexCoord1i(target: GLenum, s: GLint) void;
@symbol("glMultiTexCoord1iv") fn _glMultiTexCoord1iv(target: GLenum, v: GLint) void;
@symbol("glMultiTexCoord1s") fn _glMultiTexCoord1s(target: GLenum, s: GLshort) void;
@symbol("glMultiTexCoord1sv") fn _glMultiTexCoord1sv(target: GLenum, v: GLshort) void;
@symbol("glMultiTexCoord1xOES") fn _glMultiTexCoord1xOES(texture: GLenum, s: GLfixed) void;
@symbol("glMultiTexCoord1xvOES") fn _glMultiTexCoord1xvOES(texture: GLenum, coords: GLfixed) void;
@symbol("glMultiTexCoord2bOES") fn _glMultiTexCoord2bOES(texture: GLenum, s: GLbyte, t: GLbyte) void;
@symbol("glMultiTexCoord2bvOES") fn _glMultiTexCoord2bvOES(texture: GLenum, coords: GLbyte) void;
@symbol("glMultiTexCoord2d") fn _glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) void;
@symbol("glMultiTexCoord2dv") fn _glMultiTexCoord2dv(target: GLenum, v: GLdouble) void;
@symbol("glMultiTexCoord2f") fn _glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) void;
@symbol("glMultiTexCoord2fv") fn _glMultiTexCoord2fv(target: GLenum, v: GLfloat) void;
@symbol("glMultiTexCoord2hNV") fn _glMultiTexCoord2hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV) void;
@symbol("glMultiTexCoord2hvNV") fn _glMultiTexCoord2hvNV(target: GLenum, v: GLhalfNV) void;
@symbol("glMultiTexCoord2i") fn _glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) void;
@symbol("glMultiTexCoord2iv") fn _glMultiTexCoord2iv(target: GLenum, v: GLint) void;
@symbol("glMultiTexCoord2s") fn _glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) void;
@symbol("glMultiTexCoord2sv") fn _glMultiTexCoord2sv(target: GLenum, v: GLshort) void;
@symbol("glMultiTexCoord2xOES") fn _glMultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed) void;
@symbol("glMultiTexCoord2xvOES") fn _glMultiTexCoord2xvOES(texture: GLenum, coords: GLfixed) void;
@symbol("glMultiTexCoord3bOES") fn _glMultiTexCoord3bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) void;
@symbol("glMultiTexCoord3bvOES") fn _glMultiTexCoord3bvOES(texture: GLenum, coords: GLbyte) void;
@symbol("glMultiTexCoord3d") fn _glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
@symbol("glMultiTexCoord3dv") fn _glMultiTexCoord3dv(target: GLenum, v: GLdouble) void;
@symbol("glMultiTexCoord3f") fn _glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
@symbol("glMultiTexCoord3fv") fn _glMultiTexCoord3fv(target: GLenum, v: GLfloat) void;
@symbol("glMultiTexCoord3hNV") fn _glMultiTexCoord3hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) void;
@symbol("glMultiTexCoord3hvNV") fn _glMultiTexCoord3hvNV(target: GLenum, v: GLhalfNV) void;
@symbol("glMultiTexCoord3i") fn _glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) void;
@symbol("glMultiTexCoord3iv") fn _glMultiTexCoord3iv(target: GLenum, v: GLint) void;
@symbol("glMultiTexCoord3s") fn _glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
@symbol("glMultiTexCoord3sv") fn _glMultiTexCoord3sv(target: GLenum, v: GLshort) void;
@symbol("glMultiTexCoord3xOES") fn _glMultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) void;
@symbol("glMultiTexCoord3xvOES") fn _glMultiTexCoord3xvOES(texture: GLenum, coords: GLfixed) void;
@symbol("glMultiTexCoord4bOES") fn _glMultiTexCoord4bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) void;
@symbol("glMultiTexCoord4bvOES") fn _glMultiTexCoord4bvOES(texture: GLenum, coords: GLbyte) void;
@symbol("glMultiTexCoord4d") fn _glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
@symbol("glMultiTexCoord4dv") fn _glMultiTexCoord4dv(target: GLenum, v: GLdouble) void;
@symbol("glMultiTexCoord4f") fn _glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
@symbol("glMultiTexCoord4fv") fn _glMultiTexCoord4fv(target: GLenum, v: GLfloat) void;
@symbol("glMultiTexCoord4hNV") fn _glMultiTexCoord4hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) void;
@symbol("glMultiTexCoord4hvNV") fn _glMultiTexCoord4hvNV(target: GLenum, v: GLhalfNV) void;
@symbol("glMultiTexCoord4i") fn _glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
@symbol("glMultiTexCoord4iv") fn _glMultiTexCoord4iv(target: GLenum, v: GLint) void;
@symbol("glMultiTexCoord4s") fn _glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
@symbol("glMultiTexCoord4sv") fn _glMultiTexCoord4sv(target: GLenum, v: GLshort) void;
@symbol("glMultiTexCoord4x") fn _glMultiTexCoord4x(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) void;
@symbol("glMultiTexCoord4xOES") fn _glMultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) void;
@symbol("glMultiTexCoord4xvOES") fn _glMultiTexCoord4xvOES(texture: GLenum, coords: GLfixed) void;
@symbol("glMultiTexCoordP1ui") fn _glMultiTexCoordP1ui(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP1uiv") fn _glMultiTexCoordP1uiv(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP2ui") fn _glMultiTexCoordP2ui(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP2uiv") fn _glMultiTexCoordP2uiv(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP3ui") fn _glMultiTexCoordP3ui(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP3uiv") fn _glMultiTexCoordP3uiv(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP4ui") fn _glMultiTexCoordP4ui(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordP4uiv") fn _glMultiTexCoordP4uiv(texture: GLenum, _type: GLenum, coords: GLuint) void;
@symbol("glMultiTexCoordPointerEXT") fn _glMultiTexCoordPointerEXT(texunit: GLenum, _size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glMultiTexEnvfEXT") fn _glMultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glMultiTexEnvfvEXT") fn _glMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glMultiTexEnviEXT") fn _glMultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glMultiTexEnvivEXT") fn _glMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glMultiTexGendEXT") fn _glMultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) void;
@symbol("glMultiTexGendvEXT") fn _glMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble) void;
@symbol("glMultiTexGenfEXT") fn _glMultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glMultiTexGenfvEXT") fn _glMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glMultiTexGeniEXT") fn _glMultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) void;
@symbol("glMultiTexGenivEXT") fn _glMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint) void;
@symbol("glMultiTexImage1DEXT") fn _glMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glMultiTexImage2DEXT") fn _glMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glMultiTexImage3DEXT") fn _glMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glMultiTexParameterIivEXT") fn _glMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glMultiTexParameterIuivEXT") fn _glMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glMultiTexParameterfEXT") fn _glMultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glMultiTexParameterfvEXT") fn _glMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glMultiTexParameteriEXT") fn _glMultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glMultiTexParameterivEXT") fn _glMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glMultiTexRenderbufferEXT") fn _glMultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint) void;
@symbol("glMultiTexSubImage1DEXT") fn _glMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glMultiTexSubImage2DEXT") fn _glMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glMultiTexSubImage3DEXT") fn _glMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glMulticastBarrierNV") fn _glMulticastBarrierNV() void;
@symbol("glMulticastBlitFramebufferNV") fn _glMulticastBlitFramebufferNV(srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
@symbol("glMulticastBufferSubDataNV") fn _glMulticastBufferSubDataNV(gpuMask: GLbitfield, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, data: nullable *void) void;
@symbol("glMulticastCopyBufferSubDataNV") fn _glMulticastCopyBufferSubDataNV(readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, _size: GLsizeiptr) void;
@symbol("glMulticastCopyImageSubDataNV") fn _glMulticastCopyImageSubDataNV(srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) void;
@symbol("glMulticastFramebufferSampleLocationsfvNV") fn _glMulticastFramebufferSampleLocationsfvNV(gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glMulticastGetQueryObjecti64vNV") fn _glMulticastGetQueryObjecti64vNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLint64) void;
@symbol("glMulticastGetQueryObjectivNV") fn _glMulticastGetQueryObjectivNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLint) void;
@symbol("glMulticastGetQueryObjectui64vNV") fn _glMulticastGetQueryObjectui64vNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLuint64) void;
@symbol("glMulticastGetQueryObjectuivNV") fn _glMulticastGetQueryObjectuivNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glMulticastScissorArrayvNVX") fn _glMulticastScissorArrayvNVX(gpu: GLuint, first: GLuint, count: GLsizei, v: GLint) void;
@symbol("glMulticastViewportArrayvNVX") fn _glMulticastViewportArrayvNVX(gpu: GLuint, first: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glMulticastViewportPositionWScaleNVX") fn _glMulticastViewportPositionWScaleNVX(gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) void;
@symbol("glNamedBufferAttachMemoryNV") fn _glNamedBufferAttachMemoryNV(buffer: GLuint, memory: GLuint, _offset: GLuint64) void;
@symbol("glNamedBufferData") fn _glNamedBufferData(buffer: GLuint, _size: GLsizeiptr, data: nullable *void, usage: GLenum) void;
@symbol("glNamedBufferDataEXT") fn _glNamedBufferDataEXT(buffer: GLuint, _size: GLsizeiptr, data: nullable *void, usage: GLenum) void;
@symbol("glNamedBufferPageCommitmentEXT") fn _glNamedBufferPageCommitmentEXT(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, commit: GLboolean) void;
@symbol("glNamedBufferPageCommitmentMemNV") fn _glNamedBufferPageCommitmentMemNV(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) void;
@symbol("glNamedBufferStorage") fn _glNamedBufferStorage(buffer: GLuint, _size: GLsizeiptr, data: nullable *void, flags: GLbitfield) void;
@symbol("glNamedBufferStorageExternalEXT") fn _glNamedBufferStorageExternalEXT(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) void;
@symbol("glNamedBufferStorageEXT") fn _glNamedBufferStorageEXT(buffer: GLuint, _size: GLsizeiptr, data: nullable *void, flags: GLbitfield) void;
@symbol("glNamedBufferStorageMemEXT") fn _glNamedBufferStorageMemEXT(buffer: GLuint, _size: GLsizeiptr, memory: GLuint, _offset: GLuint64) void;
@symbol("glNamedBufferSubData") fn _glNamedBufferSubData(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, data: nullable *void) void;
@symbol("glNamedBufferSubDataEXT") fn _glNamedBufferSubDataEXT(buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr, data: nullable *void) void;
@symbol("glNamedCopyBufferSubDataEXT") fn _glNamedCopyBufferSubDataEXT(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, _size: GLsizeiptr) void;
@symbol("glNamedFramebufferDrawBuffer") fn _glNamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum) void;
@symbol("glNamedFramebufferDrawBuffers") fn _glNamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: GLenum) void;
@symbol("glNamedFramebufferParameteri") fn _glNamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint) void;
@symbol("glNamedFramebufferParameteriEXT") fn _glNamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint) void;
@symbol("glNamedFramebufferReadBuffer") fn _glNamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum) void;
@symbol("glNamedFramebufferRenderbuffer") fn _glNamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
@symbol("glNamedFramebufferRenderbufferEXT") fn _glNamedFramebufferRenderbufferEXT(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
@symbol("glNamedFramebufferSampleLocationsfvNV") fn _glNamedFramebufferSampleLocationsfvNV(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glNamedFramebufferTexture") fn _glNamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) void;
@symbol("glNamedFramebufferSamplePositionsfvAMD") fn _glNamedFramebufferSamplePositionsfvAMD(framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: GLfloat) void;
@symbol("glNamedFramebufferTexture1DEXT") fn _glNamedFramebufferTexture1DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glNamedFramebufferTexture2DEXT") fn _glNamedFramebufferTexture2DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
@symbol("glNamedFramebufferTexture3DEXT") fn _glNamedFramebufferTexture3DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, z_offset: GLint) void;
@symbol("glNamedFramebufferTextureEXT") fn _glNamedFramebufferTextureEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) void;
@symbol("glNamedFramebufferTextureFaceEXT") fn _glNamedFramebufferTextureFaceEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) void;
@symbol("glNamedFramebufferTextureLayer") fn _glNamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) void;
@symbol("glNamedFramebufferTextureLayerEXT") fn _glNamedFramebufferTextureLayerEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) void;
@symbol("glNamedProgramLocalParameter4dEXT") fn _glNamedProgramLocalParameter4dEXT(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glNamedProgramLocalParameter4dvEXT") fn _glNamedProgramLocalParameter4dvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLdouble) void;
@symbol("glNamedProgramLocalParameter4fEXT") fn _glNamedProgramLocalParameter4fEXT(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glNamedProgramLocalParameter4fvEXT") fn _glNamedProgramLocalParameter4fvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLfloat) void;
@symbol("glNamedProgramLocalParameterI4iEXT") fn _glNamedProgramLocalParameterI4iEXT(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glNamedProgramLocalParameterI4ivEXT") fn _glNamedProgramLocalParameterI4ivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLint) void;
@symbol("glNamedProgramLocalParameterI4uiEXT") fn _glNamedProgramLocalParameterI4uiEXT(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) void;
@symbol("glNamedProgramLocalParameterI4uivEXT") fn _glNamedProgramLocalParameterI4uivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLuint) void;
@symbol("glNamedProgramLocalParameters4fvEXT") fn _glNamedProgramLocalParameters4fvEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLfloat) void;
@symbol("glNamedProgramLocalParametersI4ivEXT") fn _glNamedProgramLocalParametersI4ivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLint) void;
@symbol("glNamedProgramLocalParametersI4uivEXT") fn _glNamedProgramLocalParametersI4uivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLuint) void;
@symbol("glNamedProgramStringEXT") fn _glNamedProgramStringEXT(program: GLuint, target: GLenum, format: GLenum, _len: GLsizei, string: nullable *void) void;
@symbol("glNamedRenderbufferStorage") fn _glNamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glNamedRenderbufferStorageEXT") fn _glNamedRenderbufferStorageEXT(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glNamedRenderbufferStorageMultisample") fn _glNamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glNamedRenderbufferStorageMultisampleAdvancedAMD") fn _glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glNamedRenderbufferStorageMultisampleCoverageEXT") fn _glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glNamedRenderbufferStorageMultisampleEXT") fn _glNamedRenderbufferStorageMultisampleEXT(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glNewList") fn _glNewList(list: GLuint, mode: GLenum) void;
@symbol("glNewObjectBufferATI") fn _glNewObjectBufferATI(_size: GLsizei, pointer: nullable *void, usage: GLenum) GLuint;
@symbol("glNormal3b") fn _glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
@symbol("glNormal3bv") fn _glNormal3bv(v: GLbyte) void;
@symbol("glNormal3d") fn _glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
@symbol("glNormal3dv") fn _glNormal3dv(v: GLdouble) void;
@symbol("glNormal3f") fn _glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
@symbol("glNormal3fVertex3fSUN") fn _glNormal3fVertex3fSUN(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glNormal3fVertex3fvSUN") fn _glNormal3fVertex3fvSUN(n: GLfloat, v: GLfloat) void;
@symbol("glNormal3fv") fn _glNormal3fv(v: GLfloat) void;
@symbol("glNormal3hNV") fn _glNormal3hNV(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) void;
@symbol("glNormal3hvNV") fn _glNormal3hvNV(v: GLhalfNV) void;
@symbol("glNormal3i") fn _glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
@symbol("glNormal3iv") fn _glNormal3iv(v: GLint) void;
@symbol("glNormal3s") fn _glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
@symbol("glNormal3sv") fn _glNormal3sv(v: GLshort) void;
@symbol("glNormal3x") fn _glNormal3x(nx: GLfixed, ny: GLfixed, nz: GLfixed) void;
@symbol("glNormal3xOES") fn _glNormal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed) void;
@symbol("glNormal3xvOES") fn _glNormal3xvOES(coords: GLfixed) void;
@symbol("glNormalFormatNV") fn _glNormalFormatNV(_type: GLenum, stride: GLsizei) void;
@symbol("glNormalP3ui") fn _glNormalP3ui(_type: GLenum, coords: GLuint) void;
@symbol("glNormalP3uiv") fn _glNormalP3uiv(_type: GLenum, coords: GLuint) void;
@symbol("glNormalPointer") fn _glNormalPointer(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glNormalPointerEXT") fn _glNormalPointerEXT(_type: GLenum, stride: GLsizei, count: GLsizei, pointer: nullable *void) void;
@symbol("glNormalPointerListIBM") fn _glNormalPointerListIBM(_type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glNormalPointervINTEL") fn _glNormalPointervINTEL(_type: GLenum, pointer: nullable *void) void;
@symbol("glNormalStream3bATI") fn _glNormalStream3bATI(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
@symbol("glNormalStream3bvATI") fn _glNormalStream3bvATI(stream: GLenum, coords: GLbyte) void;
@symbol("glNormalStream3dATI") fn _glNormalStream3dATI(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
@symbol("glNormalStream3dvATI") fn _glNormalStream3dvATI(stream: GLenum, coords: GLdouble) void;
@symbol("glNormalStream3fATI") fn _glNormalStream3fATI(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
@symbol("glNormalStream3fvATI") fn _glNormalStream3fvATI(stream: GLenum, coords: GLfloat) void;
@symbol("glNormalStream3iATI") fn _glNormalStream3iATI(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) void;
@symbol("glNormalStream3ivATI") fn _glNormalStream3ivATI(stream: GLenum, coords: GLint) void;
@symbol("glNormalStream3sATI") fn _glNormalStream3sATI(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) void;
@symbol("glNormalStream3svATI") fn _glNormalStream3svATI(stream: GLenum, coords: GLshort) void;
@symbol("glObjectLabel") fn _glObjectLabel(identifier: GLenum, name: GLuint, _length: GLsizei, label: GLchar) void;
@symbol("glObjectLabelKHR") fn _glObjectLabelKHR(identifier: GLenum, name: GLuint, _length: GLsizei, label: GLchar) void;
@symbol("glObjectPtrLabel") fn _glObjectPtrLabel(ptr: nullable *void, _length: GLsizei, label: GLchar) void;
@symbol("glObjectPtrLabelKHR") fn _glObjectPtrLabelKHR(ptr: nullable *void, _length: GLsizei, label: GLchar) void;
@symbol("glObjectPurgeableAPPLE") fn _glObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) GLenum;
@symbol("glObjectUnpurgeableAPPLE") fn _glObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) GLenum;
@symbol("glOrtho") fn _glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
@symbol("glOrthof") fn _glOrthof(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) void;
@symbol("glOrthofOES") fn _glOrthofOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) void;
@symbol("glOrthox") fn _glOrthox(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) void;
@symbol("glOrthoxOES") fn _glOrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) void;
@symbol("glPNTrianglesfATI") fn _glPNTrianglesfATI(pname: GLenum, param: GLfloat) void;
@symbol("glPNTrianglesiATI") fn _glPNTrianglesiATI(pname: GLenum, param: GLint) void;
@symbol("glPassTexCoordATI") fn _glPassTexCoordATI(dst: GLuint, coord: GLuint, swizzle: GLenum) void;
@symbol("glPassThrough") fn _glPassThrough(token: GLfloat) void;
@symbol("glPassThroughxOES") fn _glPassThroughxOES(token: GLfixed) void;
@symbol("glPatchParameterfv") fn _glPatchParameterfv(pname: GLenum, values: GLfloat) void;
@symbol("glPatchParameteri") fn _glPatchParameteri(pname: GLenum, value: GLint) void;
@symbol("glPatchParameteriEXT") fn _glPatchParameteriEXT(pname: GLenum, value: GLint) void;
@symbol("glPatchParameteriOES") fn _glPatchParameteriOES(pname: GLenum, value: GLint) void;
@symbol("glPathColorGenNV") fn _glPathColorGenNV(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: GLfloat) void;
@symbol("glPathCommandsNV") fn _glPathCommandsNV(path: GLuint, numCommands: GLsizei, commands: GLubyte, numCoords: GLsizei, coordType: GLenum, coords: nullable *void) void;
@symbol("glPathCoordsNV") fn _glPathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: nullable *void) void;
@symbol("glPathCoverDepthFuncNV") fn _glPathCoverDepthFuncNV(func: GLenum) void;
@symbol("glPathDashArrayNV") fn _glPathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: GLfloat) void;
@symbol("glPathFogGenNV") fn _glPathFogGenNV(genMode: GLenum) void;
@symbol("glPathGlyphIndexArrayNV") fn _glPathGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontName: nullable *void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) GLenum;
@symbol("glPathGlyphIndexRangeNV") fn _glPathGlyphIndexRangeNV(fontTarget: GLenum, fontName: nullable *void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint) GLenum;
@symbol("glPathGlyphRangeNV") fn _glPathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: nullable *void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) void;
@symbol("glPathGlyphsNV") fn _glPathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: nullable *void, fontStyle: GLbitfield, numGlyphs: GLsizei, _type: GLenum, charcodes: nullable *void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) void;
@symbol("glPathMemoryGlyphIndexArrayNV") fn _glPathMemoryGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: nullable *void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) GLenum;
@symbol("glPathParameterfNV") fn _glPathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat) void;
@symbol("glPathParameterfvNV") fn _glPathParameterfvNV(path: GLuint, pname: GLenum, value: GLfloat) void;
@symbol("glPathParameteriNV") fn _glPathParameteriNV(path: GLuint, pname: GLenum, value: GLint) void;
@symbol("glPathParameterivNV") fn _glPathParameterivNV(path: GLuint, pname: GLenum, value: GLint) void;
@symbol("glPathStencilDepthOffsetNV") fn _glPathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat) void;
@symbol("glPathStencilFuncNV") fn _glPathStencilFuncNV(func: GLenum, ref: GLint, mask: GLuint) void;
@symbol("glPathStringNV") fn _glPathStringNV(path: GLuint, format: GLenum, _length: GLsizei, pathString: nullable *void) void;
@symbol("glPathSubCommandsNV") fn _glPathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: GLubyte, numCoords: GLsizei, coordType: GLenum, coords: nullable *void) void;
@symbol("glPathSubCoordsNV") fn _glPathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: nullable *void) void;
@symbol("glPathTexGenNV") fn _glPathTexGenNV(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: GLfloat) void;
@symbol("glPauseTransformFeedback") fn _glPauseTransformFeedback() void;
@symbol("glPauseTransformFeedbackNV") fn _glPauseTransformFeedbackNV() void;
@symbol("glPixelDataRangeNV") fn _glPixelDataRangeNV(target: GLenum, _length: GLsizei, pointer: nullable *void) void;
@symbol("glPixelMapfv") fn _glPixelMapfv(map: GLenum, map_size: GLsizei, values: GLfloat) void;
@symbol("glPixelMapuiv") fn _glPixelMapuiv(map: GLenum, map_size: GLsizei, values: GLuint) void;
@symbol("glPixelMapusv") fn _glPixelMapusv(map: GLenum, map_size: GLsizei, values: GLushort) void;
@symbol("glPixelMapx") fn _glPixelMapx(map: GLenum, _size: GLint, values: GLfixed) void;
@symbol("glPixelStoref") fn _glPixelStoref(pname: GLenum, param: GLfloat) void;
@symbol("glPixelStorei") fn _glPixelStorei(pname: GLenum, param: GLint) void;
@symbol("glPixelStorex") fn _glPixelStorex(pname: GLenum, param: GLfixed) void;
@symbol("glPixelTexGenParameterfSGIS") fn _glPixelTexGenParameterfSGIS(pname: GLenum, param: GLfloat) void;
@symbol("glPixelTexGenParameterfvSGIS") fn _glPixelTexGenParameterfvSGIS(pname: GLenum, params: GLfloat) void;
@symbol("glPixelTexGenParameteriSGIS") fn _glPixelTexGenParameteriSGIS(pname: GLenum, param: GLint) void;
@symbol("glPixelTexGenParameterivSGIS") fn _glPixelTexGenParameterivSGIS(pname: GLenum, params: GLint) void;
@symbol("glPixelTexGenSGIX") fn _glPixelTexGenSGIX(mode: GLenum) void;
@symbol("glPixelTransferf") fn _glPixelTransferf(pname: GLenum, param: GLfloat) void;
@symbol("glPixelTransferi") fn _glPixelTransferi(pname: GLenum, param: GLint) void;
@symbol("glPixelTransferxOES") fn _glPixelTransferxOES(pname: GLenum, param: GLfixed) void;
@symbol("glPixelTransformParameterfEXT") fn _glPixelTransformParameterfEXT(target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glPixelTransformParameterfvEXT") fn _glPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glPixelTransformParameteriEXT") fn _glPixelTransformParameteriEXT(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glPixelTransformParameterivEXT") fn _glPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glPixelZoom") fn _glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
@symbol("glPixelZoomxOES") fn _glPixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed) void;
@symbol("glPointAlongPathNV") fn _glPointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: GLfloat, y: GLfloat, tangentX: GLfloat, tangentY: GLfloat) GLboolean;
@symbol("glPointParameterf") fn _glPointParameterf(pname: GLenum, param: GLfloat) void;
@symbol("glPointParameterfEXT") fn _glPointParameterfEXT(pname: GLenum, param: GLfloat) void;
@symbol("glPointParameterfSGIS") fn _glPointParameterfSGIS(pname: GLenum, param: GLfloat) void;
@symbol("glPointParameterfv") fn _glPointParameterfv(pname: GLenum, params: GLfloat) void;
@symbol("glPointParameterfvEXT") fn _glPointParameterfvEXT(pname: GLenum, params: GLfloat) void;
@symbol("glPointParameterfvSGIS") fn _glPointParameterfvSGIS(pname: GLenum, params: GLfloat) void;
@symbol("glPointParameteri") fn _glPointParameteri(pname: GLenum, param: GLint) void;
@symbol("glPointParameteriNV") fn _glPointParameteriNV(pname: GLenum, param: GLint) void;
@symbol("glPointParameteriv") fn _glPointParameteriv(pname: GLenum, params: GLint) void;
@symbol("glPointParameterivNV") fn _glPointParameterivNV(pname: GLenum, params: GLint) void;
@symbol("glPointParameterx") fn _glPointParameterx(pname: GLenum, param: GLfixed) void;
@symbol("glPointParameterxOES") fn _glPointParameterxOES(pname: GLenum, param: GLfixed) void;
@symbol("glPointParameterxv") fn _glPointParameterxv(pname: GLenum, params: GLfixed) void;
@symbol("glPointParameterxvOES") fn _glPointParameterxvOES(pname: GLenum, params: GLfixed) void;
@symbol("glPointSize") fn _glPointSize(_size: GLfloat) void;
@symbol("glPointSizePointerOES") fn _glPointSizePointerOES(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glPointSizex") fn _glPointSizex(_size: GLfixed) void;
@symbol("glPointSizexOES") fn _glPointSizexOES(_size: GLfixed) void;
@symbol("glPollAsyncSGIX") fn _glPollAsyncSGIX(markerp: GLuint) GLint;
@symbol("glPollInstrumentsSGIX") fn _glPollInstrumentsSGIX(marker_p: GLint) GLint;
@symbol("glPolygonMode") fn _glPolygonMode(face: GLenum, mode: GLenum) void;
@symbol("glPolygonModeNV") fn _glPolygonModeNV(face: GLenum, mode: GLenum) void;
@symbol("glPolygonOffset") fn _glPolygonOffset(factor: GLfloat, units: GLfloat) void;
@symbol("glPolygonOffsetClamp") fn _glPolygonOffsetClamp(factor: GLfloat, units: GLfloat, clamp: GLfloat) void;
@symbol("glPolygonOffsetClampEXT") fn _glPolygonOffsetClampEXT(factor: GLfloat, units: GLfloat, clamp: GLfloat) void;
@symbol("glPolygonOffsetEXT") fn _glPolygonOffsetEXT(factor: GLfloat, bias: GLfloat) void;
@symbol("glPolygonOffsetx") fn _glPolygonOffsetx(factor: GLfixed, units: GLfixed) void;
@symbol("glPolygonOffsetxOES") fn _glPolygonOffsetxOES(factor: GLfixed, units: GLfixed) void;
@symbol("glPolygonStipple") fn _glPolygonStipple(mask: GLubyte) void;
@symbol("glPopAttrib") fn _glPopAttrib() void;
@symbol("glPopClientAttrib") fn _glPopClientAttrib() void;
@symbol("glPopGroupMarkerEXT") fn _glPopGroupMarkerEXT() void;
@symbol("glPopMatrix") fn _glPopMatrix() void;
@symbol("glPopName") fn _glPopName() void;
@symbol("glPresentFrameDualFillNV") fn _glPresentFrameDualFillNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, _type: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) void;
@symbol("glPresentFrameKeyedNV") fn _glPresentFrameKeyedNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, _type: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) void;
@symbol("glPrimitiveBoundingBox") fn _glPrimitiveBoundingBox(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) void;
@symbol("glPrimitiveBoundingBoxEXT") fn _glPrimitiveBoundingBoxEXT(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) void;
@symbol("glPrimitiveBoundingBoxOES") fn _glPrimitiveBoundingBoxOES(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) void;
@symbol("glPrimitiveRestartIndex") fn _glPrimitiveRestartIndex(index: GLuint) void;
@symbol("glPrimitiveRestartIndexNV") fn _glPrimitiveRestartIndexNV(index: GLuint) void;
@symbol("glPrimitiveRestartNV") fn _glPrimitiveRestartNV() void;
@symbol("glPrioritizeTextures") fn _glPrioritizeTextures(n: GLsizei, textures: GLuint, priorities: GLfloat) void;
@symbol("glPrioritizeTexturesEXT") fn _glPrioritizeTexturesEXT(n: GLsizei, textures: GLuint, priorities: GLclampf) void;
@symbol("glPrioritizeTexturesxOES") fn _glPrioritizeTexturesxOES(n: GLsizei, textures: GLuint, priorities: GLfixed) void;
@symbol("glProgramBinary") fn _glProgramBinary(program: GLuint, binaryFormat: GLenum, binary: nullable *void, _length: GLsizei) void;
@symbol("glProgramBinaryOES") fn _glProgramBinaryOES(program: GLuint, binaryFormat: GLenum, binary: nullable *void, _length: GLint) void;
@symbol("glProgramBufferParametersIivNV") fn _glProgramBufferParametersIivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLint) void;
@symbol("glProgramBufferParametersIuivNV") fn _glProgramBufferParametersIuivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLuint) void;
@symbol("glProgramBufferParametersfvNV") fn _glProgramBufferParametersfvNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLfloat) void;
@symbol("glProgramEnvParameterI4iNV") fn _glProgramEnvParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glProgramEnvParameterI4ivNV") fn _glProgramEnvParameterI4ivNV(target: GLenum, index: GLuint, params: GLint) void;
@symbol("glProgramEnvParameterI4uiNV") fn _glProgramEnvParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) void;
@symbol("glProgramEnvParameterI4uivNV") fn _glProgramEnvParameterI4uivNV(target: GLenum, index: GLuint, params: GLuint) void;
@symbol("glProgramEnvParameters4fvEXT") fn _glProgramEnvParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: GLfloat) void;
@symbol("glProgramEnvParametersI4ivNV") fn _glProgramEnvParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLint) void;
@symbol("glProgramEnvParametersI4uivNV") fn _glProgramEnvParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLuint) void;
@symbol("glProgramLocalParameterI4iNV") fn _glProgramLocalParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glProgramLocalParameterI4ivNV") fn _glProgramLocalParameterI4ivNV(target: GLenum, index: GLuint, params: GLint) void;
@symbol("glProgramLocalParameterI4uiNV") fn _glProgramLocalParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) void;
@symbol("glProgramLocalParameterI4uivNV") fn _glProgramLocalParameterI4uivNV(target: GLenum, index: GLuint, params: GLuint) void;
@symbol("glProgramLocalParameters4fvEXT") fn _glProgramLocalParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: GLfloat) void;
@symbol("glProgramLocalParametersI4ivNV") fn _glProgramLocalParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLint) void;
@symbol("glProgramLocalParametersI4uivNV") fn _glProgramLocalParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLuint) void;
@symbol("glProgramNamedParameter4dNV") fn _glProgramNamedParameter4dNV(id: GLuint, _len: GLsizei, name: GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glProgramNamedParameter4dvNV") fn _glProgramNamedParameter4dvNV(id: GLuint, _len: GLsizei, name: GLubyte, v: GLdouble) void;
@symbol("glProgramNamedParameter4fNV") fn _glProgramNamedParameter4fNV(id: GLuint, _len: GLsizei, name: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glProgramNamedParameter4fvNV") fn _glProgramNamedParameter4fvNV(id: GLuint, _len: GLsizei, name: GLubyte, v: GLfloat) void;
@symbol("glProgramParameter4dNV") fn _glProgramParameter4dNV(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glProgramParameter4dvNV") fn _glProgramParameter4dvNV(target: GLenum, index: GLuint, v: GLdouble) void;
@symbol("glProgramParameter4fNV") fn _glProgramParameter4fNV(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glProgramParameter4fvNV") fn _glProgramParameter4fvNV(target: GLenum, index: GLuint, v: GLfloat) void;
@symbol("glProgramParameteri") fn _glProgramParameteri(program: GLuint, pname: GLenum, value: GLint) void;
@symbol("glProgramParameteriEXT") fn _glProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint) void;
@symbol("glProgramParameters4dvNV") fn _glProgramParameters4dvNV(target: GLenum, index: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glProgramParameters4fvNV") fn _glProgramParameters4fvNV(target: GLenum, index: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glProgramPathFragmentInputGenNV") fn _glProgramPathFragmentInputGenNV(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: GLfloat) void;
@symbol("glProgramSubroutineParametersuivNV") fn _glProgramSubroutineParametersuivNV(target: GLenum, count: GLsizei, params: GLuint) void;
@symbol("glProgramUniform1d") fn _glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble) void;
@symbol("glProgramUniform1dEXT") fn _glProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble) void;
@symbol("glProgramUniform1dv") fn _glProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform1dvEXT") fn _glProgramUniform1dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform1f") fn _glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) void;
@symbol("glProgramUniform1fEXT") fn _glProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat) void;
@symbol("glProgramUniform1fv") fn _glProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform1fvEXT") fn _glProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform1i") fn _glProgramUniform1i(program: GLuint, location: GLint, v0: GLint) void;
@symbol("glProgramUniform1i64NV") fn _glProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT) void;
@symbol("glProgramUniform1i64vNV") fn _glProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glProgramUniform1iEXT") fn _glProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint) void;
@symbol("glProgramUniform1iv") fn _glProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform1ivEXT") fn _glProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform1ui") fn _glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) void;
@symbol("glProgramUniform1ui64NV") fn _glProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT) void;
@symbol("glProgramUniform1ui64vNV") fn _glProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glProgramUniform1uiEXT") fn _glProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint) void;
@symbol("glProgramUniform1uiv") fn _glProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform1uivEXT") fn _glProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform2d") fn _glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) void;
@symbol("glProgramUniform2dEXT") fn _glProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) void;
@symbol("glProgramUniform2dv") fn _glProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform2dvEXT") fn _glProgramUniform2dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform2f") fn _glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) void;
@symbol("glProgramUniform2fEXT") fn _glProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) void;
@symbol("glProgramUniform2fv") fn _glProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform2fvEXT") fn _glProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform2i") fn _glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) void;
@symbol("glProgramUniform2i64NV") fn _glProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) void;
@symbol("glProgramUniform2i64vNV") fn _glProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glProgramUniform2iEXT") fn _glProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint) void;
@symbol("glProgramUniform2iv") fn _glProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform2ivEXT") fn _glProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform2ui") fn _glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) void;
@symbol("glProgramUniform2ui64NV") fn _glProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) void;
@symbol("glProgramUniform2ui64vNV") fn _glProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glProgramUniform2uiEXT") fn _glProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) void;
@symbol("glProgramUniform2uiv") fn _glProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform2uivEXT") fn _glProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform3d") fn _glProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) void;
@symbol("glProgramUniform3dEXT") fn _glProgramUniform3dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glProgramUniform3dv") fn _glProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform3dvEXT") fn _glProgramUniform3dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform3f") fn _glProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
@symbol("glProgramUniform3fEXT") fn _glProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
@symbol("glProgramUniform3fv") fn _glProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform3fvEXT") fn _glProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform3i") fn _glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
@symbol("glProgramUniform3i64NV") fn _glProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) void;
@symbol("glProgramUniform3i64vNV") fn _glProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glProgramUniform3iEXT") fn _glProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
@symbol("glProgramUniform3iv") fn _glProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform3ivEXT") fn _glProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform3ui") fn _glProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void;
@symbol("glProgramUniform3ui64NV") fn _glProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) void;
@symbol("glProgramUniform3ui64vNV") fn _glProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glProgramUniform3uiEXT") fn _glProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void;
@symbol("glProgramUniform3uiv") fn _glProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform3uivEXT") fn _glProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform4d") fn _glProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) void;
@symbol("glProgramUniform4dEXT") fn _glProgramUniform4dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glProgramUniform4dv") fn _glProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform4dvEXT") fn _glProgramUniform4dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glProgramUniform4f") fn _glProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
@symbol("glProgramUniform4fEXT") fn _glProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
@symbol("glProgramUniform4fv") fn _glProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform4fvEXT") fn _glProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glProgramUniform4i") fn _glProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
@symbol("glProgramUniform4i64NV") fn _glProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) void;
@symbol("glProgramUniform4i64vNV") fn _glProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glProgramUniform4iEXT") fn _glProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
@symbol("glProgramUniform4iv") fn _glProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform4ivEXT") fn _glProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint) void;
@symbol("glProgramUniform4ui") fn _glProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void;
@symbol("glProgramUniform4ui64NV") fn _glProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) void;
@symbol("glProgramUniform4ui64vNV") fn _glProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glProgramUniform4uiEXT") fn _glProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void;
@symbol("glProgramUniform4uiv") fn _glProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniform4uivEXT") fn _glProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glProgramUniformHandleui64IMG") fn _glProgramUniformHandleui64IMG(program: GLuint, location: GLint, value: GLuint64) void;
@symbol("glProgramUniformHandleui64NV") fn _glProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64) void;
@symbol("glProgramUniformHandleui64vIMG") fn _glProgramUniformHandleui64vIMG(program: GLuint, location: GLint, count: GLsizei, values: GLuint64) void;
@symbol("glProgramUniformHandleui64vNV") fn _glProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: GLuint64) void;
@symbol("glProgramUniformMatrix2dv") fn _glProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix2dvEXT") fn _glProgramUniformMatrix2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix2fv") fn _glProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix2fvEXT") fn _glProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix2x3dv") fn _glProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix2x3dvEXT") fn _glProgramUniformMatrix2x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix2x3fv") fn _glProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix2x3fvEXT") fn _glProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix2x4dv") fn _glProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix2x4dvEXT") fn _glProgramUniformMatrix2x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix2x4fv") fn _glProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix2x4fvEXT") fn _glProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix3dv") fn _glProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix3dvEXT") fn _glProgramUniformMatrix3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix3fv") fn _glProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix3fvEXT") fn _glProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix3x2dv") fn _glProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix3x2dvEXT") fn _glProgramUniformMatrix3x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix3x2fv") fn _glProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix3x2fvEXT") fn _glProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix3x4dv") fn _glProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix3x4dvEXT") fn _glProgramUniformMatrix3x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix3x4fv") fn _glProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix3x4fvEXT") fn _glProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix4dv") fn _glProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix4dvEXT") fn _glProgramUniformMatrix4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix4fv") fn _glProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix4fvEXT") fn _glProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix4x2dv") fn _glProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix4x2dvEXT") fn _glProgramUniformMatrix4x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix4x2fv") fn _glProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix4x2fvEXT") fn _glProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix4x3dv") fn _glProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix4x3dvEXT") fn _glProgramUniformMatrix4x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glProgramUniformMatrix4x3fv") fn _glProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformMatrix4x3fvEXT") fn _glProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glProgramUniformui64NV") fn _glProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT) void;
@symbol("glProgramUniformui64vNV") fn _glProgramUniformui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glProgramVertexLimitNV") fn _glProgramVertexLimitNV(target: GLenum, limit: GLint) void;
@symbol("glProvokingVertex") fn _glProvokingVertex(mode: GLenum) void;
@symbol("glProvokingVertexEXT") fn _glProvokingVertexEXT(mode: GLenum) void;
@symbol("glPushAttrib") fn _glPushAttrib(mask: GLbitfield) void;
@symbol("glPushClientAttrib") fn _glPushClientAttrib(mask: GLbitfield) void;
@symbol("glPushClientAttribDefaultEXT") fn _glPushClientAttribDefaultEXT(mask: GLbitfield) void;
@symbol("glPushGroupMarkerEXT") fn _glPushGroupMarkerEXT(_length: GLsizei, marker: GLchar) void;
@symbol("glPushMatrix") fn _glPushMatrix() void;
@symbol("glPushName") fn _glPushName(name: GLuint) void;
@symbol("glQueryCounter") fn _glQueryCounter(id: GLuint, target: GLenum) void;
@symbol("glQueryCounterEXT") fn _glQueryCounterEXT(id: GLuint, target: GLenum) void;
@symbol("glQueryMatrixxOES") fn _glQueryMatrixxOES(mantissa: GLfixed, exponent: GLint) GLbitfield;
@symbol("glQueryObjectParameteruiAMD") fn _glQueryObjectParameteruiAMD(target: GLenum, id: GLuint, pname: GLenum, param: GLuint) void;
@symbol("glQueryResourceNV") fn _glQueryResourceNV(queryType: GLenum, tagId: GLint, count: GLuint, buffer: GLint) GLint;
@symbol("glQueryResourceTagNV") fn _glQueryResourceTagNV(tagId: GLint, tagString: GLchar) void;
@symbol("glRasterPos2d") fn _glRasterPos2d(x: GLdouble, y: GLdouble) void;
@symbol("glRasterPos2dv") fn _glRasterPos2dv(v: GLdouble) void;
@symbol("glRasterPos2f") fn _glRasterPos2f(x: GLfloat, y: GLfloat) void;
@symbol("glRasterPos2fv") fn _glRasterPos2fv(v: GLfloat) void;
@symbol("glRasterPos2i") fn _glRasterPos2i(x: GLint, y: GLint) void;
@symbol("glRasterPos2iv") fn _glRasterPos2iv(v: GLint) void;
@symbol("glRasterPos2s") fn _glRasterPos2s(x: GLshort, y: GLshort) void;
@symbol("glRasterPos2sv") fn _glRasterPos2sv(v: GLshort) void;
@symbol("glRasterPos2xOES") fn _glRasterPos2xOES(x: GLfixed, y: GLfixed) void;
@symbol("glRasterPos2xvOES") fn _glRasterPos2xvOES(coords: GLfixed) void;
@symbol("glRasterPos3d") fn _glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glRasterPos3dv") fn _glRasterPos3dv(v: GLdouble) void;
@symbol("glRasterPos3f") fn _glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glRasterPos3fv") fn _glRasterPos3fv(v: GLfloat) void;
@symbol("glRasterPos3i") fn _glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
@symbol("glRasterPos3iv") fn _glRasterPos3iv(v: GLint) void;
@symbol("glRasterPos3s") fn _glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glRasterPos3sv") fn _glRasterPos3sv(v: GLshort) void;
@symbol("glRasterPos3xOES") fn _glRasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glRasterPos3xvOES") fn _glRasterPos3xvOES(coords: GLfixed) void;
@symbol("glRasterPos4d") fn _glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glRasterPos4dv") fn _glRasterPos4dv(v: GLdouble) void;
@symbol("glRasterPos4f") fn _glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glRasterPos4fv") fn _glRasterPos4fv(v: GLfloat) void;
@symbol("glRasterPos4i") fn _glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glRasterPos4iv") fn _glRasterPos4iv(v: GLint) void;
@symbol("glRasterPos4s") fn _glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
@symbol("glRasterPos4sv") fn _glRasterPos4sv(v: GLshort) void;
@symbol("glRasterPos4xOES") fn _glRasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) void;
@symbol("glRasterPos4xvOES") fn _glRasterPos4xvOES(coords: GLfixed) void;
@symbol("glRasterSamplesEXT") fn _glRasterSamplesEXT(samples: GLuint, fixedsamplelocations: GLboolean) void;
@symbol("glReadBuffer") fn _glReadBuffer(src: GLenum) void;
@symbol("glReadBufferIndexedEXT") fn _glReadBufferIndexedEXT(src: GLenum, index: GLint) void;
@symbol("glReadBufferNV") fn _glReadBufferNV(mode: GLenum) void;
@symbol("glReadInstrumentsSGIX") fn _glReadInstrumentsSGIX(marker: GLint) void;
@symbol("glReadPixels") fn _glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: *void) void;
@symbol("glReadnPixels") fn _glReadnPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, bufSize: GLsizei, data: *void) void;
@symbol("glReadnPixelsEXT") fn _glReadnPixelsEXT(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, bufSize: GLsizei, data: *void) void;
@symbol("glReadnPixelsKHR") fn _glReadnPixelsKHR(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, bufSize: GLsizei, data: *void) void;
@symbol("glReleaseKeyedMutexWin32EXT") fn _glReleaseKeyedMutexWin32EXT(memory: GLuint, key: GLuint64) GLboolean;
@symbol("glRectd") fn _glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
@symbol("glRectdv") fn _glRectdv(v1: GLdouble, v2: GLdouble) void;
@symbol("glRectf") fn _glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
@symbol("glRectfv") fn _glRectfv(v1: GLfloat, v2: GLfloat) void;
@symbol("glRecti") fn _glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
@symbol("glRectiv") fn _glRectiv(v1: GLint, v2: GLint) void;
@symbol("glRects") fn _glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
@symbol("glRectsv") fn _glRectsv(v1: GLshort, v2: GLshort) void;
@symbol("glRectxOES") fn _glRectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) void;
@symbol("glRectxvOES") fn _glRectxvOES(v1: GLfixed, v2: GLfixed) void;
@symbol("glReferencePlaneSGIX") fn _glReferencePlaneSGIX(equation: GLdouble) void;
@symbol("glReleaseShaderCompiler") fn _glReleaseShaderCompiler() void;
@symbol("glRenderGpuMaskNV") fn _glRenderGpuMaskNV(mask: GLbitfield) void;
@symbol("glRenderMode") fn _glRenderMode(mode: GLenum) GLint;
@symbol("glRenderbufferStorage") fn _glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageEXT") fn _glRenderbufferStorageEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisample") fn _glRenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleANGLE") fn _glRenderbufferStorageMultisampleANGLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleAPPLE") fn _glRenderbufferStorageMultisampleAPPLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleAdvancedAMD") fn _glRenderbufferStorageMultisampleAdvancedAMD(target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleCoverageNV") fn _glRenderbufferStorageMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleEXT") fn _glRenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleIMG") fn _glRenderbufferStorageMultisampleIMG(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageMultisampleNV") fn _glRenderbufferStorageMultisampleNV(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glRenderbufferStorageOES") fn _glRenderbufferStorageOES(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glReplacementCodePointerSUN") fn _glReplacementCodePointerSUN(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glReplacementCodeubSUN") fn _glReplacementCodeubSUN(code: GLubyte) void;
@symbol("glReplacementCodeubvSUN") fn _glReplacementCodeubvSUN(code: GLubyte) void;
@symbol("glReplacementCodeuiColor3fVertex3fSUN") fn _glReplacementCodeuiColor3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiColor3fVertex3fvSUN") fn _glReplacementCodeuiColor3fVertex3fvSUN(rc: GLuint, c: GLfloat, v: GLfloat) void;
@symbol("glReplacementCodeuiColor4fNormal3fVertex3fSUN") fn _glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiColor4fNormal3fVertex3fvSUN") fn _glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: GLuint, c: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glReplacementCodeuiColor4ubVertex3fSUN") fn _glReplacementCodeuiColor4ubVertex3fSUN(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiColor4ubVertex3fvSUN") fn _glReplacementCodeuiColor4ubVertex3fvSUN(rc: GLuint, c: GLubyte, v: GLfloat) void;
@symbol("glReplacementCodeuiNormal3fVertex3fSUN") fn _glReplacementCodeuiNormal3fVertex3fSUN(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiNormal3fVertex3fvSUN") fn _glReplacementCodeuiNormal3fVertex3fvSUN(rc: GLuint, n: GLfloat, v: GLfloat) void;
@symbol("glReplacementCodeuiSUN") fn _glReplacementCodeuiSUN(code: GLuint) void;
@symbol("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN") fn _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN") fn _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: GLuint, tc: GLfloat, c: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN") fn _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN") fn _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: GLuint, tc: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glReplacementCodeuiTexCoord2fVertex3fSUN") fn _glReplacementCodeuiTexCoord2fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiTexCoord2fVertex3fvSUN") fn _glReplacementCodeuiTexCoord2fVertex3fvSUN(rc: GLuint, tc: GLfloat, v: GLfloat) void;
@symbol("glReplacementCodeuiVertex3fSUN") fn _glReplacementCodeuiVertex3fSUN(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glReplacementCodeuiVertex3fvSUN") fn _glReplacementCodeuiVertex3fvSUN(rc: GLuint, v: GLfloat) void;
@symbol("glReplacementCodeuivSUN") fn _glReplacementCodeuivSUN(code: GLuint) void;
@symbol("glReplacementCodeusSUN") fn _glReplacementCodeusSUN(code: GLushort) void;
@symbol("glReplacementCodeusvSUN") fn _glReplacementCodeusvSUN(code: GLushort) void;
@symbol("glRequestResidentProgramsNV") fn _glRequestResidentProgramsNV(n: GLsizei, programs: GLuint) void;
@symbol("glResetHistogram") fn _glResetHistogram(target: GLenum) void;
@symbol("glResetHistogramEXT") fn _glResetHistogramEXT(target: GLenum) void;
@symbol("glResetMemoryObjectParameterNV") fn _glResetMemoryObjectParameterNV(memory: GLuint, pname: GLenum) void;
@symbol("glResetMinmax") fn _glResetMinmax(target: GLenum) void;
@symbol("glResetMinmaxEXT") fn _glResetMinmaxEXT(target: GLenum) void;
@symbol("glResizeBuffersMESA") fn _glResizeBuffersMESA() void;
@symbol("glResolveDepthValuesNV") fn _glResolveDepthValuesNV() void;
@symbol("glResolveMultisampleFramebufferAPPLE") fn _glResolveMultisampleFramebufferAPPLE() void;
@symbol("glResumeTransformFeedback") fn _glResumeTransformFeedback() void;
@symbol("glResumeTransformFeedbackNV") fn _glResumeTransformFeedbackNV() void;
@symbol("glRotated") fn _glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glRotatef") fn _glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glRotatex") fn _glRotatex(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glRotatexOES") fn _glRotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glSampleCoverage") fn _glSampleCoverage(value: GLfloat, invert: GLboolean) void;
@symbol("glSampleCoveragex") fn _glSampleCoveragex(value: GLclampx, invert: GLboolean) void;
@symbol("glSampleCoveragexOES") fn _glSampleCoveragexOES(value: GLclampx, invert: GLboolean) void;
@symbol("glSampleMapATI") fn _glSampleMapATI(dst: GLuint, interp: GLuint, swizzle: GLenum) void;
@symbol("glSampleMaskEXT") fn _glSampleMaskEXT(value: GLclampf, invert: GLboolean) void;
@symbol("glSampleMaskIndexedNV") fn _glSampleMaskIndexedNV(index: GLuint, mask: GLbitfield) void;
@symbol("glSampleMaskSGIS") fn _glSampleMaskSGIS(value: GLclampf, invert: GLboolean) void;
@symbol("glSampleMaski") fn _glSampleMaski(maskNumber: GLuint, mask: GLbitfield) void;
@symbol("glSamplePatternEXT") fn _glSamplePatternEXT(pattern: GLenum) void;
@symbol("glSamplePatternSGIS") fn _glSamplePatternSGIS(pattern: GLenum) void;
@symbol("glSamplerParameterIiv") fn _glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: GLint) void;
@symbol("glSamplerParameterIivEXT") fn _glSamplerParameterIivEXT(sampler: GLuint, pname: GLenum, param: GLint) void;
@symbol("glSamplerParameterIivOES") fn _glSamplerParameterIivOES(sampler: GLuint, pname: GLenum, param: GLint) void;
@symbol("glSamplerParameterIuiv") fn _glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: GLuint) void;
@symbol("glSamplerParameterIuivEXT") fn _glSamplerParameterIuivEXT(sampler: GLuint, pname: GLenum, param: GLuint) void;
@symbol("glSamplerParameterIuivOES") fn _glSamplerParameterIuivOES(sampler: GLuint, pname: GLenum, param: GLuint) void;
@symbol("glSamplerParameterf") fn _glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) void;
@symbol("glSamplerParameterfv") fn _glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: GLfloat) void;
@symbol("glSamplerParameteri") fn _glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) void;
@symbol("glSamplerParameteriv") fn _glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: GLint) void;
@symbol("glScaled") fn _glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glScalef") fn _glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glScalex") fn _glScalex(x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glScalexOES") fn _glScalexOES(x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glScissor") fn _glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glScissorArrayv") fn _glScissorArrayv(first: GLuint, count: GLsizei, v: GLint) void;
@symbol("glScissorArrayvNV") fn _glScissorArrayvNV(first: GLuint, count: GLsizei, v: GLint) void;
@symbol("glScissorArrayvOES") fn _glScissorArrayvOES(first: GLuint, count: GLsizei, v: GLint) void;
@symbol("glScissorExclusiveArrayvNV") fn _glScissorExclusiveArrayvNV(first: GLuint, count: GLsizei, v: GLint) void;
@symbol("glScissorExclusiveNV") fn _glScissorExclusiveNV(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glScissorIndexed") fn _glScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glScissorIndexedNV") fn _glScissorIndexedNV(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glScissorIndexedOES") fn _glScissorIndexedOES(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glScissorIndexedv") fn _glScissorIndexedv(index: GLuint, v: GLint) void;
@symbol("glScissorIndexedvNV") fn _glScissorIndexedvNV(index: GLuint, v: GLint) void;
@symbol("glScissorIndexedvOES") fn _glScissorIndexedvOES(index: GLuint, v: GLint) void;
@symbol("glSecondaryColor3b") fn _glSecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
@symbol("glSecondaryColor3bEXT") fn _glSecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte) void;
@symbol("glSecondaryColor3bv") fn _glSecondaryColor3bv(v: GLbyte) void;
@symbol("glSecondaryColor3bvEXT") fn _glSecondaryColor3bvEXT(v: GLbyte) void;
@symbol("glSecondaryColor3d") fn _glSecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
@symbol("glSecondaryColor3dEXT") fn _glSecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble) void;
@symbol("glSecondaryColor3dv") fn _glSecondaryColor3dv(v: GLdouble) void;
@symbol("glSecondaryColor3dvEXT") fn _glSecondaryColor3dvEXT(v: GLdouble) void;
@symbol("glSecondaryColor3f") fn _glSecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
@symbol("glSecondaryColor3fEXT") fn _glSecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat) void;
@symbol("glSecondaryColor3fv") fn _glSecondaryColor3fv(v: GLfloat) void;
@symbol("glSecondaryColor3fvEXT") fn _glSecondaryColor3fvEXT(v: GLfloat) void;
@symbol("glSecondaryColor3hNV") fn _glSecondaryColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) void;
@symbol("glSecondaryColor3hvNV") fn _glSecondaryColor3hvNV(v: GLhalfNV) void;
@symbol("glSecondaryColor3i") fn _glSecondaryColor3i(red: GLint, green: GLint, blue: GLint) void;
@symbol("glSecondaryColor3iEXT") fn _glSecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint) void;
@symbol("glSecondaryColor3iv") fn _glSecondaryColor3iv(v: GLint) void;
@symbol("glSecondaryColor3ivEXT") fn _glSecondaryColor3ivEXT(v: GLint) void;
@symbol("glSecondaryColor3s") fn _glSecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
@symbol("glSecondaryColor3sEXT") fn _glSecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort) void;
@symbol("glSecondaryColor3sv") fn _glSecondaryColor3sv(v: GLshort) void;
@symbol("glSecondaryColor3svEXT") fn _glSecondaryColor3svEXT(v: GLshort) void;
@symbol("glSecondaryColor3ub") fn _glSecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
@symbol("glSecondaryColor3ubEXT") fn _glSecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte) void;
@symbol("glSecondaryColor3ubv") fn _glSecondaryColor3ubv(v: GLubyte) void;
@symbol("glSecondaryColor3ubvEXT") fn _glSecondaryColor3ubvEXT(v: GLubyte) void;
@symbol("glSecondaryColor3ui") fn _glSecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
@symbol("glSecondaryColor3uiEXT") fn _glSecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint) void;
@symbol("glSecondaryColor3uiv") fn _glSecondaryColor3uiv(v: GLuint) void;
@symbol("glSecondaryColor3uivEXT") fn _glSecondaryColor3uivEXT(v: GLuint) void;
@symbol("glSecondaryColor3us") fn _glSecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
@symbol("glSecondaryColor3usEXT") fn _glSecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort) void;
@symbol("glSecondaryColor3usv") fn _glSecondaryColor3usv(v: GLushort) void;
@symbol("glSecondaryColor3usvEXT") fn _glSecondaryColor3usvEXT(v: GLushort) void;
@symbol("glSecondaryColorFormatNV") fn _glSecondaryColorFormatNV(_size: GLint, _type: GLenum, stride: GLsizei) void;
@symbol("glSecondaryColorP3ui") fn _glSecondaryColorP3ui(_type: GLenum, color: GLuint) void;
@symbol("glSecondaryColorP3uiv") fn _glSecondaryColorP3uiv(_type: GLenum, color: GLuint) void;
@symbol("glSecondaryColorPointer") fn _glSecondaryColorPointer(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glSecondaryColorPointerEXT") fn _glSecondaryColorPointerEXT(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glSecondaryColorPointerListIBM") fn _glSecondaryColorPointerListIBM(_size: GLint, _type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glSelectBuffer") fn _glSelectBuffer(_size: GLsizei, buffer: GLuint) void;
@symbol("glSelectPerfMonitorCountersAMD") fn _glSelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: GLuint) void;
@symbol("glSemaphoreParameterivNV") fn _glSemaphoreParameterivNV(semaphore: GLuint, pname: GLenum, params: GLint) void;
@symbol("glSemaphoreParameterui64vEXT") fn _glSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: GLuint64) void;
@symbol("glSeparableFilter2D") fn _glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, row: nullable *void, column: nullable *void) void;
@symbol("glSeparableFilter2DEXT") fn _glSeparableFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, row: nullable *void, column: nullable *void) void;
@symbol("glSetFenceAPPLE") fn _glSetFenceAPPLE(fence: GLuint) void;
@symbol("glSetFenceNV") fn _glSetFenceNV(fence: GLuint, condition: GLenum) void;
@symbol("glSetFragmentShaderConstantATI") fn _glSetFragmentShaderConstantATI(dst: GLuint, value: GLfloat) void;
@symbol("glSetInvariantEXT") fn _glSetInvariantEXT(id: GLuint, _type: GLenum, addr: nullable *void) void;
@symbol("glSetLocalConstantEXT") fn _glSetLocalConstantEXT(id: GLuint, _type: GLenum, addr: nullable *void) void;
@symbol("glSetMultisamplefvAMD") fn _glSetMultisamplefvAMD(pname: GLenum, index: GLuint, val: GLfloat) void;
@symbol("glShadeModel") fn _glShadeModel(mode: GLenum) void;
@symbol("glShaderBinary") fn _glShaderBinary(count: GLsizei, shaders: GLuint, binaryFormat: GLenum, binary: nullable *void, _length: GLsizei) void;
@symbol("glShaderOp1EXT") fn _glShaderOp1EXT(op: GLenum, res: GLuint, arg1: GLuint) void;
@symbol("glShaderOp2EXT") fn _glShaderOp2EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) void;
@symbol("glShaderOp3EXT") fn _glShaderOp3EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) void;
@symbol("glShaderSource") fn _glShaderSource(shader: GLuint, count: GLsizei, string: GLchar, _length: GLint) void;
@symbol("glShaderStorageBlockBinding") fn _glShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) void;
@symbol("glShadingRateEXT") fn _glShadingRateEXT(rate: GLenum) void;
@symbol("glShadingRateCombinerOpsEXT") fn _glShadingRateCombinerOpsEXT(combinerOp0: GLenum, combinerOp1: GLenum) void;
@symbol("glShadingRateImageBarrierNV") fn _glShadingRateImageBarrierNV(synchronize: GLboolean) void;
@symbol("glShadingRateQCOM") fn _glShadingRateQCOM(rate: GLenum) void;
@symbol("glShadingRateImagePaletteNV") fn _glShadingRateImagePaletteNV(viewport: GLuint, first: GLuint, count: GLsizei, rates: GLenum) void;
@symbol("glShadingRateSampleOrderNV") fn _glShadingRateSampleOrderNV(order: GLenum) void;
@symbol("glShadingRateSampleOrderCustomNV") fn _glShadingRateSampleOrderCustomNV(rate: GLenum, samples: GLuint, locations: GLint) void;
@symbol("glSharpenTexFuncSGIS") fn _glSharpenTexFuncSGIS(target: GLenum, n: GLsizei, points: GLfloat) void;
@symbol("glSignalSemaphoreEXT") fn _glSignalSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: GLuint, numTextureBarriers: GLuint, textures: GLuint, dstLayouts: GLenum) void;
@symbol("glSignalSemaphoreui64NVX") fn _glSignalSemaphoreui64NVX(signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: GLuint, fenceValueArray: GLuint64) void;
@symbol("glSpecializeShader") fn _glSpecializeShader(shader: GLuint, pEntryPoint: GLchar, numSpecializationConstants: GLuint, pConstantIndex: GLuint, pConstantValue: GLuint) void;
@symbol("glSpriteParameterfSGIX") fn _glSpriteParameterfSGIX(pname: GLenum, param: GLfloat) void;
@symbol("glSpriteParameterfvSGIX") fn _glSpriteParameterfvSGIX(pname: GLenum, params: GLfloat) void;
@symbol("glSpriteParameteriSGIX") fn _glSpriteParameteriSGIX(pname: GLenum, param: GLint) void;
@symbol("glSpriteParameterivSGIX") fn _glSpriteParameterivSGIX(pname: GLenum, params: GLint) void;
@symbol("glStartInstrumentsSGIX") fn _glStartInstrumentsSGIX() void;
@symbol("glStartTilingQCOM") fn _glStartTilingQCOM(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) void;
@symbol("glStateCaptureNV") fn _glStateCaptureNV(state: GLuint, mode: GLenum) void;
@symbol("glStencilClearTagEXT") fn _glStencilClearTagEXT(stencilTagBits: GLsizei, stencilClearTag: GLuint) void;
@symbol("glStencilFillPathInstancedNV") fn _glStencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glStencilFillPathNV") fn _glStencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint) void;
@symbol("glStencilFunc") fn _glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
@symbol("glStencilFuncSeparate") fn _glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) void;
@symbol("glStencilFuncSeparateATI") fn _glStencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint) void;
@symbol("glStencilMask") fn _glStencilMask(mask: GLuint) void;
@symbol("glStencilMaskSeparate") fn _glStencilMaskSeparate(face: GLenum, mask: GLuint) void;
@symbol("glStencilOp") fn _glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
@symbol("glStencilOpSeparate") fn _glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) void;
@symbol("glStencilOpSeparateATI") fn _glStencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) void;
@symbol("glStencilOpValueAMD") fn _glStencilOpValueAMD(face: GLenum, value: GLuint) void;
@symbol("glStencilStrokePathInstancedNV") fn _glStencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glStencilStrokePathNV") fn _glStencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint) void;
@symbol("glStencilThenCoverFillPathInstancedNV") fn _glStencilThenCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glStencilThenCoverFillPathNV") fn _glStencilThenCoverFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) void;
@symbol("glStencilThenCoverStrokePathInstancedNV") fn _glStencilThenCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: nullable *void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glStencilThenCoverStrokePathNV") fn _glStencilThenCoverStrokePathNV(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) void;
@symbol("glStopInstrumentsSGIX") fn _glStopInstrumentsSGIX(marker: GLint) void;
@symbol("glStringMarkerGREMEDY") fn _glStringMarkerGREMEDY(_len: GLsizei, string: nullable *void) void;
@symbol("glSubpixelPrecisionBiasNV") fn _glSubpixelPrecisionBiasNV(xbits: GLuint, ybits: GLuint) void;
@symbol("glSwizzleEXT") fn _glSwizzleEXT(res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) void;
@symbol("glTagSampleBufferSGIX") fn _glTagSampleBufferSGIX() void;
@symbol("glTangent3bEXT") fn _glTangent3bEXT(tx: GLbyte, ty: GLbyte, tz: GLbyte) void;
@symbol("glTangent3bvEXT") fn _glTangent3bvEXT(v: GLbyte) void;
@symbol("glTangent3dEXT") fn _glTangent3dEXT(tx: GLdouble, ty: GLdouble, tz: GLdouble) void;
@symbol("glTangent3dvEXT") fn _glTangent3dvEXT(v: GLdouble) void;
@symbol("glTangent3fEXT") fn _glTangent3fEXT(tx: GLfloat, ty: GLfloat, tz: GLfloat) void;
@symbol("glTangent3fvEXT") fn _glTangent3fvEXT(v: GLfloat) void;
@symbol("glTangent3iEXT") fn _glTangent3iEXT(tx: GLint, ty: GLint, tz: GLint) void;
@symbol("glTangent3ivEXT") fn _glTangent3ivEXT(v: GLint) void;
@symbol("glTangent3sEXT") fn _glTangent3sEXT(tx: GLshort, ty: GLshort, tz: GLshort) void;
@symbol("glTangent3svEXT") fn _glTangent3svEXT(v: GLshort) void;
@symbol("glTangentPointerEXT") fn _glTangentPointerEXT(_type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glTbufferMask3DFX") fn _glTbufferMask3DFX(mask: GLuint) void;
@symbol("glTessellationFactorAMD") fn _glTessellationFactorAMD(factor: GLfloat) void;
@symbol("glTessellationModeAMD") fn _glTessellationModeAMD(mode: GLenum) void;
@symbol("glTestFenceAPPLE") fn _glTestFenceAPPLE(fence: GLuint) GLboolean;
@symbol("glTestFenceNV") fn _glTestFenceNV(fence: GLuint) GLboolean;
@symbol("glTestObjectAPPLE") fn _glTestObjectAPPLE(object: GLenum, name: GLuint) GLboolean;
@symbol("glTexAttachMemoryNV") fn _glTexAttachMemoryNV(target: GLenum, memory: GLuint, _offset: GLuint64) void;
@symbol("glTexBuffer") fn _glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint) void;
@symbol("glTexBufferEXT") fn _glTexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint) void;
@symbol("glTexBufferOES") fn _glTexBufferOES(target: GLenum, internalformat: GLenum, buffer: GLuint) void;
@symbol("glTexBufferRange") fn _glTexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glTexBufferRangeEXT") fn _glTexBufferRangeEXT(target: GLenum, internalformat: GLenum, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glTexBufferRangeOES") fn _glTexBufferRangeOES(target: GLenum, internalformat: GLenum, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glTexBumpParameterfvATI") fn _glTexBumpParameterfvATI(pname: GLenum, param: GLfloat) void;
@symbol("glTexBumpParameterivATI") fn _glTexBumpParameterivATI(pname: GLenum, param: GLint) void;
@symbol("glTexCoord1bOES") fn _glTexCoord1bOES(s: GLbyte) void;
@symbol("glTexCoord1bvOES") fn _glTexCoord1bvOES(coords: GLbyte) void;
@symbol("glTexCoord1d") fn _glTexCoord1d(s: GLdouble) void;
@symbol("glTexCoord1dv") fn _glTexCoord1dv(v: GLdouble) void;
@symbol("glTexCoord1f") fn _glTexCoord1f(s: GLfloat) void;
@symbol("glTexCoord1fv") fn _glTexCoord1fv(v: GLfloat) void;
@symbol("glTexCoord1hNV") fn _glTexCoord1hNV(s: GLhalfNV) void;
@symbol("glTexCoord1hvNV") fn _glTexCoord1hvNV(v: GLhalfNV) void;
@symbol("glTexCoord1i") fn _glTexCoord1i(s: GLint) void;
@symbol("glTexCoord1iv") fn _glTexCoord1iv(v: GLint) void;
@symbol("glTexCoord1s") fn _glTexCoord1s(s: GLshort) void;
@symbol("glTexCoord1sv") fn _glTexCoord1sv(v: GLshort) void;
@symbol("glTexCoord1xOES") fn _glTexCoord1xOES(s: GLfixed) void;
@symbol("glTexCoord1xvOES") fn _glTexCoord1xvOES(coords: GLfixed) void;
@symbol("glTexCoord2bOES") fn _glTexCoord2bOES(s: GLbyte, t: GLbyte) void;
@symbol("glTexCoord2bvOES") fn _glTexCoord2bvOES(coords: GLbyte) void;
@symbol("glTexCoord2d") fn _glTexCoord2d(s: GLdouble, t: GLdouble) void;
@symbol("glTexCoord2dv") fn _glTexCoord2dv(v: GLdouble) void;
@symbol("glTexCoord2f") fn _glTexCoord2f(s: GLfloat, t: GLfloat) void;
@symbol("glTexCoord2fColor3fVertex3fSUN") fn _glTexCoord2fColor3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glTexCoord2fColor3fVertex3fvSUN") fn _glTexCoord2fColor3fVertex3fvSUN(tc: GLfloat, c: GLfloat, v: GLfloat) void;
@symbol("glTexCoord2fColor4fNormal3fVertex3fSUN") fn _glTexCoord2fColor4fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glTexCoord2fColor4fNormal3fVertex3fvSUN") fn _glTexCoord2fColor4fNormal3fVertex3fvSUN(tc: GLfloat, c: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glTexCoord2fColor4ubVertex3fSUN") fn _glTexCoord2fColor4ubVertex3fSUN(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glTexCoord2fColor4ubVertex3fvSUN") fn _glTexCoord2fColor4ubVertex3fvSUN(tc: GLfloat, c: GLubyte, v: GLfloat) void;
@symbol("glTexCoord2fNormal3fVertex3fSUN") fn _glTexCoord2fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glTexCoord2fNormal3fVertex3fvSUN") fn _glTexCoord2fNormal3fVertex3fvSUN(tc: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glTexCoord2fVertex3fSUN") fn _glTexCoord2fVertex3fSUN(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glTexCoord2fVertex3fvSUN") fn _glTexCoord2fVertex3fvSUN(tc: GLfloat, v: GLfloat) void;
@symbol("glTexCoord2fv") fn _glTexCoord2fv(v: GLfloat) void;
@symbol("glTexCoord2hNV") fn _glTexCoord2hNV(s: GLhalfNV, t: GLhalfNV) void;
@symbol("glTexCoord2hvNV") fn _glTexCoord2hvNV(v: GLhalfNV) void;
@symbol("glTexCoord2i") fn _glTexCoord2i(s: GLint, t: GLint) void;
@symbol("glTexCoord2iv") fn _glTexCoord2iv(v: GLint) void;
@symbol("glTexCoord2s") fn _glTexCoord2s(s: GLshort, t: GLshort) void;
@symbol("glTexCoord2sv") fn _glTexCoord2sv(v: GLshort) void;
@symbol("glTexCoord2xOES") fn _glTexCoord2xOES(s: GLfixed, t: GLfixed) void;
@symbol("glTexCoord2xvOES") fn _glTexCoord2xvOES(coords: GLfixed) void;
@symbol("glTexCoord3bOES") fn _glTexCoord3bOES(s: GLbyte, t: GLbyte, r: GLbyte) void;
@symbol("glTexCoord3bvOES") fn _glTexCoord3bvOES(coords: GLbyte) void;
@symbol("glTexCoord3d") fn _glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
@symbol("glTexCoord3dv") fn _glTexCoord3dv(v: GLdouble) void;
@symbol("glTexCoord3f") fn _glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
@symbol("glTexCoord3fv") fn _glTexCoord3fv(v: GLfloat) void;
@symbol("glTexCoord3hNV") fn _glTexCoord3hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) void;
@symbol("glTexCoord3hvNV") fn _glTexCoord3hvNV(v: GLhalfNV) void;
@symbol("glTexCoord3i") fn _glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
@symbol("glTexCoord3iv") fn _glTexCoord3iv(v: GLint) void;
@symbol("glTexCoord3s") fn _glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
@symbol("glTexCoord3sv") fn _glTexCoord3sv(v: GLshort) void;
@symbol("glTexCoord3xOES") fn _glTexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed) void;
@symbol("glTexCoord3xvOES") fn _glTexCoord3xvOES(coords: GLfixed) void;
@symbol("glTexCoord4bOES") fn _glTexCoord4bOES(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) void;
@symbol("glTexCoord4bvOES") fn _glTexCoord4bvOES(coords: GLbyte) void;
@symbol("glTexCoord4d") fn _glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
@symbol("glTexCoord4dv") fn _glTexCoord4dv(v: GLdouble) void;
@symbol("glTexCoord4f") fn _glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
@symbol("glTexCoord4fColor4fNormal3fVertex4fSUN") fn _glTexCoord4fColor4fNormal3fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glTexCoord4fColor4fNormal3fVertex4fvSUN") fn _glTexCoord4fColor4fNormal3fVertex4fvSUN(tc: GLfloat, c: GLfloat, n: GLfloat, v: GLfloat) void;
@symbol("glTexCoord4fVertex4fSUN") fn _glTexCoord4fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glTexCoord4fVertex4fvSUN") fn _glTexCoord4fVertex4fvSUN(tc: GLfloat, v: GLfloat) void;
@symbol("glTexCoord4fv") fn _glTexCoord4fv(v: GLfloat) void;
@symbol("glTexCoord4hNV") fn _glTexCoord4hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) void;
@symbol("glTexCoord4hvNV") fn _glTexCoord4hvNV(v: GLhalfNV) void;
@symbol("glTexCoord4i") fn _glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
@symbol("glTexCoord4iv") fn _glTexCoord4iv(v: GLint) void;
@symbol("glTexCoord4s") fn _glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
@symbol("glTexCoord4sv") fn _glTexCoord4sv(v: GLshort) void;
@symbol("glTexCoord4xOES") fn _glTexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) void;
@symbol("glTexCoord4xvOES") fn _glTexCoord4xvOES(coords: GLfixed) void;
@symbol("glTexCoordFormatNV") fn _glTexCoordFormatNV(_size: GLint, _type: GLenum, stride: GLsizei) void;
@symbol("glTexCoordP1ui") fn _glTexCoordP1ui(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP1uiv") fn _glTexCoordP1uiv(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP2ui") fn _glTexCoordP2ui(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP2uiv") fn _glTexCoordP2uiv(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP3ui") fn _glTexCoordP3ui(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP3uiv") fn _glTexCoordP3uiv(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP4ui") fn _glTexCoordP4ui(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordP4uiv") fn _glTexCoordP4uiv(_type: GLenum, coords: GLuint) void;
@symbol("glTexCoordPointer") fn _glTexCoordPointer(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glTexCoordPointerEXT") fn _glTexCoordPointerEXT(_size: GLint, _type: GLenum, stride: GLsizei, count: GLsizei, pointer: nullable *void) void;
@symbol("glTexCoordPointerListIBM") fn _glTexCoordPointerListIBM(_size: GLint, _type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glTexCoordPointervINTEL") fn _glTexCoordPointervINTEL(_size: GLint, _type: GLenum, pointer: nullable *void) void;
@symbol("glTexEnvf") fn _glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glTexEnvfv") fn _glTexEnvfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glTexEnvi") fn _glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glTexEnviv") fn _glTexEnviv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexEnvx") fn _glTexEnvx(target: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glTexEnvxOES") fn _glTexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glTexEnvxv") fn _glTexEnvxv(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glTexEnvxvOES") fn _glTexEnvxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glTexEstimateMotionQCOM") fn _glTexEstimateMotionQCOM(ref: GLuint, target: GLuint, output: GLuint) void;
@symbol("glTexEstimateMotionRegionsQCOM") fn _glTexEstimateMotionRegionsQCOM(ref: GLuint, target: GLuint, output: GLuint, mask: GLuint) void;
@symbol("glExtrapolateTex2DQCOM") fn _glExtrapolateTex2DQCOM(src1: GLuint, src2: GLuint, output: GLuint, scaleFactor: GLfloat) void;
@symbol("glTexFilterFuncSGIS") fn _glTexFilterFuncSGIS(target: GLenum, filter: GLenum, n: GLsizei, weights: GLfloat) void;
@symbol("glTexGend") fn _glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
@symbol("glTexGendv") fn _glTexGendv(coord: GLenum, pname: GLenum, params: GLdouble) void;
@symbol("glTexGenf") fn _glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glTexGenfOES") fn _glTexGenfOES(coord: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glTexGenfv") fn _glTexGenfv(coord: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glTexGenfvOES") fn _glTexGenfvOES(coord: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glTexGeni") fn _glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
@symbol("glTexGeniOES") fn _glTexGeniOES(coord: GLenum, pname: GLenum, param: GLint) void;
@symbol("glTexGeniv") fn _glTexGeniv(coord: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexGenivOES") fn _glTexGenivOES(coord: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexGenxOES") fn _glTexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glTexGenxvOES") fn _glTexGenxvOES(coord: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glTexImage1D") fn _glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexImage2D") fn _glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexImage2DMultisample") fn _glTexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTexImage2DMultisampleCoverageNV") fn _glTexImage2DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) void;
@symbol("glTexImage3D") fn _glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexImage3DEXT") fn _glTexImage3DEXT(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexImage3DMultisample") fn _glTexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTexImage3DMultisampleCoverageNV") fn _glTexImage3DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) void;
@symbol("glTexImage3DOES") fn _glTexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexImage4DSGIS") fn _glTexImage4DSGIS(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, _size4d: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexPageCommitmentEXT") fn _glTexPageCommitmentEXT(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) void;
@symbol("glTexPageCommitmentMemNV") fn _glTexPageCommitmentMemNV(target: GLenum, layer: GLint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, _offset: GLuint64, commit: GLboolean) void;
@symbol("glTexParameterIiv") fn _glTexParameterIiv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexParameterIivEXT") fn _glTexParameterIivEXT(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexParameterIivOES") fn _glTexParameterIivOES(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexParameterIuiv") fn _glTexParameterIuiv(target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glTexParameterIuivEXT") fn _glTexParameterIuivEXT(target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glTexParameterIuivOES") fn _glTexParameterIuivOES(target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glTexParameterf") fn _glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glTexParameterfv") fn _glTexParameterfv(target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glTexParameteri") fn _glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glTexParameteriv") fn _glTexParameteriv(target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTexParameterx") fn _glTexParameterx(target: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glTexParameterxOES") fn _glTexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) void;
@symbol("glTexParameterxv") fn _glTexParameterxv(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glTexParameterxvOES") fn _glTexParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed) void;
@symbol("glTexRenderbufferNV") fn _glTexRenderbufferNV(target: GLenum, renderbuffer: GLuint) void;
@symbol("glTexStorage1D") fn _glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) void;
@symbol("glTexStorage1DEXT") fn _glTexStorage1DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) void;
@symbol("glTexStorage2D") fn _glTexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glTexStorage2DEXT") fn _glTexStorage2DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glTexStorage2DMultisample") fn _glTexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTexStorage3D") fn _glTexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glTexStorage3DEXT") fn _glTexStorage3DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glTexStorage3DMultisample") fn _glTexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTexStorage3DMultisampleOES") fn _glTexStorage3DMultisampleOES(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTexStorageAttribs2DEXT") fn _glTexStorageAttribs2DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, attrib_list: GLint) void;
@symbol("glTexStorageAttribs3DEXT") fn _glTexStorageAttribs3DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, attrib_list: GLint) void;
@symbol("glTexStorageMem1DEXT") fn _glTexStorageMem1DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, _offset: GLuint64) void;
@symbol("glTexStorageMem2DEXT") fn _glTexStorageMem2DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, _offset: GLuint64) void;
@symbol("glTexStorageMem2DMultisampleEXT") fn _glTexStorageMem2DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, _offset: GLuint64) void;
@symbol("glTexStorageMem3DEXT") fn _glTexStorageMem3DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, _offset: GLuint64) void;
@symbol("glTexStorageMem3DMultisampleEXT") fn _glTexStorageMem3DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, _offset: GLuint64) void;
@symbol("glTexStorageSparseAMD") fn _glTexStorageSparseAMD(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) void;
@symbol("glTexSubImage1D") fn _glTexSubImage1D(target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage1DEXT") fn _glTexSubImage1DEXT(target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage2D") fn _glTexSubImage2D(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage2DEXT") fn _glTexSubImage2DEXT(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage3D") fn _glTexSubImage3D(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage3DEXT") fn _glTexSubImage3DEXT(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage3DOES") fn _glTexSubImage3DOES(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTexSubImage4DSGIS") fn _glTexSubImage4DSGIS(target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, w_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, _size4d: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureAttachMemoryNV") fn _glTextureAttachMemoryNV(texture: GLuint, memory: GLuint, _offset: GLuint64) void;
@symbol("glTextureBarrier") fn _glTextureBarrier() void;
@symbol("glTextureBarrierNV") fn _glTextureBarrierNV() void;
@symbol("glTextureBuffer") fn _glTextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint) void;
@symbol("glTextureBufferEXT") fn _glTextureBufferEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) void;
@symbol("glTextureBufferRange") fn _glTextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glTextureBufferRangeEXT") fn _glTextureBufferRangeEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glTextureColorMaskSGIS") fn _glTextureColorMaskSGIS(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
@symbol("glTextureFoveationParametersQCOM") fn _glTextureFoveationParametersQCOM(texture: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat) void;
@symbol("glTextureImage1DEXT") fn _glTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureImage2DEXT") fn _glTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureImage2DMultisampleCoverageNV") fn _glTextureImage2DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) void;
@symbol("glTextureImage2DMultisampleNV") fn _glTextureImage2DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) void;
@symbol("glTextureImage3DEXT") fn _glTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureImage3DMultisampleCoverageNV") fn _glTextureImage3DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) void;
@symbol("glTextureImage3DMultisampleNV") fn _glTextureImage3DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) void;
@symbol("glTextureLightEXT") fn _glTextureLightEXT(pname: GLenum) void;
@symbol("glTextureMaterialEXT") fn _glTextureMaterialEXT(face: GLenum, mode: GLenum) void;
@symbol("glTextureNormalEXT") fn _glTextureNormalEXT(mode: GLenum) void;
@symbol("glTexturePageCommitmentEXT") fn _glTexturePageCommitmentEXT(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) void;
@symbol("glTexturePageCommitmentMemNV") fn _glTexturePageCommitmentMemNV(texture: GLuint, layer: GLint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, _offset: GLuint64, commit: GLboolean) void;
@symbol("glTextureParameterIiv") fn _glTextureParameterIiv(texture: GLuint, pname: GLenum, params: GLint) void;
@symbol("glTextureParameterIivEXT") fn _glTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTextureParameterIuiv") fn _glTextureParameterIuiv(texture: GLuint, pname: GLenum, params: GLuint) void;
@symbol("glTextureParameterIuivEXT") fn _glTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint) void;
@symbol("glTextureParameterf") fn _glTextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat) void;
@symbol("glTextureParameterfEXT") fn _glTextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) void;
@symbol("glTextureParameterfv") fn _glTextureParameterfv(texture: GLuint, pname: GLenum, param: GLfloat) void;
@symbol("glTextureParameterfvEXT") fn _glTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat) void;
@symbol("glTextureParameteri") fn _glTextureParameteri(texture: GLuint, pname: GLenum, param: GLint) void;
@symbol("glTextureParameteriEXT") fn _glTextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glTextureParameteriv") fn _glTextureParameteriv(texture: GLuint, pname: GLenum, param: GLint) void;
@symbol("glTextureParameterivEXT") fn _glTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint) void;
@symbol("glTextureRangeAPPLE") fn _glTextureRangeAPPLE(target: GLenum, _length: GLsizei, pointer: nullable *void) void;
@symbol("glTextureRenderbufferEXT") fn _glTextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint) void;
@symbol("glTextureStorage1D") fn _glTextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) void;
@symbol("glTextureStorage1DEXT") fn _glTextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) void;
@symbol("glTextureStorage2D") fn _glTextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glTextureStorage2DEXT") fn _glTextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
@symbol("glTextureStorage2DMultisample") fn _glTextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTextureStorage2DMultisampleEXT") fn _glTextureStorage2DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTextureStorage3D") fn _glTextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glTextureStorage3DEXT") fn _glTextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void;
@symbol("glTextureStorage3DMultisample") fn _glTextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTextureStorage3DMultisampleEXT") fn _glTextureStorage3DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) void;
@symbol("glTextureStorageMem1DEXT") fn _glTextureStorageMem1DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, _offset: GLuint64) void;
@symbol("glTextureStorageMem2DEXT") fn _glTextureStorageMem2DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, _offset: GLuint64) void;
@symbol("glTextureStorageMem2DMultisampleEXT") fn _glTextureStorageMem2DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, _offset: GLuint64) void;
@symbol("glTextureStorageMem3DEXT") fn _glTextureStorageMem3DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, _offset: GLuint64) void;
@symbol("glTextureStorageMem3DMultisampleEXT") fn _glTextureStorageMem3DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, _offset: GLuint64) void;
@symbol("glTextureStorageSparseAMD") fn _glTextureStorageSparseAMD(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) void;
@symbol("glTextureSubImage1D") fn _glTextureSubImage1D(texture: GLuint, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureSubImage1DEXT") fn _glTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, width: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureSubImage2D") fn _glTextureSubImage2D(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureSubImage2DEXT") fn _glTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, width: GLsizei, height: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureSubImage3D") fn _glTextureSubImage3D(texture: GLuint, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureSubImage3DEXT") fn _glTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, x_offset: GLint, y_offset: GLint, z_offset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, _type: GLenum, pixels: nullable *void) void;
@symbol("glTextureView") fn _glTextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) void;
@symbol("glTextureViewEXT") fn _glTextureViewEXT(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) void;
@symbol("glTextureViewOES") fn _glTextureViewOES(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) void;
@symbol("glTrackMatrixNV") fn _glTrackMatrixNV(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) void;
@symbol("glTransformFeedbackAttribsNV") fn _glTransformFeedbackAttribsNV(count: GLsizei, attribs: GLint, bufferMode: GLenum) void;
@symbol("glTransformFeedbackBufferBase") fn _glTransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint) void;
@symbol("glTransformFeedbackBufferRange") fn _glTransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, _offset: GLintptr, _size: GLsizeiptr) void;
@symbol("glTransformFeedbackStreamAttribsNV") fn _glTransformFeedbackStreamAttribsNV(count: GLsizei, attribs: GLint, nbuffers: GLsizei, bufstreams: GLint, bufferMode: GLenum) void;
@symbol("glTransformFeedbackVaryings") fn _glTransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: GLchar, bufferMode: GLenum) void;
@symbol("glTransformFeedbackVaryingsEXT") fn _glTransformFeedbackVaryingsEXT(program: GLuint, count: GLsizei, varyings: GLchar, bufferMode: GLenum) void;
@symbol("glTransformFeedbackVaryingsNV") fn _glTransformFeedbackVaryingsNV(program: GLuint, count: GLsizei, locations: GLint, bufferMode: GLenum) void;
@symbol("glTransformPathNV") fn _glTransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: GLfloat) void;
@symbol("glTranslated") fn _glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glTranslatef") fn _glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glTranslatex") fn _glTranslatex(x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glTranslatexOES") fn _glTranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glUniform1d") fn _glUniform1d(location: GLint, x: GLdouble) void;
@symbol("glUniform1dv") fn _glUniform1dv(location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glUniform1f") fn _glUniform1f(location: GLint, v0: GLfloat) void;
@symbol("glUniform1fv") fn _glUniform1fv(location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glUniform1i") fn _glUniform1i(location: GLint, v0: GLint) void;
@symbol("glUniform1i64NV") fn _glUniform1i64NV(location: GLint, x: GLint64EXT) void;
@symbol("glUniform1i64vNV") fn _glUniform1i64vNV(location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glUniform1iv") fn _glUniform1iv(location: GLint, count: GLsizei, value: GLint) void;
@symbol("glUniform1ui") fn _glUniform1ui(location: GLint, v0: GLuint) void;
@symbol("glUniform1ui64NV") fn _glUniform1ui64NV(location: GLint, x: GLuint64EXT) void;
@symbol("glUniform1ui64vNV") fn _glUniform1ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glUniform1uiEXT") fn _glUniform1uiEXT(location: GLint, v0: GLuint) void;
@symbol("glUniform1uiv") fn _glUniform1uiv(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform1uivEXT") fn _glUniform1uivEXT(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform2d") fn _glUniform2d(location: GLint, x: GLdouble, y: GLdouble) void;
@symbol("glUniform2dv") fn _glUniform2dv(location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glUniform2f") fn _glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat) void;
@symbol("glUniform2fv") fn _glUniform2fv(location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glUniform2i") fn _glUniform2i(location: GLint, v0: GLint, v1: GLint) void;
@symbol("glUniform2i64NV") fn _glUniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT) void;
@symbol("glUniform2i64vNV") fn _glUniform2i64vNV(location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glUniform2iv") fn _glUniform2iv(location: GLint, count: GLsizei, value: GLint) void;
@symbol("glUniform2ui") fn _glUniform2ui(location: GLint, v0: GLuint, v1: GLuint) void;
@symbol("glUniform2ui64NV") fn _glUniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT) void;
@symbol("glUniform2ui64vNV") fn _glUniform2ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glUniform2uiEXT") fn _glUniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint) void;
@symbol("glUniform2uiv") fn _glUniform2uiv(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform2uivEXT") fn _glUniform2uivEXT(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform3d") fn _glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glUniform3dv") fn _glUniform3dv(location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glUniform3f") fn _glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
@symbol("glUniform3fv") fn _glUniform3fv(location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glUniform3i") fn _glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
@symbol("glUniform3i64NV") fn _glUniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) void;
@symbol("glUniform3i64vNV") fn _glUniform3i64vNV(location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glUniform3iv") fn _glUniform3iv(location: GLint, count: GLsizei, value: GLint) void;
@symbol("glUniform3ui") fn _glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void;
@symbol("glUniform3ui64NV") fn _glUniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) void;
@symbol("glUniform3ui64vNV") fn _glUniform3ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glUniform3uiEXT") fn _glUniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void;
@symbol("glUniform3uiv") fn _glUniform3uiv(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform3uivEXT") fn _glUniform3uivEXT(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform4d") fn _glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glUniform4dv") fn _glUniform4dv(location: GLint, count: GLsizei, value: GLdouble) void;
@symbol("glUniform4f") fn _glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
@symbol("glUniform4fv") fn _glUniform4fv(location: GLint, count: GLsizei, value: GLfloat) void;
@symbol("glUniform4i") fn _glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
@symbol("glUniform4i64NV") fn _glUniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) void;
@symbol("glUniform4i64vNV") fn _glUniform4i64vNV(location: GLint, count: GLsizei, value: GLint64EXT) void;
@symbol("glUniform4iv") fn _glUniform4iv(location: GLint, count: GLsizei, value: GLint) void;
@symbol("glUniform4ui") fn _glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void;
@symbol("glUniform4ui64NV") fn _glUniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) void;
@symbol("glUniform4ui64vNV") fn _glUniform4ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glUniform4uiEXT") fn _glUniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void;
@symbol("glUniform4uiv") fn _glUniform4uiv(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniform4uivEXT") fn _glUniform4uivEXT(location: GLint, count: GLsizei, value: GLuint) void;
@symbol("glUniformBlockBinding") fn _glUniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) void;
@symbol("glUniformBufferEXT") fn _glUniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint) void;
@symbol("glUniformHandleui64IMG") fn _glUniformHandleui64IMG(location: GLint, value: GLuint64) void;
@symbol("glUniformHandleui64NV") fn _glUniformHandleui64NV(location: GLint, value: GLuint64) void;
@symbol("glUniformHandleui64vIMG") fn _glUniformHandleui64vIMG(location: GLint, count: GLsizei, value: GLuint64) void;
@symbol("glUniformHandleui64vNV") fn _glUniformHandleui64vNV(location: GLint, count: GLsizei, value: GLuint64) void;
@symbol("glUniformMatrix2dv") fn _glUniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix2fv") fn _glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix2x3dv") fn _glUniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix2x3fv") fn _glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix2x3fvNV") fn _glUniformMatrix2x3fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix2x4dv") fn _glUniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix2x4fv") fn _glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix2x4fvNV") fn _glUniformMatrix2x4fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix3dv") fn _glUniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix3fv") fn _glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix3x2dv") fn _glUniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix3x2fv") fn _glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix3x2fvNV") fn _glUniformMatrix3x2fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix3x4dv") fn _glUniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix3x4fv") fn _glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix3x4fvNV") fn _glUniformMatrix3x4fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix4dv") fn _glUniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix4fv") fn _glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix4x2dv") fn _glUniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix4x2fv") fn _glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix4x2fvNV") fn _glUniformMatrix4x2fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix4x3dv") fn _glUniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble) void;
@symbol("glUniformMatrix4x3fv") fn _glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformMatrix4x3fvNV") fn _glUniformMatrix4x3fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat) void;
@symbol("glUniformSubroutinesuiv") fn _glUniformSubroutinesuiv(shader_type: GLenum, count: GLsizei, indices: GLuint) void;
@symbol("glUniformui64NV") fn _glUniformui64NV(location: GLint, value: GLuint64EXT) void;
@symbol("glUniformui64vNV") fn _glUniformui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT) void;
@symbol("glUnlockArraysEXT") fn _glUnlockArraysEXT() void;
@symbol("glUnmapBuffer") fn _glUnmapBuffer(target: GLenum) GLboolean;
@symbol("glUnmapBufferOES") fn _glUnmapBufferOES(target: GLenum) GLboolean;
@symbol("glUnmapNamedBuffer") fn _glUnmapNamedBuffer(buffer: GLuint) GLboolean;
@symbol("glUnmapNamedBufferEXT") fn _glUnmapNamedBufferEXT(buffer: GLuint) GLboolean;
@symbol("glUnmapObjectBufferATI") fn _glUnmapObjectBufferATI(buffer: GLuint) void;
@symbol("glUnmapTexture2DINTEL") fn _glUnmapTexture2DINTEL(texture: GLuint, level: GLint) void;
@symbol("glUpdateObjectBufferATI") fn _glUpdateObjectBufferATI(buffer: GLuint, _offset: GLuint, _size: GLsizei, pointer: nullable *void, preserve: GLenum) void;
@symbol("glUploadGpuMaskNVX") fn _glUploadGpuMaskNVX(mask: GLbitfield) void;
@symbol("glUseProgram") fn _glUseProgram(program: GLuint) void;
@symbol("glUseProgramStages") fn _glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) void;
@symbol("glUseProgramStagesEXT") fn _glUseProgramStagesEXT(pipeline: GLuint, stages: GLbitfield, program: GLuint) void;
@symbol("glUseShaderProgramEXT") fn _glUseShaderProgramEXT(_type: GLenum, program: GLuint) void;
@symbol("glVDPAUFiniNV") fn _glVDPAUFiniNV() void;
@symbol("glVDPAUGetSurfaceivNV") fn _glVDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, _length: GLsizei, values: GLint) void;
@symbol("glVDPAUInitNV") fn _glVDPAUInitNV(vdpDevice: nullable *void, getProcAddress: nullable *void) void;
@symbol("glVDPAUIsSurfaceNV") fn _glVDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV) GLboolean;
@symbol("glVDPAUMapSurfacesNV") fn _glVDPAUMapSurfacesNV(numSurfaces: GLsizei, surfaces: GLvdpauSurfaceNV) void;
@symbol("glVDPAURegisterOutputSurfaceNV") fn _glVDPAURegisterOutputSurfaceNV(vdpSurface: nullable *void, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint) GLvdpauSurfaceNV;
@symbol("glVDPAURegisterVideoSurfaceNV") fn _glVDPAURegisterVideoSurfaceNV(vdpSurface: nullable *void, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint) GLvdpauSurfaceNV;
@symbol("glVDPAURegisterVideoSurfaceWithPictureStructureNV") fn _glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface: nullable *void, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint, isFrameStructure: GLboolean) GLvdpauSurfaceNV;
@symbol("glVDPAUSurfaceAccessNV") fn _glVDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV, access: GLenum) void;
@symbol("glVDPAUUnmapSurfacesNV") fn _glVDPAUUnmapSurfacesNV(numSurface: GLsizei, surfaces: GLvdpauSurfaceNV) void;
@symbol("glVDPAUUnregisterSurfaceNV") fn _glVDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV) void;
@symbol("glValidateProgram") fn _glValidateProgram(program: GLuint) void;
@symbol("glValidateProgramPipeline") fn _glValidateProgramPipeline(pipeline: GLuint) void;
@symbol("glValidateProgramPipelineEXT") fn _glValidateProgramPipelineEXT(pipeline: GLuint) void;
@symbol("glVariantArrayObjectATI") fn _glVariantArrayObjectATI(id: GLuint, _type: GLenum, stride: GLsizei, buffer: GLuint, _offset: GLuint) void;
@symbol("glVariantPointerEXT") fn _glVariantPointerEXT(id: GLuint, _type: GLenum, stride: GLuint, addr: nullable *void) void;
@symbol("glVariantbvEXT") fn _glVariantbvEXT(id: GLuint, addr: GLbyte) void;
@symbol("glVariantdvEXT") fn _glVariantdvEXT(id: GLuint, addr: GLdouble) void;
@symbol("glVariantfvEXT") fn _glVariantfvEXT(id: GLuint, addr: GLfloat) void;
@symbol("glVariantivEXT") fn _glVariantivEXT(id: GLuint, addr: GLint) void;
@symbol("glVariantsvEXT") fn _glVariantsvEXT(id: GLuint, addr: GLshort) void;
@symbol("glVariantubvEXT") fn _glVariantubvEXT(id: GLuint, addr: GLubyte) void;
@symbol("glVariantuivEXT") fn _glVariantuivEXT(id: GLuint, addr: GLuint) void;
@symbol("glVariantusvEXT") fn _glVariantusvEXT(id: GLuint, addr: GLushort) void;
@symbol("glVertex2bOES") fn _glVertex2bOES(x: GLbyte, y: GLbyte) void;
@symbol("glVertex2bvOES") fn _glVertex2bvOES(coords: GLbyte) void;
@symbol("glVertex2d") fn _glVertex2d(x: GLdouble, y: GLdouble) void;
@symbol("glVertex2dv") fn _glVertex2dv(v: GLdouble) void;
@symbol("glVertex2f") fn _glVertex2f(x: GLfloat, y: GLfloat) void;
@symbol("glVertex2fv") fn _glVertex2fv(v: GLfloat) void;
@symbol("glVertex2hNV") fn _glVertex2hNV(x: GLhalfNV, y: GLhalfNV) void;
@symbol("glVertex2hvNV") fn _glVertex2hvNV(v: GLhalfNV) void;
@symbol("glVertex2i") fn _glVertex2i(x: GLint, y: GLint) void;
@symbol("glVertex2iv") fn _glVertex2iv(v: GLint) void;
@symbol("glVertex2s") fn _glVertex2s(x: GLshort, y: GLshort) void;
@symbol("glVertex2sv") fn _glVertex2sv(v: GLshort) void;
@symbol("glVertex2xOES") fn _glVertex2xOES(x: GLfixed) void;
@symbol("glVertex2xvOES") fn _glVertex2xvOES(coords: GLfixed) void;
@symbol("glVertex3bOES") fn _glVertex3bOES(x: GLbyte, y: GLbyte, z: GLbyte) void;
@symbol("glVertex3bvOES") fn _glVertex3bvOES(coords: GLbyte) void;
@symbol("glVertex3d") fn _glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glVertex3dv") fn _glVertex3dv(v: GLdouble) void;
@symbol("glVertex3f") fn _glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glVertex3fv") fn _glVertex3fv(v: GLfloat) void;
@symbol("glVertex3hNV") fn _glVertex3hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) void;
@symbol("glVertex3hvNV") fn _glVertex3hvNV(v: GLhalfNV) void;
@symbol("glVertex3i") fn _glVertex3i(x: GLint, y: GLint, z: GLint) void;
@symbol("glVertex3iv") fn _glVertex3iv(v: GLint) void;
@symbol("glVertex3s") fn _glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glVertex3sv") fn _glVertex3sv(v: GLshort) void;
@symbol("glVertex3xOES") fn _glVertex3xOES(x: GLfixed, y: GLfixed) void;
@symbol("glVertex3xvOES") fn _glVertex3xvOES(coords: GLfixed) void;
@symbol("glVertex4bOES") fn _glVertex4bOES(x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) void;
@symbol("glVertex4bvOES") fn _glVertex4bvOES(coords: GLbyte) void;
@symbol("glVertex4d") fn _glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glVertex4dv") fn _glVertex4dv(v: GLdouble) void;
@symbol("glVertex4f") fn _glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glVertex4fv") fn _glVertex4fv(v: GLfloat) void;
@symbol("glVertex4hNV") fn _glVertex4hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) void;
@symbol("glVertex4hvNV") fn _glVertex4hvNV(v: GLhalfNV) void;
@symbol("glVertex4i") fn _glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glVertex4iv") fn _glVertex4iv(v: GLint) void;
@symbol("glVertex4s") fn _glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
@symbol("glVertex4sv") fn _glVertex4sv(v: GLshort) void;
@symbol("glVertex4xOES") fn _glVertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed) void;
@symbol("glVertex4xvOES") fn _glVertex4xvOES(coords: GLfixed) void;
@symbol("glVertexArrayAttribBinding") fn _glVertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) void;
@symbol("glVertexArrayAttribFormat") fn _glVertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, relative_offset: GLuint) void;
@symbol("glVertexArrayAttribIFormat") fn _glVertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, _size: GLint, _type: GLenum, relative_offset: GLuint) void;
@symbol("glVertexArrayAttribLFormat") fn _glVertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, _size: GLint, _type: GLenum, relative_offset: GLuint) void;
@symbol("glVertexArrayBindVertexBufferEXT") fn _glVertexArrayBindVertexBufferEXT(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, _offset: GLintptr, stride: GLsizei) void;
@symbol("glVertexArrayBindingDivisor") fn _glVertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) void;
@symbol("glVertexArrayColorOffsetEXT") fn _glVertexArrayColorOffsetEXT(vaobj: GLuint, buffer: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayEdgeFlagOffsetEXT") fn _glVertexArrayEdgeFlagOffsetEXT(vaobj: GLuint, buffer: GLuint, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayElementBuffer") fn _glVertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint) void;
@symbol("glVertexArrayFogCoordOffsetEXT") fn _glVertexArrayFogCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayIndexOffsetEXT") fn _glVertexArrayIndexOffsetEXT(vaobj: GLuint, buffer: GLuint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayMultiTexCoordOffsetEXT") fn _glVertexArrayMultiTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, texunit: GLenum, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayNormalOffsetEXT") fn _glVertexArrayNormalOffsetEXT(vaobj: GLuint, buffer: GLuint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayParameteriAPPLE") fn _glVertexArrayParameteriAPPLE(pname: GLenum, param: GLint) void;
@symbol("glVertexArrayRangeAPPLE") fn _glVertexArrayRangeAPPLE(_length: GLsizei, pointer: *void) void;
@symbol("glVertexArrayRangeNV") fn _glVertexArrayRangeNV(_length: GLsizei, pointer: nullable *void) void;
@symbol("glVertexArraySecondaryColorOffsetEXT") fn _glVertexArraySecondaryColorOffsetEXT(vaobj: GLuint, buffer: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayTexCoordOffsetEXT") fn _glVertexArrayTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayVertexAttribBindingEXT") fn _glVertexArrayVertexAttribBindingEXT(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) void;
@symbol("glVertexArrayVertexAttribDivisorEXT") fn _glVertexArrayVertexAttribDivisorEXT(vaobj: GLuint, index: GLuint, divisor: GLuint) void;
@symbol("glVertexArrayVertexAttribFormatEXT") fn _glVertexArrayVertexAttribFormatEXT(vaobj: GLuint, attribindex: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, relative_offset: GLuint) void;
@symbol("glVertexArrayVertexAttribIFormatEXT") fn _glVertexArrayVertexAttribIFormatEXT(vaobj: GLuint, attribindex: GLuint, _size: GLint, _type: GLenum, relative_offset: GLuint) void;
@symbol("glVertexArrayVertexAttribIOffsetEXT") fn _glVertexArrayVertexAttribIOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayVertexAttribLFormatEXT") fn _glVertexArrayVertexAttribLFormatEXT(vaobj: GLuint, attribindex: GLuint, _size: GLint, _type: GLenum, relative_offset: GLuint) void;
@symbol("glVertexArrayVertexAttribLOffsetEXT") fn _glVertexArrayVertexAttribLOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayVertexAttribOffsetEXT") fn _glVertexArrayVertexAttribOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexArrayVertexBindingDivisorEXT") fn _glVertexArrayVertexBindingDivisorEXT(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) void;
@symbol("glVertexArrayVertexBuffer") fn _glVertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, _offset: GLintptr, stride: GLsizei) void;
@symbol("glVertexArrayVertexBuffers") fn _glVertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: GLuint, _offsets: GLintptr, strides: GLsizei) void;
@symbol("glVertexArrayVertexOffsetEXT") fn _glVertexArrayVertexOffsetEXT(vaobj: GLuint, buffer: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, _offset: GLintptr) void;
@symbol("glVertexAttrib1d") fn _glVertexAttrib1d(index: GLuint, x: GLdouble) void;
@symbol("glVertexAttrib1dNV") fn _glVertexAttrib1dNV(index: GLuint, x: GLdouble) void;
@symbol("glVertexAttrib1dv") fn _glVertexAttrib1dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib1dvNV") fn _glVertexAttrib1dvNV(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib1f") fn _glVertexAttrib1f(index: GLuint, x: GLfloat) void;
@symbol("glVertexAttrib1fNV") fn _glVertexAttrib1fNV(index: GLuint, x: GLfloat) void;
@symbol("glVertexAttrib1fv") fn _glVertexAttrib1fv(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib1fvNV") fn _glVertexAttrib1fvNV(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib1hNV") fn _glVertexAttrib1hNV(index: GLuint, x: GLhalfNV) void;
@symbol("glVertexAttrib1hvNV") fn _glVertexAttrib1hvNV(index: GLuint, v: GLhalfNV) void;
@symbol("glVertexAttrib1s") fn _glVertexAttrib1s(index: GLuint, x: GLshort) void;
@symbol("glVertexAttrib1sNV") fn _glVertexAttrib1sNV(index: GLuint, x: GLshort) void;
@symbol("glVertexAttrib1sv") fn _glVertexAttrib1sv(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib1svNV") fn _glVertexAttrib1svNV(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib2d") fn _glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) void;
@symbol("glVertexAttrib2dNV") fn _glVertexAttrib2dNV(index: GLuint, x: GLdouble, y: GLdouble) void;
@symbol("glVertexAttrib2dv") fn _glVertexAttrib2dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib2dvNV") fn _glVertexAttrib2dvNV(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib2f") fn _glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) void;
@symbol("glVertexAttrib2fNV") fn _glVertexAttrib2fNV(index: GLuint, x: GLfloat, y: GLfloat) void;
@symbol("glVertexAttrib2fv") fn _glVertexAttrib2fv(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib2fvNV") fn _glVertexAttrib2fvNV(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib2hNV") fn _glVertexAttrib2hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV) void;
@symbol("glVertexAttrib2hvNV") fn _glVertexAttrib2hvNV(index: GLuint, v: GLhalfNV) void;
@symbol("glVertexAttrib2s") fn _glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) void;
@symbol("glVertexAttrib2sNV") fn _glVertexAttrib2sNV(index: GLuint, x: GLshort, y: GLshort) void;
@symbol("glVertexAttrib2sv") fn _glVertexAttrib2sv(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib2svNV") fn _glVertexAttrib2svNV(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib3d") fn _glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glVertexAttrib3dNV") fn _glVertexAttrib3dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glVertexAttrib3dv") fn _glVertexAttrib3dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib3dvNV") fn _glVertexAttrib3dvNV(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib3f") fn _glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glVertexAttrib3fNV") fn _glVertexAttrib3fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glVertexAttrib3fv") fn _glVertexAttrib3fv(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib3fvNV") fn _glVertexAttrib3fvNV(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib3hNV") fn _glVertexAttrib3hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) void;
@symbol("glVertexAttrib3hvNV") fn _glVertexAttrib3hvNV(index: GLuint, v: GLhalfNV) void;
@symbol("glVertexAttrib3s") fn _glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glVertexAttrib3sNV") fn _glVertexAttrib3sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glVertexAttrib3sv") fn _glVertexAttrib3sv(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib3svNV") fn _glVertexAttrib3svNV(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib4Nbv") fn _glVertexAttrib4Nbv(index: GLuint, v: GLbyte) void;
@symbol("glVertexAttrib4Niv") fn _glVertexAttrib4Niv(index: GLuint, v: GLint) void;
@symbol("glVertexAttrib4Nsv") fn _glVertexAttrib4Nsv(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib4Nub") fn _glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) void;
@symbol("glVertexAttrib4Nubv") fn _glVertexAttrib4Nubv(index: GLuint, v: GLubyte) void;
@symbol("glVertexAttrib4Nuiv") fn _glVertexAttrib4Nuiv(index: GLuint, v: GLuint) void;
@symbol("glVertexAttrib4Nusv") fn _glVertexAttrib4Nusv(index: GLuint, v: GLushort) void;
@symbol("glVertexAttrib4bv") fn _glVertexAttrib4bv(index: GLuint, v: GLbyte) void;
@symbol("glVertexAttrib4d") fn _glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glVertexAttrib4dNV") fn _glVertexAttrib4dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glVertexAttrib4dv") fn _glVertexAttrib4dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib4dvNV") fn _glVertexAttrib4dvNV(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttrib4f") fn _glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glVertexAttrib4fNV") fn _glVertexAttrib4fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glVertexAttrib4fv") fn _glVertexAttrib4fv(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib4fvNV") fn _glVertexAttrib4fvNV(index: GLuint, v: GLfloat) void;
@symbol("glVertexAttrib4hNV") fn _glVertexAttrib4hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) void;
@symbol("glVertexAttrib4hvNV") fn _glVertexAttrib4hvNV(index: GLuint, v: GLhalfNV) void;
@symbol("glVertexAttrib4iv") fn _glVertexAttrib4iv(index: GLuint, v: GLint) void;
@symbol("glVertexAttrib4s") fn _glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
@symbol("glVertexAttrib4sNV") fn _glVertexAttrib4sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
@symbol("glVertexAttrib4sv") fn _glVertexAttrib4sv(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib4svNV") fn _glVertexAttrib4svNV(index: GLuint, v: GLshort) void;
@symbol("glVertexAttrib4ubNV") fn _glVertexAttrib4ubNV(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) void;
@symbol("glVertexAttrib4ubv") fn _glVertexAttrib4ubv(index: GLuint, v: GLubyte) void;
@symbol("glVertexAttrib4ubvNV") fn _glVertexAttrib4ubvNV(index: GLuint, v: GLubyte) void;
@symbol("glVertexAttrib4uiv") fn _glVertexAttrib4uiv(index: GLuint, v: GLuint) void;
@symbol("glVertexAttrib4usv") fn _glVertexAttrib4usv(index: GLuint, v: GLushort) void;
@symbol("glVertexAttribArrayObjectATI") fn _glVertexAttribArrayObjectATI(index: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, _offset: GLuint) void;
@symbol("glVertexAttribBinding") fn _glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) void;
@symbol("glVertexAttribDivisor") fn _glVertexAttribDivisor(index: GLuint, divisor: GLuint) void;
@symbol("glVertexAttribDivisorANGLE") fn _glVertexAttribDivisorANGLE(index: GLuint, divisor: GLuint) void;
@symbol("glVertexAttribDivisorEXT") fn _glVertexAttribDivisorEXT(index: GLuint, divisor: GLuint) void;
@symbol("glVertexAttribDivisorNV") fn _glVertexAttribDivisorNV(index: GLuint, divisor: GLuint) void;
@symbol("glVertexAttribFormat") fn _glVertexAttribFormat(attribindex: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, relative_offset: GLuint) void;
@symbol("glVertexAttribFormatNV") fn _glVertexAttribFormatNV(index: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, stride: GLsizei) void;
@symbol("glVertexAttribI1i") fn _glVertexAttribI1i(index: GLuint, x: GLint) void;
@symbol("glVertexAttribI1iEXT") fn _glVertexAttribI1iEXT(index: GLuint, x: GLint) void;
@symbol("glVertexAttribI1iv") fn _glVertexAttribI1iv(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI1ivEXT") fn _glVertexAttribI1ivEXT(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI1ui") fn _glVertexAttribI1ui(index: GLuint, x: GLuint) void;
@symbol("glVertexAttribI1uiEXT") fn _glVertexAttribI1uiEXT(index: GLuint, x: GLuint) void;
@symbol("glVertexAttribI1uiv") fn _glVertexAttribI1uiv(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI1uivEXT") fn _glVertexAttribI1uivEXT(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI2i") fn _glVertexAttribI2i(index: GLuint, x: GLint, y: GLint) void;
@symbol("glVertexAttribI2iEXT") fn _glVertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint) void;
@symbol("glVertexAttribI2iv") fn _glVertexAttribI2iv(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI2ivEXT") fn _glVertexAttribI2ivEXT(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI2ui") fn _glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint) void;
@symbol("glVertexAttribI2uiEXT") fn _glVertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint) void;
@symbol("glVertexAttribI2uiv") fn _glVertexAttribI2uiv(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI2uivEXT") fn _glVertexAttribI2uivEXT(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI3i") fn _glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint) void;
@symbol("glVertexAttribI3iEXT") fn _glVertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint) void;
@symbol("glVertexAttribI3iv") fn _glVertexAttribI3iv(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI3ivEXT") fn _glVertexAttribI3ivEXT(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI3ui") fn _glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint) void;
@symbol("glVertexAttribI3uiEXT") fn _glVertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint) void;
@symbol("glVertexAttribI3uiv") fn _glVertexAttribI3uiv(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI3uivEXT") fn _glVertexAttribI3uivEXT(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI4bv") fn _glVertexAttribI4bv(index: GLuint, v: GLbyte) void;
@symbol("glVertexAttribI4bvEXT") fn _glVertexAttribI4bvEXT(index: GLuint, v: GLbyte) void;
@symbol("glVertexAttribI4i") fn _glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glVertexAttribI4iEXT") fn _glVertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glVertexAttribI4iv") fn _glVertexAttribI4iv(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI4ivEXT") fn _glVertexAttribI4ivEXT(index: GLuint, v: GLint) void;
@symbol("glVertexAttribI4sv") fn _glVertexAttribI4sv(index: GLuint, v: GLshort) void;
@symbol("glVertexAttribI4svEXT") fn _glVertexAttribI4svEXT(index: GLuint, v: GLshort) void;
@symbol("glVertexAttribI4ubv") fn _glVertexAttribI4ubv(index: GLuint, v: GLubyte) void;
@symbol("glVertexAttribI4ubvEXT") fn _glVertexAttribI4ubvEXT(index: GLuint, v: GLubyte) void;
@symbol("glVertexAttribI4ui") fn _glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) void;
@symbol("glVertexAttribI4uiEXT") fn _glVertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) void;
@symbol("glVertexAttribI4uiv") fn _glVertexAttribI4uiv(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI4uivEXT") fn _glVertexAttribI4uivEXT(index: GLuint, v: GLuint) void;
@symbol("glVertexAttribI4usv") fn _glVertexAttribI4usv(index: GLuint, v: GLushort) void;
@symbol("glVertexAttribI4usvEXT") fn _glVertexAttribI4usvEXT(index: GLuint, v: GLushort) void;
@symbol("glVertexAttribIFormat") fn _glVertexAttribIFormat(attribindex: GLuint, _size: GLint, _type: GLenum, relative_offset: GLuint) void;
@symbol("glVertexAttribIFormatNV") fn _glVertexAttribIFormatNV(index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei) void;
@symbol("glVertexAttribIPointer") fn _glVertexAttribIPointer(index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexAttribIPointerEXT") fn _glVertexAttribIPointerEXT(index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexAttribL1d") fn _glVertexAttribL1d(index: GLuint, x: GLdouble) void;
@symbol("glVertexAttribL1dEXT") fn _glVertexAttribL1dEXT(index: GLuint, x: GLdouble) void;
@symbol("glVertexAttribL1dv") fn _glVertexAttribL1dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL1dvEXT") fn _glVertexAttribL1dvEXT(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL1i64NV") fn _glVertexAttribL1i64NV(index: GLuint, x: GLint64EXT) void;
@symbol("glVertexAttribL1i64vNV") fn _glVertexAttribL1i64vNV(index: GLuint, v: GLint64EXT) void;
@symbol("glVertexAttribL1ui64NV") fn _glVertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT) void;
@symbol("glVertexAttribL1ui64vNV") fn _glVertexAttribL1ui64vNV(index: GLuint, v: GLuint64EXT) void;
@symbol("glVertexAttribL2d") fn _glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble) void;
@symbol("glVertexAttribL2dEXT") fn _glVertexAttribL2dEXT(index: GLuint, x: GLdouble, y: GLdouble) void;
@symbol("glVertexAttribL2dv") fn _glVertexAttribL2dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL2dvEXT") fn _glVertexAttribL2dvEXT(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL2i64NV") fn _glVertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT) void;
@symbol("glVertexAttribL2i64vNV") fn _glVertexAttribL2i64vNV(index: GLuint, v: GLint64EXT) void;
@symbol("glVertexAttribL2ui64NV") fn _glVertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) void;
@symbol("glVertexAttribL2ui64vNV") fn _glVertexAttribL2ui64vNV(index: GLuint, v: GLuint64EXT) void;
@symbol("glVertexAttribL3d") fn _glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glVertexAttribL3dEXT") fn _glVertexAttribL3dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glVertexAttribL3dv") fn _glVertexAttribL3dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL3dvEXT") fn _glVertexAttribL3dvEXT(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL3i64NV") fn _glVertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) void;
@symbol("glVertexAttribL3i64vNV") fn _glVertexAttribL3i64vNV(index: GLuint, v: GLint64EXT) void;
@symbol("glVertexAttribL3ui64NV") fn _glVertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) void;
@symbol("glVertexAttribL3ui64vNV") fn _glVertexAttribL3ui64vNV(index: GLuint, v: GLuint64EXT) void;
@symbol("glVertexAttribL4d") fn _glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glVertexAttribL4dEXT") fn _glVertexAttribL4dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glVertexAttribL4dv") fn _glVertexAttribL4dv(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL4dvEXT") fn _glVertexAttribL4dvEXT(index: GLuint, v: GLdouble) void;
@symbol("glVertexAttribL4i64NV") fn _glVertexAttribL4i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) void;
@symbol("glVertexAttribL4i64vNV") fn _glVertexAttribL4i64vNV(index: GLuint, v: GLint64EXT) void;
@symbol("glVertexAttribL4ui64NV") fn _glVertexAttribL4ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) void;
@symbol("glVertexAttribL4ui64vNV") fn _glVertexAttribL4ui64vNV(index: GLuint, v: GLuint64EXT) void;
@symbol("glVertexAttribLFormat") fn _glVertexAttribLFormat(attribindex: GLuint, _size: GLint, _type: GLenum, relative_offset: GLuint) void;
@symbol("glVertexAttribLFormatNV") fn _glVertexAttribLFormatNV(index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei) void;
@symbol("glVertexAttribLPointer") fn _glVertexAttribLPointer(index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexAttribLPointerEXT") fn _glVertexAttribLPointerEXT(index: GLuint, _size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexAttribP1ui") fn _glVertexAttribP1ui(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP1uiv") fn _glVertexAttribP1uiv(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP2ui") fn _glVertexAttribP2ui(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP2uiv") fn _glVertexAttribP2uiv(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP3ui") fn _glVertexAttribP3ui(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP3uiv") fn _glVertexAttribP3uiv(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP4ui") fn _glVertexAttribP4ui(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribP4uiv") fn _glVertexAttribP4uiv(index: GLuint, _type: GLenum, normalized: GLboolean, value: GLuint) void;
@symbol("glVertexAttribParameteriAMD") fn _glVertexAttribParameteriAMD(index: GLuint, pname: GLenum, param: GLint) void;
@symbol("glVertexAttribPointer") fn _glVertexAttribPointer(index: GLuint, _size: GLint, _type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexAttribPointerNV") fn _glVertexAttribPointerNV(index: GLuint, f_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexAttribs1dvNV") fn _glVertexAttribs1dvNV(index: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glVertexAttribs1fvNV") fn _glVertexAttribs1fvNV(index: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glVertexAttribs1hvNV") fn _glVertexAttribs1hvNV(index: GLuint, n: GLsizei, v: GLhalfNV) void;
@symbol("glVertexAttribs1svNV") fn _glVertexAttribs1svNV(index: GLuint, count: GLsizei, v: GLshort) void;
@symbol("glVertexAttribs2dvNV") fn _glVertexAttribs2dvNV(index: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glVertexAttribs2fvNV") fn _glVertexAttribs2fvNV(index: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glVertexAttribs2hvNV") fn _glVertexAttribs2hvNV(index: GLuint, n: GLsizei, v: GLhalfNV) void;
@symbol("glVertexAttribs2svNV") fn _glVertexAttribs2svNV(index: GLuint, count: GLsizei, v: GLshort) void;
@symbol("glVertexAttribs3dvNV") fn _glVertexAttribs3dvNV(index: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glVertexAttribs3fvNV") fn _glVertexAttribs3fvNV(index: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glVertexAttribs3hvNV") fn _glVertexAttribs3hvNV(index: GLuint, n: GLsizei, v: GLhalfNV) void;
@symbol("glVertexAttribs3svNV") fn _glVertexAttribs3svNV(index: GLuint, count: GLsizei, v: GLshort) void;
@symbol("glVertexAttribs4dvNV") fn _glVertexAttribs4dvNV(index: GLuint, count: GLsizei, v: GLdouble) void;
@symbol("glVertexAttribs4fvNV") fn _glVertexAttribs4fvNV(index: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glVertexAttribs4hvNV") fn _glVertexAttribs4hvNV(index: GLuint, n: GLsizei, v: GLhalfNV) void;
@symbol("glVertexAttribs4svNV") fn _glVertexAttribs4svNV(index: GLuint, count: GLsizei, v: GLshort) void;
@symbol("glVertexAttribs4ubvNV") fn _glVertexAttribs4ubvNV(index: GLuint, count: GLsizei, v: GLubyte) void;
@symbol("glVertexBindingDivisor") fn _glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) void;
@symbol("glVertexBlendEnvfATI") fn _glVertexBlendEnvfATI(pname: GLenum, param: GLfloat) void;
@symbol("glVertexBlendEnviATI") fn _glVertexBlendEnviATI(pname: GLenum, param: GLint) void;
@symbol("glVertexFormatNV") fn _glVertexFormatNV(_size: GLint, _type: GLenum, stride: GLsizei) void;
@symbol("glVertexP2ui") fn _glVertexP2ui(_type: GLenum, value: GLuint) void;
@symbol("glVertexP2uiv") fn _glVertexP2uiv(_type: GLenum, value: GLuint) void;
@symbol("glVertexP3ui") fn _glVertexP3ui(_type: GLenum, value: GLuint) void;
@symbol("glVertexP3uiv") fn _glVertexP3uiv(_type: GLenum, value: GLuint) void;
@symbol("glVertexP4ui") fn _glVertexP4ui(_type: GLenum, value: GLuint) void;
@symbol("glVertexP4uiv") fn _glVertexP4uiv(_type: GLenum, value: GLuint) void;
@symbol("glVertexPointer") fn _glVertexPointer(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexPointerEXT") fn _glVertexPointerEXT(_size: GLint, _type: GLenum, stride: GLsizei, count: GLsizei, pointer: nullable *void) void;
@symbol("glVertexPointerListIBM") fn _glVertexPointerListIBM(_size: GLint, _type: GLenum, stride: GLint, pointer: nullable *void, ptrstride: GLint) void;
@symbol("glVertexPointervINTEL") fn _glVertexPointervINTEL(_size: GLint, _type: GLenum, pointer: nullable *void) void;
@symbol("glVertexStream1dATI") fn _glVertexStream1dATI(stream: GLenum, x: GLdouble) void;
@symbol("glVertexStream1dvATI") fn _glVertexStream1dvATI(stream: GLenum, coords: GLdouble) void;
@symbol("glVertexStream1fATI") fn _glVertexStream1fATI(stream: GLenum, x: GLfloat) void;
@symbol("glVertexStream1fvATI") fn _glVertexStream1fvATI(stream: GLenum, coords: GLfloat) void;
@symbol("glVertexStream1iATI") fn _glVertexStream1iATI(stream: GLenum, x: GLint) void;
@symbol("glVertexStream1ivATI") fn _glVertexStream1ivATI(stream: GLenum, coords: GLint) void;
@symbol("glVertexStream1sATI") fn _glVertexStream1sATI(stream: GLenum, x: GLshort) void;
@symbol("glVertexStream1svATI") fn _glVertexStream1svATI(stream: GLenum, coords: GLshort) void;
@symbol("glVertexStream2dATI") fn _glVertexStream2dATI(stream: GLenum, x: GLdouble, y: GLdouble) void;
@symbol("glVertexStream2dvATI") fn _glVertexStream2dvATI(stream: GLenum, coords: GLdouble) void;
@symbol("glVertexStream2fATI") fn _glVertexStream2fATI(stream: GLenum, x: GLfloat, y: GLfloat) void;
@symbol("glVertexStream2fvATI") fn _glVertexStream2fvATI(stream: GLenum, coords: GLfloat) void;
@symbol("glVertexStream2iATI") fn _glVertexStream2iATI(stream: GLenum, x: GLint, y: GLint) void;
@symbol("glVertexStream2ivATI") fn _glVertexStream2ivATI(stream: GLenum, coords: GLint) void;
@symbol("glVertexStream2sATI") fn _glVertexStream2sATI(stream: GLenum, x: GLshort, y: GLshort) void;
@symbol("glVertexStream2svATI") fn _glVertexStream2svATI(stream: GLenum, coords: GLshort) void;
@symbol("glVertexStream3dATI") fn _glVertexStream3dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glVertexStream3dvATI") fn _glVertexStream3dvATI(stream: GLenum, coords: GLdouble) void;
@symbol("glVertexStream3fATI") fn _glVertexStream3fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glVertexStream3fvATI") fn _glVertexStream3fvATI(stream: GLenum, coords: GLfloat) void;
@symbol("glVertexStream3iATI") fn _glVertexStream3iATI(stream: GLenum, x: GLint, y: GLint, z: GLint) void;
@symbol("glVertexStream3ivATI") fn _glVertexStream3ivATI(stream: GLenum, coords: GLint) void;
@symbol("glVertexStream3sATI") fn _glVertexStream3sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glVertexStream3svATI") fn _glVertexStream3svATI(stream: GLenum, coords: GLshort) void;
@symbol("glVertexStream4dATI") fn _glVertexStream4dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glVertexStream4dvATI") fn _glVertexStream4dvATI(stream: GLenum, coords: GLdouble) void;
@symbol("glVertexStream4fATI") fn _glVertexStream4fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glVertexStream4fvATI") fn _glVertexStream4fvATI(stream: GLenum, coords: GLfloat) void;
@symbol("glVertexStream4iATI") fn _glVertexStream4iATI(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glVertexStream4ivATI") fn _glVertexStream4ivATI(stream: GLenum, coords: GLint) void;
@symbol("glVertexStream4sATI") fn _glVertexStream4sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
@symbol("glVertexStream4svATI") fn _glVertexStream4svATI(stream: GLenum, coords: GLshort) void;
@symbol("glVertexWeightPointerEXT") fn _glVertexWeightPointerEXT(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glVertexWeightfEXT") fn _glVertexWeightfEXT(weight: GLfloat) void;
@symbol("glVertexWeightfvEXT") fn _glVertexWeightfvEXT(weight: GLfloat) void;
@symbol("glVertexWeighthNV") fn _glVertexWeighthNV(weight: GLhalfNV) void;
@symbol("glVertexWeighthvNV") fn _glVertexWeighthvNV(weight: GLhalfNV) void;
@symbol("glVideoCaptureNV") fn _glVideoCaptureNV(video_capture_slot: GLuint, sequence_num: GLuint, capture_time: GLuint64EXT) GLenum;
@symbol("glVideoCaptureStreamParameterdvNV") fn _glVideoCaptureStreamParameterdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLdouble) void;
@symbol("glVideoCaptureStreamParameterfvNV") fn _glVideoCaptureStreamParameterfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLfloat) void;
@symbol("glVideoCaptureStreamParameterivNV") fn _glVideoCaptureStreamParameterivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLint) void;
@symbol("glViewport") fn _glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
@symbol("glViewportArrayv") fn _glViewportArrayv(first: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glViewportArrayvNV") fn _glViewportArrayvNV(first: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glViewportArrayvOES") fn _glViewportArrayvOES(first: GLuint, count: GLsizei, v: GLfloat) void;
@symbol("glViewportIndexedf") fn _glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) void;
@symbol("glViewportIndexedfOES") fn _glViewportIndexedfOES(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) void;
@symbol("glViewportIndexedfNV") fn _glViewportIndexedfNV(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) void;
@symbol("glViewportIndexedfv") fn _glViewportIndexedfv(index: GLuint, v: GLfloat) void;
@symbol("glViewportIndexedfvOES") fn _glViewportIndexedfvOES(index: GLuint, v: GLfloat) void;
@symbol("glViewportIndexedfvNV") fn _glViewportIndexedfvNV(index: GLuint, v: GLfloat) void;
@symbol("glViewportPositionWScaleNV") fn _glViewportPositionWScaleNV(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) void;
@symbol("glViewportSwizzleNV") fn _glViewportSwizzleNV(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) void;
@symbol("glWaitSemaphoreEXT") fn _glWaitSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: GLuint, numTextureBarriers: GLuint, textures: GLuint, srcLayouts: GLenum) void;
@symbol("glWaitSemaphoreui64NVX") fn _glWaitSemaphoreui64NVX(waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: GLuint, fenceValueArray: GLuint64) void;
@symbol("glWeightPathsNV") fn _glWeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: GLuint, weights: GLfloat) void;
@symbol("glWeightPointerOES") fn _glWeightPointerOES(_size: GLint, _type: GLenum, stride: GLsizei, pointer: nullable *void) void;
@symbol("glWindowPos2d") fn _glWindowPos2d(x: GLdouble, y: GLdouble) void;
@symbol("glWindowPos2dMESA") fn _glWindowPos2dMESA(x: GLdouble, y: GLdouble) void;
@symbol("glWindowPos2dv") fn _glWindowPos2dv(v: GLdouble) void;
@symbol("glWindowPos2dvMESA") fn _glWindowPos2dvMESA(v: GLdouble) void;
@symbol("glWindowPos2f") fn _glWindowPos2f(x: GLfloat, y: GLfloat) void;
@symbol("glWindowPos2fMESA") fn _glWindowPos2fMESA(x: GLfloat, y: GLfloat) void;
@symbol("glWindowPos2fv") fn _glWindowPos2fv(v: GLfloat) void;
@symbol("glWindowPos2fvMESA") fn _glWindowPos2fvMESA(v: GLfloat) void;
@symbol("glWindowPos2i") fn _glWindowPos2i(x: GLint, y: GLint) void;
@symbol("glWindowPos2iMESA") fn _glWindowPos2iMESA(x: GLint, y: GLint) void;
@symbol("glWindowPos2iv") fn _glWindowPos2iv(v: GLint) void;
@symbol("glWindowPos2ivMESA") fn _glWindowPos2ivMESA(v: GLint) void;
@symbol("glWindowPos2s") fn _glWindowPos2s(x: GLshort, y: GLshort) void;
@symbol("glWindowPos2sMESA") fn _glWindowPos2sMESA(x: GLshort, y: GLshort) void;
@symbol("glWindowPos2sv") fn _glWindowPos2sv(v: GLshort) void;
@symbol("glWindowPos2svMESA") fn _glWindowPos2svMESA(v: GLshort) void;
@symbol("glWindowPos3d") fn _glWindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glWindowPos3dMESA") fn _glWindowPos3dMESA(x: GLdouble, y: GLdouble, z: GLdouble) void;
@symbol("glWindowPos3dv") fn _glWindowPos3dv(v: GLdouble) void;
@symbol("glWindowPos3dvMESA") fn _glWindowPos3dvMESA(v: GLdouble) void;
@symbol("glWindowPos3f") fn _glWindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glWindowPos3fMESA") fn _glWindowPos3fMESA(x: GLfloat, y: GLfloat, z: GLfloat) void;
@symbol("glWindowPos3fv") fn _glWindowPos3fv(v: GLfloat) void;
@symbol("glWindowPos3fvMESA") fn _glWindowPos3fvMESA(v: GLfloat) void;
@symbol("glWindowPos3i") fn _glWindowPos3i(x: GLint, y: GLint, z: GLint) void;
@symbol("glWindowPos3iMESA") fn _glWindowPos3iMESA(x: GLint, y: GLint, z: GLint) void;
@symbol("glWindowPos3iv") fn _glWindowPos3iv(v: GLint) void;
@symbol("glWindowPos3ivMESA") fn _glWindowPos3ivMESA(v: GLint) void;
@symbol("glWindowPos3s") fn _glWindowPos3s(x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glWindowPos3sMESA") fn _glWindowPos3sMESA(x: GLshort, y: GLshort, z: GLshort) void;
@symbol("glWindowPos3sv") fn _glWindowPos3sv(v: GLshort) void;
@symbol("glWindowPos3svMESA") fn _glWindowPos3svMESA(v: GLshort) void;
@symbol("glWindowPos4dMESA") fn _glWindowPos4dMESA(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
@symbol("glWindowPos4dvMESA") fn _glWindowPos4dvMESA(v: GLdouble) void;
@symbol("glWindowPos4fMESA") fn _glWindowPos4fMESA(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
@symbol("glWindowPos4fvMESA") fn _glWindowPos4fvMESA(v: GLfloat) void;
@symbol("glWindowPos4iMESA") fn _glWindowPos4iMESA(x: GLint, y: GLint, z: GLint, w: GLint) void;
@symbol("glWindowPos4ivMESA") fn _glWindowPos4ivMESA(v: GLint) void;
@symbol("glWindowPos4sMESA") fn _glWindowPos4sMESA(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
@symbol("glWindowPos4svMESA") fn _glWindowPos4svMESA(v: GLshort) void;
@symbol("glWindowRectanglesEXT") fn _glWindowRectanglesEXT(mode: GLenum, count: GLsizei, box: GLint) void;
@symbol("glWriteMaskEXT") fn _glWriteMaskEXT(res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) void;
@symbol("glFramebufferParameteriMESA") fn _glFramebufferParameteriMESA(target: GLenum, pname: GLenum, param: GLint) void;
@symbol("glGetFramebufferParameterivMESA") fn _glGetFramebufferParameterivMESA(target: GLenum, pname: GLenum, params: GLint) void;
